{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.ico","path":"medias/logo.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/friends.json","hash":"e694e1ac000a8cab9c7839de9863ed57ff997a19","modified":1648023883276},{"_id":"source/about/index.md","hash":"0ed7dbb39422c14ac3b6db5d571449c6e4477e23","modified":1648023788673},{"_id":"source/categories/index.md","hash":"905260b84a8d5d8638c5c8d3d3eca27c3feed74d","modified":1648023722757},{"_id":"source/friends/index.md","hash":"9fb4cce810292ce4c22fc86a7722e5ae12f31c84","modified":1648023826479},{"_id":"source/tags/index.md","hash":"bafcefe48558400ccdd05e1a5fcbe32dfc4f031a","modified":1648023746756},{"_id":"source/_posts/Computer/01.md","hash":"e9e107b83e71ada731af3c00715c3e910a0bc306","modified":1648032534350},{"_id":"source/_posts/Computer/02.md","hash":"c1be37dae6529af1efd1d2e0b8b0f1c5719bde20","modified":1648032554049},{"_id":"source/_posts/Computer/03.md","hash":"8a10f4f37e7b17cdabc36d53dd723f389acb8b90","modified":1648032537740},{"_id":"source/_posts/Computer/04.md","hash":"439843de21315299a1ee4ad792ee8a03f68d24fb","modified":1648032541060},{"_id":"source/_posts/Computer/05.md","hash":"cbe599ac5b71e4268b5e98d32a89aaf861401274","modified":1648032545521},{"_id":"source/_posts/Computer/06.md","hash":"97e816f8c47123cbfc04bf73571049d53b862b0b","modified":1648032549338},{"_id":"source/.DS_Store","hash":"bb8a2bda4cde2ac25463a55f477bf615bbf65787","modified":1648031461742},{"_id":"source/_posts/JavaScript/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648031762111},{"_id":"source/_posts/.DS_Store","hash":"2acf14fa991fbf945036b3ba14df6300917fd4a5","modified":1648031895284},{"_id":"source/_posts/JavaScript/01.md","hash":"d9c59ade9c30b43ed3ad6b25497462b119639910","modified":1648032130089},{"_id":"source/_posts/JavaScript/02.md","hash":"1bb5340b5fb7b51f1fe73b14253838d6a91ba9d2","modified":1648032125572},{"_id":"source/_posts/css/01.md","hash":"3c8e11726e8e842f142de3cfc8e17ec013078337","modified":1648032081348},{"_id":"source/_posts/Computer/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1646277507265},{"_id":"source/_posts/css/02.md","hash":"f354017ce29c3c1dd11910b6e03ae5c307be9124","modified":1648032084712},{"_id":"source/_posts/css/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1648032050796},{"_id":"source/_posts/vue/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1646277564924},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1647924774938},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1647924774938},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1647924774939},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1647924774939},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"433acdc4f5b47b77486b7caee78aefb32a5c87db","modified":1648028910911},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1647924774940},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1647924774940},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1647924774940},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1647924774940},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1647924774940},{"_id":"themes/hexo-theme-matery/README.md","hash":"ddaf6310154e314385d63041da61c418055314f6","modified":1647924774939},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1647924774948},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"b5f335f211ce364d54733168fbc8741faf7b037b","modified":1648025844223},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1647924774948},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1647924774948},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1647924774948},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"851531e78e90a2dc923d6b5d98d3548d37e0cb7a","modified":1647924774948},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1647924774948},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"13ea3aabb9181f5b765a535e24e7540f1f8f66fd","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1647924774948},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1647924774949},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1647924774940},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"acd18121108659b3dd7a94c10943e5f6a4938239","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"bfa1d2fb7c463b9cac11edee2fec61fc1c036854","modified":1648030839397},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1647924774942},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1647924774942},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"e8ad6c870e2f96d7835542067dec7f0ba4056103","modified":1648026650818},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1647924774942},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1647924774942},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"60a65b6b181bc77febf71e572e884a61aed91fc8","modified":1647924774942},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1647924774942},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"bf96ff47df2d81bf2edb2a8c6737e36b8b08aca3","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1647924774941},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1647924774943},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"d32b8533e88782d9dc12992a1189c7d7e4489825","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"a10df7abc9bcac399bcabf727c8491294430dfb0","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1647924774945},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1647924774944},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1647924774946},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1647924774947},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1647924774947},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1647924774950},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1647924774950},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1647924774950},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1647924774950},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1647924774950},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1647924774950},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1647924774951},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1647924774952},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1647924774952},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1647924774952},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1647924774952},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"261ed564893b022a93382711bb8ff5e1d56edd41","modified":1648026720457},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1647924775032},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1647924775016},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1647924774952},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1647924774953},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1647924774953},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1647924774953},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1647924774953},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1647924774954},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1647924774960},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1647924774961},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1647924774961},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1647924774961},{"_id":"themes/hexo-theme-matery/source/medias/logo.ico","hash":"8c93c1062497976b7870ef6fa5d6320b035589ab","modified":1645432353668},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1647924774966},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1647924774966},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1647924774969},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1647924774970},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1647924774970},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1647924774970},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1647924774971},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1647924774971},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1647924774973},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1647924774990},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1647924774996},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1647924774996},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1647924774996},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1647924774996},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1647924774997},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1647924774997},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1647924774997},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1647924774998},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1647924774998},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1647924774998},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1647924774998},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1647924774999},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1647924775001},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1647924775001},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1647924775004},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1647924775016},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1647924775016},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1647924775016},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1647924775016},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1647924775019},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1647924775021},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1647924775022},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1647924775023},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1647924775025},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1647924775026},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1647924775027},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1647924775028},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1647924775028},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1647924775029},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1647924775031},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1647924775031},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1647924775040},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1647924774957},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1647924775041},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1647924774959},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1647924774959},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1647924774971},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1647924774972},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1647924774973},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1647924774999},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1647924774999},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1647924775000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1647924775000},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1647924775000},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1647924775001},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1647924775001},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1647924774957},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1647924774966},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1647924774970},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1647924774971},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1647924775005},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1647924775012},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1647924775011},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1647924775009},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1647924775018},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1647924775018},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1647924775020},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1647924775020},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1647924775022},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1647924775023},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1647924775024},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1647924775024},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1647924775026},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1647924775029},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1647924775030},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1647924775032},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1647924774955},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1647924774954},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1647924774957},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1647924774959},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1647924774962},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1647924775017},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1647924774974},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1647924774975},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1647924775006},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1647924775008},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1647924775010},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1647924775014},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1647924775015},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1647924775036},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1647924774956},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1647924774951},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1647924775013},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1647924775039},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1647924774959},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1647924775004},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1647924775035},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1647924774965},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1647924774969},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"d3970b36544b8ffadab95826da5c9292fe39126d","modified":1645432353682},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"d3970b36544b8ffadab95826da5c9292fe39126d","modified":1645432353682},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1647924774995},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1647924774989},{"_id":"public/atom.xml","hash":"edff5b7216ca617300b400f2eeda4bf1a0e212e6","modified":1648033444281},{"_id":"public/search.xml","hash":"715801b980fc921e6ce6f464515132911c7ac365","modified":1648033444281},{"_id":"public/about/index.html","hash":"3927a4cb224d4f0db3acd8eb1858cb1dfa4536fb","modified":1648033444281},{"_id":"public/categories/index.html","hash":"da8c34a665e5c6baa7401ea34d691f31f2743621","modified":1648033444281},{"_id":"public/friends/index.html","hash":"4f2521d25e374b8c508cb56cae9b9764e9e52d89","modified":1648033444281},{"_id":"public/tags/index.html","hash":"8ad5644e959c3c0ec6e9ac4308096d40c88062d8","modified":1648033444281},{"_id":"public/2022/03/10/computer/02/index.html","hash":"c7383c4d4ecf43b0098bb1b7f2cba036b9d20a08","modified":1648033444281},{"_id":"public/2022/03/09/computer/06/index.html","hash":"06803c96653b1390812ccca2d895d2c8179809b8","modified":1648033444281},{"_id":"public/2022/03/08/computer/05/index.html","hash":"c63bd80c6e4a68140426b4dc7c989e5e1eb8874c","modified":1648033444281},{"_id":"public/2022/03/07/computer/04/index.html","hash":"29b89b7026d3305889fdeebc7b60e342f2e6c389","modified":1648033444281},{"_id":"public/2022/03/06/computer/03/index.html","hash":"a163796192cdcc22ff2be5c102fbf90fc0361737","modified":1648033444281},{"_id":"public/2022/03/05/computer/01/index.html","hash":"2590d2c4f59faa7bdd821913fa51d6e9d5f3552e","modified":1648033444281},{"_id":"public/2022/03/04/javascript/01/index.html","hash":"5253f324b16d20b88690aead82f9d61fa33c4969","modified":1648033444281},{"_id":"public/2022/03/03/javascript/02/index.html","hash":"319b9a4cd728fd1a063ee933c4043b7da4b51ae1","modified":1648033444281},{"_id":"public/2022/03/02/css/02/index.html","hash":"6edc1e5dfd792d9f01174e283e90a145d6424a52","modified":1648033444281},{"_id":"public/2022/03/01/css/01/index.html","hash":"e960b7a161d72bc2ad3bd6350b101495b9d9eddf","modified":1648033444281},{"_id":"public/archives/index.html","hash":"d7b8d08b50bd6df93a237ac9795077b5f1407919","modified":1648033444281},{"_id":"public/archives/2022/index.html","hash":"05027450e39d195630ca8de1deabfe77cf63d87f","modified":1648033444281},{"_id":"public/archives/2022/03/index.html","hash":"0a1b8345c2dc64a050a29238699ed2564cd3d7f5","modified":1648033444281},{"_id":"public/categories/计算机网络笔记/index.html","hash":"71a0dda44979c721af63acb1ee315425836a7981","modified":1648033444281},{"_id":"public/categories/JavaScript数据结构与算法笔记/index.html","hash":"5c912ff572e6c549ce3ef75ec45aa624b776664d","modified":1648033444281},{"_id":"public/categories/CSS学习笔记/index.html","hash":"e7b1c96d1fbe163fb115c9f8d8c59ba8b7efa43e","modified":1648033444281},{"_id":"public/index.html","hash":"8da736f551f7a0012fc9c6bd81039293352e7a30","modified":1648033444281},{"_id":"public/page/2/index.html","hash":"97c038351c75ef72f0fd7a7bdb6cf8c6d6c14a90","modified":1648033444281},{"_id":"public/tags/Computer/index.html","hash":"648231e143fc57b8aced89b0612e4f7d64910d73","modified":1648033444281},{"_id":"public/tags/JavaScript/index.html","hash":"2fcd37cfbb93e730a5a89db3265b91ea3817fb5a","modified":1648033444281},{"_id":"public/tags/CSS/index.html","hash":"d27c97fd6561874496db3cf7643d61d130cbebf6","modified":1648033444281},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1648033444281},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1648033444281},{"_id":"public/medias/logo.ico","hash":"8c93c1062497976b7870ef6fa5d6320b035589ab","modified":1648033444281},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1648033444281},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1648033444281},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1648033444281},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1648033444281},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1648033444281},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1648033444281},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1648033444281},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1648033444281},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1648033444281},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1648033444281},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1648033444281},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1648033444281},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1648033444281},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1648033444281},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1648033444281},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1648033444281},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1648033444281},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1648033444281},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"0cc8fd9cdd79bbba4081de567a7e25975f142819","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"ff48012074101c281c3a3f17227791b722000cc5","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"9bf823e1ab0b30ecbbc236096e3486e424f83f19","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"f22cc99d13609b8235db86be38ea6a953677c92d","modified":1648033444281},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1648033444281},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1648033444281},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1648033444281},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1648033444281},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1648033444281},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1648033444281},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1648033444281},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1648033444281},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1648033444281},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1648033444281},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1648033444281},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1648033444281},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1648033444281},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1648033444281},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1648033444281},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1648033444281},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1648033444281},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1648033444281},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1648033444281},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1648033444281},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1648033444281},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1648033444281},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1648033444281},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1648033444281},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1648033444281},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1648033444281},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"69fc982ace0b9fdd2cfa68c6628bcaad00f407fd","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"ed99d812e4c88826335f93acede3fad85c90fb54","modified":1648033444281},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1648033444281},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1648033444281},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1648033444281},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1648033444281},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"b952565a96d644427b0e515cbeab31333276ad1c","modified":1648033444281},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1648033444281},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1648033444281},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1648033444281},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1648033444281},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1648033444281},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1648033444281},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1648033444281},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1648033444281},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1648033444281},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1648033444281},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1648033444281},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1648033444281},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1648033444281},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1648033444281},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1648033444281},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1648033444281},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1648033444281},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1648033444281},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1648033444281},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1648033444281},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1648033444281},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1648033444281},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1648033444281},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1648033444281},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1648033444281},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1648033444281},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1648033444281},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1648033444281},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1648033444281},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1648033444281},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1648033444281},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1648033444281},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1648033444281},{"_id":"public/libs/prism/prism.css","hash":"f1a273e896538fa4e11cb70acc5ec7e88d8b6c4c","modified":1648033444281},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1648033444281},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1648033444281},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1648033444281},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1648033444281},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1648033444281},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1648033444281},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1648033444281},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1648033444281},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1648033444281},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1648033444281},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1648033444281},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1648033444281},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1648033444281},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1648033444281},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"fbf75c61de6bfc3a610cd2f549bfa19df5e8f5f0","modified":1648033444281},{"_id":"public/css/matery.css","hash":"9145d60753fd59278a63fe865047e50aafe66c23","modified":1648033444281},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1648033444281},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1648033444281},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1648033444281},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1648033444281},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1648033444281},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1648033444281},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1648033444281},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1648033444281},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1648033444281},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1648033444281},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1648033444281},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1648033444281},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1648033444281},{"_id":"public/libs/awesome/css/all.min.css","hash":"b513d9a39af2ee145f12c1ba03f9982960c47029","modified":1648033444281},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1648033444281},{"_id":"public/libs/awesome/css/all.css","hash":"850d2a2e0b6c640e41c71b2dab4b9d8cc562cdf6","modified":1648033444281},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1648033444281},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1648033444281},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1648033444281},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1648033444281},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1648033444281},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1648033444281},{"_id":"public/medias/avatar.jpg","hash":"d3970b36544b8ffadab95826da5c9292fe39126d","modified":1648033444281},{"_id":"public/favicon.png","hash":"d3970b36544b8ffadab95826da5c9292fe39126d","modified":1648033444281},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1648033444281},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1648033444281},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1648033444281},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"be7f26d6f063cfec5440517848ae5943adae1f54","modified":1648033444281},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1648033444281}],"Category":[{"name":"计算机网络笔记","_id":"cl13gk8fu0004d63u15dj1vtb"},{"name":"JavaScript数据结构与算法笔记","_id":"cl13gk8g7000qd63ueek9bn0u"},{"name":"CSS学习笔记","_id":"cl13gk8ga000xd63ucb2535jh"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2022-03-23T08:22:47.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2022-03-23 16:22:47\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2022-03-23T08:23:08.673Z","path":"about/index.html","comments":1,"_id":"cl13gk8fm0000d63u6i374aod","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2022-03-23T08:21:34.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-03-23 16:21:34\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-03-23T08:22:02.757Z","path":"categories/index.html","comments":1,"_id":"cl13gk8fs0002d63uaqeu4w5u","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2022-03-23T08:23:31.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2022-03-23 16:23:31\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2022-03-23T08:23:46.479Z","path":"friends/index.html","comments":1,"_id":"cl13gk8fw0006d63u1tk319ze","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2022-03-23T08:22:10.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-03-23 16:22:10\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-03-23T08:22:26.756Z","path":"tags/index.html","comments":1,"_id":"cl13gk8fy0008d63uh68wf4r7","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"输入URL到网页呈现","date":"2022-03-04T16:00:00.000Z","sidebar":"auto","_content":"---\n\n# 输入URL到网页呈现\n\n## 基本步骤\n\n1. URL解析\n\n2. DNS查询\n\n3. TCP连接\n\n4. HTTP请求\n\n5. 响应请求\n\n6. 页面渲染\n\n## 详细分析\n\n### 1. URL解析\n\n首先判断是否是合法的URL，还是一个待搜索的关键词  \n如果是合法的URL，则进行URL解析   \n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/27a0c690-bdf4-11eb-ab90-d9ae814b240d.png)  \n\n### 2. DNS查询\n\n获取到域名对应的目标服务器IP地址 \n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png)  \n\n### 3. TCP连接\n\n浏览器在确定目标服务器的IP地址后，经历三次握手建立TCP连接\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/ad750790-bdf4-11eb-85f6-6fac77c0c9b3.png)\n\n### 4. 发送http请求\n\n建立tcp连接之后，就可以再此基础上通信了。  \n**浏览器**发送http请求到目标服务器。请求内容包括：\n- 请求行(请求方法get/post、请求URL、http协议及版本)\n- 请求头/报文头\n- 请求主体  \n\n**常见http请求方法**\n- GET: 向服务器获取数据；\n- POST：将实体提交到指定的资源，通常会造成服务器资源的修改；\n- PUT：上传文件，更新数据；\n- DELETE：删除服务器上的对象；\n- HEAD：获取报文首部，与GET相比，不返回报文主体部分；\n- OPTIONS：询问支持的请求方法，用来跨域请求；\n- CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；\n- TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。  \n\n**HTTP Request Header 常见的请求头：**\n- Accept:浏览器能够处理的内容类型\n- Accept-Charset:浏览器能够显示的字符集\n- Accept-Encoding：浏览器能够处理的压缩编码\n- Accept-Language：浏览器当前设置的语言\n- Connection：浏览器与服务器之间连接的类型\n- Cookie：当前页面设置的任何Cookie\n- Host：发出请求的页面所在的域\n- Referer：发出请求的页面的URL\n- **User-Agent：浏览器的用户代理字符串**\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/bbcb60f0-bdf4-11eb-ab90-d9ae814b240d.png)\n\n### 5. 响应请求\n当**服务器**接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，响应消息包括：\n- 响应行/状态行\n- 响应头/消息报头\n- 响应正文 \n\n**HTTP Responses Header 常见的响应头：**\n- Date：表示消息发送的时间，时间的描述格式由rfc822定义\n- server:服务器名称\n- Connection：浏览器与服务器之间连接的类型\n- Cache-Control：控制HTTP缓存\n- **content-type:表示后面的文档属于什么MIME类型**\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/c5fe0140-bdf4-11eb-ab90-d9ae814b240d.png)  \n在服务器响应之后，http默认开启长链接keep-alive。  \n当页面关闭之后，tcp连接则会经过四次挥手完成断开\n\n### 6. 页面渲染\n当浏览器接收服务器响应的资源并进行解析：  \n- 查看响应头信息，根据不同的指示做出相应的处理。比如重定向、存储cookie、解压gzip、缓存资源等等。  \n- 查看响应头的Content-Type值，**根据不同的资源类型采用不同的解析方式**。\n\n页面渲染过程：\n- 解析 HTML，构建 **DOM 树**\n- 解析 CSS ，生成 **CSS 规则树**\n- 合并 DOM 树和 CSS 规则树，生成 **render 树**\n- **布局** render 树（ Layout / reflow ），负责各元素尺寸、位置的计算\n- **绘制** render 树（ paint / repaint ），绘制页面像素信息\n- 浏览器会将各层的像素信息发送给 GPU，GPU 会将**各层像素信息合成**（ composite ），显示在屏幕上  \n\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n","source":"_posts/Computer/01.md","raw":"---\ntitle: 输入URL到网页呈现\ndate: 2022-03-05\ncategories:\n - 计算机网络笔记\ntags:\n - Computer\nsidebar: 'auto'\n---\n---\n\n# 输入URL到网页呈现\n\n## 基本步骤\n\n1. URL解析\n\n2. DNS查询\n\n3. TCP连接\n\n4. HTTP请求\n\n5. 响应请求\n\n6. 页面渲染\n\n## 详细分析\n\n### 1. URL解析\n\n首先判断是否是合法的URL，还是一个待搜索的关键词  \n如果是合法的URL，则进行URL解析   \n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/27a0c690-bdf4-11eb-ab90-d9ae814b240d.png)  \n\n### 2. DNS查询\n\n获取到域名对应的目标服务器IP地址 \n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png)  \n\n### 3. TCP连接\n\n浏览器在确定目标服务器的IP地址后，经历三次握手建立TCP连接\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/ad750790-bdf4-11eb-85f6-6fac77c0c9b3.png)\n\n### 4. 发送http请求\n\n建立tcp连接之后，就可以再此基础上通信了。  \n**浏览器**发送http请求到目标服务器。请求内容包括：\n- 请求行(请求方法get/post、请求URL、http协议及版本)\n- 请求头/报文头\n- 请求主体  \n\n**常见http请求方法**\n- GET: 向服务器获取数据；\n- POST：将实体提交到指定的资源，通常会造成服务器资源的修改；\n- PUT：上传文件，更新数据；\n- DELETE：删除服务器上的对象；\n- HEAD：获取报文首部，与GET相比，不返回报文主体部分；\n- OPTIONS：询问支持的请求方法，用来跨域请求；\n- CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；\n- TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。  \n\n**HTTP Request Header 常见的请求头：**\n- Accept:浏览器能够处理的内容类型\n- Accept-Charset:浏览器能够显示的字符集\n- Accept-Encoding：浏览器能够处理的压缩编码\n- Accept-Language：浏览器当前设置的语言\n- Connection：浏览器与服务器之间连接的类型\n- Cookie：当前页面设置的任何Cookie\n- Host：发出请求的页面所在的域\n- Referer：发出请求的页面的URL\n- **User-Agent：浏览器的用户代理字符串**\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/bbcb60f0-bdf4-11eb-ab90-d9ae814b240d.png)\n\n### 5. 响应请求\n当**服务器**接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，响应消息包括：\n- 响应行/状态行\n- 响应头/消息报头\n- 响应正文 \n\n**HTTP Responses Header 常见的响应头：**\n- Date：表示消息发送的时间，时间的描述格式由rfc822定义\n- server:服务器名称\n- Connection：浏览器与服务器之间连接的类型\n- Cache-Control：控制HTTP缓存\n- **content-type:表示后面的文档属于什么MIME类型**\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/c5fe0140-bdf4-11eb-ab90-d9ae814b240d.png)  \n在服务器响应之后，http默认开启长链接keep-alive。  \n当页面关闭之后，tcp连接则会经过四次挥手完成断开\n\n### 6. 页面渲染\n当浏览器接收服务器响应的资源并进行解析：  \n- 查看响应头信息，根据不同的指示做出相应的处理。比如重定向、存储cookie、解压gzip、缓存资源等等。  \n- 查看响应头的Content-Type值，**根据不同的资源类型采用不同的解析方式**。\n\n页面渲染过程：\n- 解析 HTML，构建 **DOM 树**\n- 解析 CSS ，生成 **CSS 规则树**\n- 合并 DOM 树和 CSS 规则树，生成 **render 树**\n- **布局** render 树（ Layout / reflow ），负责各元素尺寸、位置的计算\n- **绘制** render 树（ paint / repaint ），绘制页面像素信息\n- 浏览器会将各层的像素信息发送给 GPU，GPU 会将**各层像素信息合成**（ composite ），显示在屏幕上  \n\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png)\n\n\n\n","slug":"Computer/01","published":1,"updated":"2022-03-23T10:48:54.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8fp0001d63uen0eeufe","content":"<hr>\n<h1 id=\"输入URL到网页呈现\"><a href=\"#输入URL到网页呈现\" class=\"headerlink\" title=\"输入URL到网页呈现\"></a>输入URL到网页呈现</h1><h2 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><ol>\n<li><p>URL解析</p>\n</li>\n<li><p>DNS查询</p>\n</li>\n<li><p>TCP连接</p>\n</li>\n<li><p>HTTP请求</p>\n</li>\n<li><p>响应请求</p>\n</li>\n<li><p>页面渲染</p>\n</li>\n</ol>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><h3 id=\"1-URL解析\"><a href=\"#1-URL解析\" class=\"headerlink\" title=\"1. URL解析\"></a>1. URL解析</h3><p>首先判断是否是合法的URL，还是一个待搜索的关键词<br>如果是合法的URL，则进行URL解析   </p>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/27a0c690-bdf4-11eb-ab90-d9ae814b240d.png\">  </p>\n<h3 id=\"2-DNS查询\"><a href=\"#2-DNS查询\" class=\"headerlink\" title=\"2. DNS查询\"></a>2. DNS查询</h3><p>获取到域名对应的目标服务器IP地址 </p>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png\">  </p>\n<h3 id=\"3-TCP连接\"><a href=\"#3-TCP连接\" class=\"headerlink\" title=\"3. TCP连接\"></a>3. TCP连接</h3><p>浏览器在确定目标服务器的IP地址后，经历三次握手建立TCP连接</p>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/ad750790-bdf4-11eb-85f6-6fac77c0c9b3.png\"></p>\n<h3 id=\"4-发送http请求\"><a href=\"#4-发送http请求\" class=\"headerlink\" title=\"4. 发送http请求\"></a>4. 发送http请求</h3><p>建立tcp连接之后，就可以再此基础上通信了。<br><strong>浏览器</strong>发送http请求到目标服务器。请求内容包括：</p>\n<ul>\n<li>请求行(请求方法get/post、请求URL、http协议及版本)</li>\n<li>请求头/报文头</li>\n<li>请求主体  </li>\n</ul>\n<p><strong>常见http请求方法</strong></p>\n<ul>\n<li>GET: 向服务器获取数据；</li>\n<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>\n<li>PUT：上传文件，更新数据；</li>\n<li>DELETE：删除服务器上的对象；</li>\n<li>HEAD：获取报文首部，与GET相比，不返回报文主体部分；</li>\n<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>\n<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；</li>\n<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。  </li>\n</ul>\n<p><strong>HTTP Request Header 常见的请求头：</strong></p>\n<ul>\n<li>Accept:浏览器能够处理的内容类型</li>\n<li>Accept-Charset:浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的URL</li>\n<li><strong>User-Agent：浏览器的用户代理字符串</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/bbcb60f0-bdf4-11eb-ab90-d9ae814b240d.png\"></p>\n<h3 id=\"5-响应请求\"><a href=\"#5-响应请求\" class=\"headerlink\" title=\"5. 响应请求\"></a>5. 响应请求</h3><p>当<strong>服务器</strong>接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，响应消息包括：</p>\n<ul>\n<li>响应行/状态行</li>\n<li>响应头/消息报头</li>\n<li>响应正文 </li>\n</ul>\n<p><strong>HTTP Responses Header 常见的响应头：</strong></p>\n<ul>\n<li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li>\n<li>server:服务器名称</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cache-Control：控制HTTP缓存</li>\n<li><strong>content-type:表示后面的文档属于什么MIME类型</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/c5fe0140-bdf4-11eb-ab90-d9ae814b240d.png\"><br>在服务器响应之后，http默认开启长链接keep-alive。<br>当页面关闭之后，tcp连接则会经过四次挥手完成断开</p>\n<h3 id=\"6-页面渲染\"><a href=\"#6-页面渲染\" class=\"headerlink\" title=\"6. 页面渲染\"></a>6. 页面渲染</h3><p>当浏览器接收服务器响应的资源并进行解析：  </p>\n<ul>\n<li>查看响应头信息，根据不同的指示做出相应的处理。比如重定向、存储cookie、解压gzip、缓存资源等等。  </li>\n<li>查看响应头的Content-Type值，<strong>根据不同的资源类型采用不同的解析方式</strong>。</li>\n</ul>\n<p>页面渲染过程：</p>\n<ul>\n<li>解析 HTML，构建 <strong>DOM 树</strong></li>\n<li>解析 CSS ，生成 <strong>CSS 规则树</strong></li>\n<li>合并 DOM 树和 CSS 规则树，生成 <strong>render 树</strong></li>\n<li><strong>布局</strong> render 树（ Layout / reflow ），负责各元素尺寸、位置的计算</li>\n<li><strong>绘制</strong> render 树（ paint / repaint ），绘制页面像素信息</li>\n<li>浏览器会将各层的像素信息发送给 GPU，GPU 会将<strong>各层像素信息合成</strong>（ composite ），显示在屏幕上  </li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h1 id=\"输入URL到网页呈现\"><a href=\"#输入URL到网页呈现\" class=\"headerlink\" title=\"输入URL到网页呈现\"></a>输入URL到网页呈现</h1><h2 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h2><ol>\n<li><p>URL解析</p>\n</li>\n<li><p>DNS查询</p>\n</li>\n<li><p>TCP连接</p>\n</li>\n<li><p>HTTP请求</p>\n</li>\n<li><p>响应请求</p>\n</li>\n<li><p>页面渲染</p>\n</li>\n</ol>\n<h2 id=\"详细分析\"><a href=\"#详细分析\" class=\"headerlink\" title=\"详细分析\"></a>详细分析</h2><h3 id=\"1-URL解析\"><a href=\"#1-URL解析\" class=\"headerlink\" title=\"1. URL解析\"></a>1. URL解析</h3><p>首先判断是否是合法的URL，还是一个待搜索的关键词<br>如果是合法的URL，则进行URL解析   </p>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/27a0c690-bdf4-11eb-ab90-d9ae814b240d.png\">  </p>\n<h3 id=\"2-DNS查询\"><a href=\"#2-DNS查询\" class=\"headerlink\" title=\"2. DNS查询\"></a>2. DNS查询</h3><p>获取到域名对应的目标服务器IP地址 </p>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png\">  </p>\n<h3 id=\"3-TCP连接\"><a href=\"#3-TCP连接\" class=\"headerlink\" title=\"3. TCP连接\"></a>3. TCP连接</h3><p>浏览器在确定目标服务器的IP地址后，经历三次握手建立TCP连接</p>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/ad750790-bdf4-11eb-85f6-6fac77c0c9b3.png\"></p>\n<h3 id=\"4-发送http请求\"><a href=\"#4-发送http请求\" class=\"headerlink\" title=\"4. 发送http请求\"></a>4. 发送http请求</h3><p>建立tcp连接之后，就可以再此基础上通信了。<br><strong>浏览器</strong>发送http请求到目标服务器。请求内容包括：</p>\n<ul>\n<li>请求行(请求方法get/post、请求URL、http协议及版本)</li>\n<li>请求头/报文头</li>\n<li>请求主体  </li>\n</ul>\n<p><strong>常见http请求方法</strong></p>\n<ul>\n<li>GET: 向服务器获取数据；</li>\n<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>\n<li>PUT：上传文件，更新数据；</li>\n<li>DELETE：删除服务器上的对象；</li>\n<li>HEAD：获取报文首部，与GET相比，不返回报文主体部分；</li>\n<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>\n<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；</li>\n<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。  </li>\n</ul>\n<p><strong>HTTP Request Header 常见的请求头：</strong></p>\n<ul>\n<li>Accept:浏览器能够处理的内容类型</li>\n<li>Accept-Charset:浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的URL</li>\n<li><strong>User-Agent：浏览器的用户代理字符串</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/bbcb60f0-bdf4-11eb-ab90-d9ae814b240d.png\"></p>\n<h3 id=\"5-响应请求\"><a href=\"#5-响应请求\" class=\"headerlink\" title=\"5. 响应请求\"></a>5. 响应请求</h3><p>当<strong>服务器</strong>接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，响应消息包括：</p>\n<ul>\n<li>响应行/状态行</li>\n<li>响应头/消息报头</li>\n<li>响应正文 </li>\n</ul>\n<p><strong>HTTP Responses Header 常见的响应头：</strong></p>\n<ul>\n<li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li>\n<li>server:服务器名称</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cache-Control：控制HTTP缓存</li>\n<li><strong>content-type:表示后面的文档属于什么MIME类型</strong></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/c5fe0140-bdf4-11eb-ab90-d9ae814b240d.png\"><br>在服务器响应之后，http默认开启长链接keep-alive。<br>当页面关闭之后，tcp连接则会经过四次挥手完成断开</p>\n<h3 id=\"6-页面渲染\"><a href=\"#6-页面渲染\" class=\"headerlink\" title=\"6. 页面渲染\"></a>6. 页面渲染</h3><p>当浏览器接收服务器响应的资源并进行解析：  </p>\n<ul>\n<li>查看响应头信息，根据不同的指示做出相应的处理。比如重定向、存储cookie、解压gzip、缓存资源等等。  </li>\n<li>查看响应头的Content-Type值，<strong>根据不同的资源类型采用不同的解析方式</strong>。</li>\n</ul>\n<p>页面渲染过程：</p>\n<ul>\n<li>解析 HTML，构建 <strong>DOM 树</strong></li>\n<li>解析 CSS ，生成 <strong>CSS 规则树</strong></li>\n<li>合并 DOM 树和 CSS 规则树，生成 <strong>render 树</strong></li>\n<li><strong>布局</strong> render 树（ Layout / reflow ），负责各元素尺寸、位置的计算</li>\n<li><strong>绘制</strong> render 树（ paint / repaint ），绘制页面像素信息</li>\n<li>浏览器会将各层的像素信息发送给 GPU，GPU 会将<strong>各层像素信息合成</strong>（ composite ），显示在屏幕上  </li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png\"></p>\n"},{"title":"TCP和UDP","date":"2022-03-09T16:00:00.000Z","sidebar":"auto","_content":"---\n## TCP和UDP\n\n### 1. UDP\nUDP（User Datagram Protocol），用户数据包协议，是一个简单的**面向数据报**的通信协议  \n- 传输层的UDP对应用层送过来的报文，不合并不拆分，直接加上UDP首部后送给下面的网络层\n- 传输层的UDP对网络层送过来的报文直接去除UDP首部，然后送给上面的应用层。 \n- 传输途中出现**丢包**，UDP 也不负责重发 \n- 当包的到达顺序出现**乱序**时，UDP没有纠正的功能\n- 出现**网络拥堵**的情况，UDP 也无法进行流量控制等避免网络拥塞行为\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/928e5d20-b393-11eb-ab90-d9ae814b240d.png)\n\n### 2. TCP\nTCP（Transmission Control Protocol），传输控制协议，是一种**可靠、面向字节流**的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送  \n- 可以进行丢包时的**重发**控制，还可以对次序乱掉的分包进行顺序控制\n- **拥塞控制**：TCP会根据当前网络的拥塞状态来确定每个报文段的大小\n- TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以**控制通信流量的浪费**\n- 根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高**可靠**性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/a0010d40-b393-11eb-ab90-d9ae814b240d.png)  \n\n### 3. 区别\n|          | TCP                              | UDP                            |\n| -------- | -------------------------------- | ------------------------------ |\n| 可靠性   | 可靠                             | 不可靠                         |\n| 连接性   | 面向连接                         | 无连接                         |\n| 报文     | 面向字节流                       | 面向报文                       |\n| 传输效率 | 传输效率低                       | 传输效率高                     |\n| 双工性   | 全双工                           | 一对一，一对多，多对一，多对多 |\n| 流量控制 | 滑动窗口                         | 无                             |\n| 拥塞控制 | 慢开始、拥塞避免、快重传、快恢复 | 无                             |\n|首部开销 |首部最小20字节，最大60字节 |首部开销小，仅8字节|\n\n- TCP 提供**可靠**的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方\n- TCP 是**面向连接**的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取\n- TCP**面向字节流**，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用\n- TCP 只能**点对点全双工通信**。UDP 支持一对一、一对多、多对一和多对多的交互通信\n- TCP 应用场景适用于对**效率要求低**，对**准确性要求高**或者要求有链接的场景（SMTP、HTTP、FTP等），而UDP 适用场景为对效率要求高，对准确性要求低的场景（DNS、TFTP、SNMP、NFS等）  \n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/b6cdd800-b393-11eb-ab90-d9ae814b240d.png)\n\n\n","source":"_posts/Computer/02.md","raw":"---\ntitle: TCP和UDP\ndate: 2022-03-10\ncategories:\n - 计算机网络笔记\ntags:\n - Computer\nsidebar: 'auto'\n---\n---\n## TCP和UDP\n\n### 1. UDP\nUDP（User Datagram Protocol），用户数据包协议，是一个简单的**面向数据报**的通信协议  \n- 传输层的UDP对应用层送过来的报文，不合并不拆分，直接加上UDP首部后送给下面的网络层\n- 传输层的UDP对网络层送过来的报文直接去除UDP首部，然后送给上面的应用层。 \n- 传输途中出现**丢包**，UDP 也不负责重发 \n- 当包的到达顺序出现**乱序**时，UDP没有纠正的功能\n- 出现**网络拥堵**的情况，UDP 也无法进行流量控制等避免网络拥塞行为\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/928e5d20-b393-11eb-ab90-d9ae814b240d.png)\n\n### 2. TCP\nTCP（Transmission Control Protocol），传输控制协议，是一种**可靠、面向字节流**的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送  \n- 可以进行丢包时的**重发**控制，还可以对次序乱掉的分包进行顺序控制\n- **拥塞控制**：TCP会根据当前网络的拥塞状态来确定每个报文段的大小\n- TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以**控制通信流量的浪费**\n- 根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高**可靠**性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）\n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/a0010d40-b393-11eb-ab90-d9ae814b240d.png)  \n\n### 3. 区别\n|          | TCP                              | UDP                            |\n| -------- | -------------------------------- | ------------------------------ |\n| 可靠性   | 可靠                             | 不可靠                         |\n| 连接性   | 面向连接                         | 无连接                         |\n| 报文     | 面向字节流                       | 面向报文                       |\n| 传输效率 | 传输效率低                       | 传输效率高                     |\n| 双工性   | 全双工                           | 一对一，一对多，多对一，多对多 |\n| 流量控制 | 滑动窗口                         | 无                             |\n| 拥塞控制 | 慢开始、拥塞避免、快重传、快恢复 | 无                             |\n|首部开销 |首部最小20字节，最大60字节 |首部开销小，仅8字节|\n\n- TCP 提供**可靠**的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方\n- TCP 是**面向连接**的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取\n- TCP**面向字节流**，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用\n- TCP 只能**点对点全双工通信**。UDP 支持一对一、一对多、多对一和多对多的交互通信\n- TCP 应用场景适用于对**效率要求低**，对**准确性要求高**或者要求有链接的场景（SMTP、HTTP、FTP等），而UDP 适用场景为对效率要求高，对准确性要求低的场景（DNS、TFTP、SNMP、NFS等）  \n\n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/b6cdd800-b393-11eb-ab90-d9ae814b240d.png)\n\n\n","slug":"Computer/02","published":1,"updated":"2022-03-23T10:49:14.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8ft0003d63u7hqm7gp6","content":"<hr>\n<h2 id=\"TCP和UDP\"><a href=\"#TCP和UDP\" class=\"headerlink\" title=\"TCP和UDP\"></a>TCP和UDP</h2><h3 id=\"1-UDP\"><a href=\"#1-UDP\" class=\"headerlink\" title=\"1. UDP\"></a>1. UDP</h3><p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的<strong>面向数据报</strong>的通信协议  </p>\n<ul>\n<li>传输层的UDP对应用层送过来的报文，不合并不拆分，直接加上UDP首部后送给下面的网络层</li>\n<li>传输层的UDP对网络层送过来的报文直接去除UDP首部，然后送给上面的应用层。 </li>\n<li>传输途中出现<strong>丢包</strong>，UDP 也不负责重发 </li>\n<li>当包的到达顺序出现<strong>乱序</strong>时，UDP没有纠正的功能</li>\n<li>出现<strong>网络拥堵</strong>的情况，UDP 也无法进行流量控制等避免网络拥塞行为</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/928e5d20-b393-11eb-ab90-d9ae814b240d.png\"></p>\n<h3 id=\"2-TCP\"><a href=\"#2-TCP\" class=\"headerlink\" title=\"2. TCP\"></a>2. TCP</h3><p>TCP（Transmission Control Protocol），传输控制协议，是一种<strong>可靠、面向字节流</strong>的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送  </p>\n<ul>\n<li>可以进行丢包时的<strong>重发</strong>控制，还可以对次序乱掉的分包进行顺序控制</li>\n<li><strong>拥塞控制</strong>：TCP会根据当前网络的拥塞状态来确定每个报文段的大小</li>\n<li>TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以<strong>控制通信流量的浪费</strong></li>\n<li>根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高<strong>可靠</strong>性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/a0010d40-b393-11eb-ab90-d9ae814b240d.png\">  </p>\n<h3 id=\"3-区别\"><a href=\"#3-区别\" class=\"headerlink\" title=\"3. 区别\"></a>3. 区别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>可靠性</td>\n<td>可靠</td>\n<td>不可靠</td>\n</tr>\n<tr>\n<td>连接性</td>\n<td>面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>报文</td>\n<td>面向字节流</td>\n<td>面向报文</td>\n</tr>\n<tr>\n<td>传输效率</td>\n<td>传输效率低</td>\n<td>传输效率高</td>\n</tr>\n<tr>\n<td>双工性</td>\n<td>全双工</td>\n<td>一对一，一对多，多对一，多对多</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>滑动窗口</td>\n<td>无</td>\n</tr>\n<tr>\n<td>拥塞控制</td>\n<td>慢开始、拥塞避免、快重传、快恢复</td>\n<td>无</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td>首部最小20字节，最大60字节</td>\n<td>首部开销小，仅8字节</td>\n</tr>\n</tbody></table>\n<ul>\n<li>TCP 提供<strong>可靠</strong>的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方</li>\n<li>TCP 是<strong>面向连接</strong>的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取</li>\n<li>TCP<strong>面向字节流</strong>，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</li>\n<li>TCP 只能<strong>点对点全双工通信</strong>。UDP 支持一对一、一对多、多对一和多对多的交互通信</li>\n<li>TCP 应用场景适用于对<strong>效率要求低</strong>，对<strong>准确性要求高</strong>或者要求有链接的场景（SMTP、HTTP、FTP等），而UDP 适用场景为对效率要求高，对准确性要求低的场景（DNS、TFTP、SNMP、NFS等）  </li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/b6cdd800-b393-11eb-ab90-d9ae814b240d.png\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"TCP和UDP\"><a href=\"#TCP和UDP\" class=\"headerlink\" title=\"TCP和UDP\"></a>TCP和UDP</h2><h3 id=\"1-UDP\"><a href=\"#1-UDP\" class=\"headerlink\" title=\"1. UDP\"></a>1. UDP</h3><p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的<strong>面向数据报</strong>的通信协议  </p>\n<ul>\n<li>传输层的UDP对应用层送过来的报文，不合并不拆分，直接加上UDP首部后送给下面的网络层</li>\n<li>传输层的UDP对网络层送过来的报文直接去除UDP首部，然后送给上面的应用层。 </li>\n<li>传输途中出现<strong>丢包</strong>，UDP 也不负责重发 </li>\n<li>当包的到达顺序出现<strong>乱序</strong>时，UDP没有纠正的功能</li>\n<li>出现<strong>网络拥堵</strong>的情况，UDP 也无法进行流量控制等避免网络拥塞行为</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/928e5d20-b393-11eb-ab90-d9ae814b240d.png\"></p>\n<h3 id=\"2-TCP\"><a href=\"#2-TCP\" class=\"headerlink\" title=\"2. TCP\"></a>2. TCP</h3><p>TCP（Transmission Control Protocol），传输控制协议，是一种<strong>可靠、面向字节流</strong>的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送  </p>\n<ul>\n<li>可以进行丢包时的<strong>重发</strong>控制，还可以对次序乱掉的分包进行顺序控制</li>\n<li><strong>拥塞控制</strong>：TCP会根据当前网络的拥塞状态来确定每个报文段的大小</li>\n<li>TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以<strong>控制通信流量的浪费</strong></li>\n<li>根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高<strong>可靠</strong>性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/a0010d40-b393-11eb-ab90-d9ae814b240d.png\">  </p>\n<h3 id=\"3-区别\"><a href=\"#3-区别\" class=\"headerlink\" title=\"3. 区别\"></a>3. 区别</h3><table>\n<thead>\n<tr>\n<th></th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>可靠性</td>\n<td>可靠</td>\n<td>不可靠</td>\n</tr>\n<tr>\n<td>连接性</td>\n<td>面向连接</td>\n<td>无连接</td>\n</tr>\n<tr>\n<td>报文</td>\n<td>面向字节流</td>\n<td>面向报文</td>\n</tr>\n<tr>\n<td>传输效率</td>\n<td>传输效率低</td>\n<td>传输效率高</td>\n</tr>\n<tr>\n<td>双工性</td>\n<td>全双工</td>\n<td>一对一，一对多，多对一，多对多</td>\n</tr>\n<tr>\n<td>流量控制</td>\n<td>滑动窗口</td>\n<td>无</td>\n</tr>\n<tr>\n<td>拥塞控制</td>\n<td>慢开始、拥塞避免、快重传、快恢复</td>\n<td>无</td>\n</tr>\n<tr>\n<td>首部开销</td>\n<td>首部最小20字节，最大60字节</td>\n<td>首部开销小，仅8字节</td>\n</tr>\n</tbody></table>\n<ul>\n<li>TCP 提供<strong>可靠</strong>的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方</li>\n<li>TCP 是<strong>面向连接</strong>的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取</li>\n<li>TCP<strong>面向字节流</strong>，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</li>\n<li>TCP 只能<strong>点对点全双工通信</strong>。UDP 支持一对一、一对多、多对一和多对多的交互通信</li>\n<li>TCP 应用场景适用于对<strong>效率要求低</strong>，对<strong>准确性要求高</strong>或者要求有链接的场景（SMTP、HTTP、FTP等），而UDP 适用场景为对效率要求高，对准确性要求低的场景（DNS、TFTP、SNMP、NFS等）  </li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/b6cdd800-b393-11eb-ab90-d9ae814b240d.png\"></p>\n"},{"title":"http1.0,1.1,2.0的区别","date":"2022-03-05T16:00:00.000Z","sidebar":"auto","_content":"---\n\n## http1.0,1.1,2.0的区别\n\n### 1. http1.0\nHTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接\n\n### 2. http1.1\n在HTTP1.1中，默认支持**长连接**（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。  \n客户端可以**同时发送多个请求**，但服务器必须按照接受到客户端请求的**先后顺序**依次回送响应结果。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。\n\n\n### 3. http2.0\n新特性：\n- 多路复用  \n  HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且**不用按照顺序一一对应**，这样就避免了”队头堵塞”\n- 二进制分帧  \n  HTTP/2 采用**二进制格式的帧**来传输数据，而非 HTTP 1.x的文本格式，帧解析起来更高效\n- 首部压缩  \n  例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销\n  ![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/3c536740-b93b-11eb-ab90-d9ae814b240d.png)\n- 服务器推送  \n  HTTP2引入服务器推送，允许服务端推送客户端未请求的资源给客户端 \n\n  ### 4.http3.0\n  HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。\n\n","source":"_posts/Computer/03.md","raw":"---\ntitle: http1.0,1.1,2.0的区别\ndate: 2022-03-06\ncategories:\n - 计算机网络笔记\ntags:\n - Computer\nsidebar: 'auto'\n---\n---\n\n## http1.0,1.1,2.0的区别\n\n### 1. http1.0\nHTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接\n\n### 2. http1.1\n在HTTP1.1中，默认支持**长连接**（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。  \n客户端可以**同时发送多个请求**，但服务器必须按照接受到客户端请求的**先后顺序**依次回送响应结果。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。\n\n\n### 3. http2.0\n新特性：\n- 多路复用  \n  HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且**不用按照顺序一一对应**，这样就避免了”队头堵塞”\n- 二进制分帧  \n  HTTP/2 采用**二进制格式的帧**来传输数据，而非 HTTP 1.x的文本格式，帧解析起来更高效\n- 首部压缩  \n  例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销\n  ![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/3c536740-b93b-11eb-ab90-d9ae814b240d.png)\n- 服务器推送  \n  HTTP2引入服务器推送，允许服务端推送客户端未请求的资源给客户端 \n\n  ### 4.http3.0\n  HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。\n\n","slug":"Computer/03","published":1,"updated":"2022-03-23T10:48:57.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8fw0007d63ucjdk0hab","content":"<hr>\n<h2 id=\"http1-0-1-1-2-0的区别\"><a href=\"#http1-0-1-1-2-0的区别\" class=\"headerlink\" title=\"http1.0,1.1,2.0的区别\"></a>http1.0,1.1,2.0的区别</h2><h3 id=\"1-http1-0\"><a href=\"#1-http1-0\" class=\"headerlink\" title=\"1. http1.0\"></a>1. http1.0</h3><p>HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接</p>\n<h3 id=\"2-http1-1\"><a href=\"#2-http1-1\" class=\"headerlink\" title=\"2. http1.1\"></a>2. http1.1</h3><p>在HTTP1.1中，默认支持<strong>长连接</strong>（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。<br>客户端可以<strong>同时发送多个请求</strong>，但服务器必须按照接受到客户端请求的<strong>先后顺序</strong>依次回送响应结果。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。</p>\n<h3 id=\"3-http2-0\"><a href=\"#3-http2-0\" class=\"headerlink\" title=\"3. http2.0\"></a>3. http2.0</h3><p>新特性：</p>\n<ul>\n<li><p>多路复用<br>HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且<strong>不用按照顺序一一对应</strong>，这样就避免了”队头堵塞”</p>\n</li>\n<li><p>二进制分帧<br>HTTP/2 采用<strong>二进制格式的帧</strong>来传输数据，而非 HTTP 1.x的文本格式，帧解析起来更高效</p>\n</li>\n<li><p>首部压缩<br>例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销<br><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/3c536740-b93b-11eb-ab90-d9ae814b240d.png\"></p>\n</li>\n<li><p>服务器推送<br>HTTP2引入服务器推送，允许服务端推送客户端未请求的资源给客户端 </p>\n<h3 id=\"4-http3-0\"><a href=\"#4-http3-0\" class=\"headerlink\" title=\"4.http3.0\"></a>4.http3.0</h3><p>HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"http1-0-1-1-2-0的区别\"><a href=\"#http1-0-1-1-2-0的区别\" class=\"headerlink\" title=\"http1.0,1.1,2.0的区别\"></a>http1.0,1.1,2.0的区别</h2><h3 id=\"1-http1-0\"><a href=\"#1-http1-0\" class=\"headerlink\" title=\"1. http1.0\"></a>1. http1.0</h3><p>HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接</p>\n<h3 id=\"2-http1-1\"><a href=\"#2-http1-1\" class=\"headerlink\" title=\"2. http1.1\"></a>2. http1.1</h3><p>在HTTP1.1中，默认支持<strong>长连接</strong>（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。<br>客户端可以<strong>同时发送多个请求</strong>，但服务器必须按照接受到客户端请求的<strong>先后顺序</strong>依次回送响应结果。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。</p>\n<h3 id=\"3-http2-0\"><a href=\"#3-http2-0\" class=\"headerlink\" title=\"3. http2.0\"></a>3. http2.0</h3><p>新特性：</p>\n<ul>\n<li><p>多路复用<br>HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且<strong>不用按照顺序一一对应</strong>，这样就避免了”队头堵塞”</p>\n</li>\n<li><p>二进制分帧<br>HTTP/2 采用<strong>二进制格式的帧</strong>来传输数据，而非 HTTP 1.x的文本格式，帧解析起来更高效</p>\n</li>\n<li><p>首部压缩<br>例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销<br><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/3c536740-b93b-11eb-ab90-d9ae814b240d.png\"></p>\n</li>\n<li><p>服务器推送<br>HTTP2引入服务器推送，允许服务端推送客户端未请求的资源给客户端 </p>\n<h3 id=\"4-http3-0\"><a href=\"#4-http3-0\" class=\"headerlink\" title=\"4.http3.0\"></a>4.http3.0</h3><p>HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。</p>\n</li>\n</ul>\n"},{"title":"http和https","date":"2022-03-07T16:00:00.000Z","sidebar":"auto","_content":"---\n## http和https\n### 1. http\nHTTP (HyperText Transfer Protocol)，即**超文本传输协议**，是实现网络通信的一种规范\n\n- 传输的数据不是计算机底层二进制包，而是完整有意义、能被上层应用识别的数据，如HTML 文件, 图片文件等超文本。（传输请求方法和路径）\n- 数据在A和B之间传输，之间可存在很多第三方，如：A<=>X<=>Y<=>Z<=>B\n- 实际应用中，http被用于浏览器和服务器之间传递信息（**以明文方式传递信息**，不提供任何方式的数据加密）\n\n特点：协议简单通信快速、数据类型多样、无连接请求（连接-一个请求-断开）、无状态请求  \n\n### 2. https\nhttps即http运行在安全的SSL/TLS协议上，即HTTPS = HTTP + SSL/TLS。通过 SSL证书来**验证服务器的身份**，并为浏览器和服务器之间的通信进行加密。  \nhttps特点：  \n![信息加密、完整性校验、身份验证](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png)\n![image](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png)\nhttps流程：  \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/0e409fc0-b20c-11eb-85f6-6fac77c0c9b3.png)  \n1. 客户端通过URL访问服务器并建立SSL连接  \n2. 服务端接受客户端的请求后，将自己的证书（包含**公钥**）传送给客户端\n3. 客户端和服务器协商SSL连接的安全等级，即信息加密的等级\n4. 客户端建立**会话密钥/对称密钥**，然后利用网站的**公钥加密**会话密钥/对称密钥，并发送给服务器\n5. 服务器利用自己的**私钥解密**出会话密钥/对称密钥\n6. 服务器可以利用会话密钥/对称密钥与客户端进行通信了\n\n### 3. 总结\n- HTTPS是HTTP协议的**安全**版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全\n- HTTP 和 HTTPS 使用连接方式不同，默认**端口**也不一样，HTTP是80，HTTPS是443\n- HTTPS 由于需要设计加密以及多次握手，**性能**方面不如 HTTP\n- HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书**费用**越高  \n\n### 4. 补充\n#### 对称加密：采用协商的密钥对数据加密，密钥不安全  \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png)  \n#### 非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。  \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png)  \n#### 混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。   \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png)  \n\n#### 摘要算法：验证信息的完整性，保障传递的**信息**未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）  \n![摘要算法图](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/023790e0-b300-11eb-ab90-d9ae814b240d.png)  \n#### 数字签名：身份验证，**确认消息的发送者身份**，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）  \n![数字签名图](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png)  \n\n#### CA验证机构：**确认公钥的发送者身份**，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）  \n流程如下：  \n- 服务器的运营人员向数字证书认证机构提出公开密钥的申请\n- 数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名\n然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书（密钥+数字签名为公钥证书）后绑定在一起\n- 服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行非对称加密方式通信\n- 接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，验证通过则证明公开密钥是数字证书认证机构真实有效、值得姓赖的。\n","source":"_posts/Computer/05.md","raw":"---\ntitle: http和https\ndate: 2022-03-08\ncategories:\n - 计算机网络笔记\ntags:\n - Computer\nsidebar: 'auto'\n---\n---\n## http和https\n### 1. http\nHTTP (HyperText Transfer Protocol)，即**超文本传输协议**，是实现网络通信的一种规范\n\n- 传输的数据不是计算机底层二进制包，而是完整有意义、能被上层应用识别的数据，如HTML 文件, 图片文件等超文本。（传输请求方法和路径）\n- 数据在A和B之间传输，之间可存在很多第三方，如：A<=>X<=>Y<=>Z<=>B\n- 实际应用中，http被用于浏览器和服务器之间传递信息（**以明文方式传递信息**，不提供任何方式的数据加密）\n\n特点：协议简单通信快速、数据类型多样、无连接请求（连接-一个请求-断开）、无状态请求  \n\n### 2. https\nhttps即http运行在安全的SSL/TLS协议上，即HTTPS = HTTP + SSL/TLS。通过 SSL证书来**验证服务器的身份**，并为浏览器和服务器之间的通信进行加密。  \nhttps特点：  \n![信息加密、完整性校验、身份验证](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png)\n![image](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png)\nhttps流程：  \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/0e409fc0-b20c-11eb-85f6-6fac77c0c9b3.png)  \n1. 客户端通过URL访问服务器并建立SSL连接  \n2. 服务端接受客户端的请求后，将自己的证书（包含**公钥**）传送给客户端\n3. 客户端和服务器协商SSL连接的安全等级，即信息加密的等级\n4. 客户端建立**会话密钥/对称密钥**，然后利用网站的**公钥加密**会话密钥/对称密钥，并发送给服务器\n5. 服务器利用自己的**私钥解密**出会话密钥/对称密钥\n6. 服务器可以利用会话密钥/对称密钥与客户端进行通信了\n\n### 3. 总结\n- HTTPS是HTTP协议的**安全**版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全\n- HTTP 和 HTTPS 使用连接方式不同，默认**端口**也不一样，HTTP是80，HTTPS是443\n- HTTPS 由于需要设计加密以及多次握手，**性能**方面不如 HTTP\n- HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书**费用**越高  \n\n### 4. 补充\n#### 对称加密：采用协商的密钥对数据加密，密钥不安全  \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png)  \n#### 非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。  \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png)  \n#### 混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。   \n![](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png)  \n\n#### 摘要算法：验证信息的完整性，保障传递的**信息**未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）  \n![摘要算法图](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/023790e0-b300-11eb-ab90-d9ae814b240d.png)  \n#### 数字签名：身份验证，**确认消息的发送者身份**，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）  \n![数字签名图](https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png)  \n\n#### CA验证机构：**确认公钥的发送者身份**，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）  \n流程如下：  \n- 服务器的运营人员向数字证书认证机构提出公开密钥的申请\n- 数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名\n然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书（密钥+数字签名为公钥证书）后绑定在一起\n- 服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行非对称加密方式通信\n- 接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，验证通过则证明公开密钥是数字证书认证机构真实有效、值得姓赖的。\n","slug":"Computer/05","published":1,"updated":"2022-03-23T10:49:05.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8fz0009d63uai7p9e8w","content":"<hr>\n<h2 id=\"http和https\"><a href=\"#http和https\" class=\"headerlink\" title=\"http和https\"></a>http和https</h2><h3 id=\"1-http\"><a href=\"#1-http\" class=\"headerlink\" title=\"1. http\"></a>1. http</h3><p>HTTP (HyperText Transfer Protocol)，即<strong>超文本传输协议</strong>，是实现网络通信的一种规范</p>\n<ul>\n<li>传输的数据不是计算机底层二进制包，而是完整有意义、能被上层应用识别的数据，如HTML 文件, 图片文件等超文本。（传输请求方法和路径）</li>\n<li>数据在A和B之间传输，之间可存在很多第三方，如：A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B</li>\n<li>实际应用中，http被用于浏览器和服务器之间传递信息（<strong>以明文方式传递信息</strong>，不提供任何方式的数据加密）</li>\n</ul>\n<p>特点：协议简单通信快速、数据类型多样、无连接请求（连接-一个请求-断开）、无状态请求  </p>\n<h3 id=\"2-https\"><a href=\"#2-https\" class=\"headerlink\" title=\"2. https\"></a>2. https</h3><p>https即http运行在安全的SSL/TLS协议上，即HTTPS = HTTP + SSL/TLS。通过 SSL证书来<strong>验证服务器的身份</strong>，并为浏览器和服务器之间的通信进行加密。<br>https特点：<br><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png\" alt=\"信息加密、完整性校验、身份验证\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png\" alt=\"image\"><br>https流程：<br><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/0e409fc0-b20c-11eb-85f6-6fac77c0c9b3.png\">  </p>\n<ol>\n<li>客户端通过URL访问服务器并建立SSL连接  </li>\n<li>服务端接受客户端的请求后，将自己的证书（包含<strong>公钥</strong>）传送给客户端</li>\n<li>客户端和服务器协商SSL连接的安全等级，即信息加密的等级</li>\n<li>客户端建立<strong>会话密钥/对称密钥</strong>，然后利用网站的<strong>公钥加密</strong>会话密钥/对称密钥，并发送给服务器</li>\n<li>服务器利用自己的<strong>私钥解密</strong>出会话密钥/对称密钥</li>\n<li>服务器可以利用会话密钥/对称密钥与客户端进行通信了</li>\n</ol>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li>HTTPS是HTTP协议的<strong>安全</strong>版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全</li>\n<li>HTTP 和 HTTPS 使用连接方式不同，默认<strong>端口</strong>也不一样，HTTP是80，HTTPS是443</li>\n<li>HTTPS 由于需要设计加密以及多次握手，<strong>性能</strong>方面不如 HTTP</li>\n<li>HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书<strong>费用</strong>越高  </li>\n</ul>\n<h3 id=\"4-补充\"><a href=\"#4-补充\" class=\"headerlink\" title=\"4. 补充\"></a>4. 补充</h3><h4 id=\"对称加密：采用协商的密钥对数据加密，密钥不安全\"><a href=\"#对称加密：采用协商的密钥对数据加密，密钥不安全\" class=\"headerlink\" title=\"对称加密：采用协商的密钥对数据加密，密钥不安全\"></a>对称加密：采用协商的密钥对数据加密，密钥不安全</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png\">  </p>\n<h4 id=\"非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。\"><a href=\"#非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。\" class=\"headerlink\" title=\"非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。\"></a>非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png\">  </p>\n<h4 id=\"混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。\"><a href=\"#混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。\" class=\"headerlink\" title=\"混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。\"></a>混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png\">  </p>\n<h4 id=\"摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）\"><a href=\"#摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）\" class=\"headerlink\" title=\"摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）\"></a>摘要算法：验证信息的完整性，保障传递的<strong>信息</strong>未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/023790e0-b300-11eb-ab90-d9ae814b240d.png\" alt=\"摘要算法图\">  </p>\n<h4 id=\"数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）\"><a href=\"#数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）\" class=\"headerlink\" title=\"数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）\"></a>数字签名：身份验证，<strong>确认消息的发送者身份</strong>，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png\" alt=\"数字签名图\">  </p>\n<h4 id=\"CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名-公钥）\"><a href=\"#CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名-公钥）\" class=\"headerlink\" title=\"CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）\"></a>CA验证机构：<strong>确认公钥的发送者身份</strong>，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）</h4><p>流程如下：  </p>\n<ul>\n<li>服务器的运营人员向数字证书认证机构提出公开密钥的申请</li>\n<li>数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名<br>然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书（密钥+数字签名为公钥证书）后绑定在一起</li>\n<li>服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行非对称加密方式通信</li>\n<li>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，验证通过则证明公开密钥是数字证书认证机构真实有效、值得姓赖的。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"http和https\"><a href=\"#http和https\" class=\"headerlink\" title=\"http和https\"></a>http和https</h2><h3 id=\"1-http\"><a href=\"#1-http\" class=\"headerlink\" title=\"1. http\"></a>1. http</h3><p>HTTP (HyperText Transfer Protocol)，即<strong>超文本传输协议</strong>，是实现网络通信的一种规范</p>\n<ul>\n<li>传输的数据不是计算机底层二进制包，而是完整有意义、能被上层应用识别的数据，如HTML 文件, 图片文件等超文本。（传输请求方法和路径）</li>\n<li>数据在A和B之间传输，之间可存在很多第三方，如：A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B</li>\n<li>实际应用中，http被用于浏览器和服务器之间传递信息（<strong>以明文方式传递信息</strong>，不提供任何方式的数据加密）</li>\n</ul>\n<p>特点：协议简单通信快速、数据类型多样、无连接请求（连接-一个请求-断开）、无状态请求  </p>\n<h3 id=\"2-https\"><a href=\"#2-https\" class=\"headerlink\" title=\"2. https\"></a>2. https</h3><p>https即http运行在安全的SSL/TLS协议上，即HTTPS = HTTP + SSL/TLS。通过 SSL证书来<strong>验证服务器的身份</strong>，并为浏览器和服务器之间的通信进行加密。<br>https特点：<br><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png\" alt=\"信息加密、完整性校验、身份验证\"><br><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png\" alt=\"image\"><br>https流程：<br><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/0e409fc0-b20c-11eb-85f6-6fac77c0c9b3.png\">  </p>\n<ol>\n<li>客户端通过URL访问服务器并建立SSL连接  </li>\n<li>服务端接受客户端的请求后，将自己的证书（包含<strong>公钥</strong>）传送给客户端</li>\n<li>客户端和服务器协商SSL连接的安全等级，即信息加密的等级</li>\n<li>客户端建立<strong>会话密钥/对称密钥</strong>，然后利用网站的<strong>公钥加密</strong>会话密钥/对称密钥，并发送给服务器</li>\n<li>服务器利用自己的<strong>私钥解密</strong>出会话密钥/对称密钥</li>\n<li>服务器可以利用会话密钥/对称密钥与客户端进行通信了</li>\n</ol>\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3. 总结\"></a>3. 总结</h3><ul>\n<li>HTTPS是HTTP协议的<strong>安全</strong>版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全</li>\n<li>HTTP 和 HTTPS 使用连接方式不同，默认<strong>端口</strong>也不一样，HTTP是80，HTTPS是443</li>\n<li>HTTPS 由于需要设计加密以及多次握手，<strong>性能</strong>方面不如 HTTP</li>\n<li>HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书<strong>费用</strong>越高  </li>\n</ul>\n<h3 id=\"4-补充\"><a href=\"#4-补充\" class=\"headerlink\" title=\"4. 补充\"></a>4. 补充</h3><h4 id=\"对称加密：采用协商的密钥对数据加密，密钥不安全\"><a href=\"#对称加密：采用协商的密钥对数据加密，密钥不安全\" class=\"headerlink\" title=\"对称加密：采用协商的密钥对数据加密，密钥不安全\"></a>对称加密：采用协商的密钥对数据加密，密钥不安全</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png\">  </p>\n<h4 id=\"非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。\"><a href=\"#非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。\" class=\"headerlink\" title=\"非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。\"></a>非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png\">  </p>\n<h4 id=\"混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。\"><a href=\"#混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。\" class=\"headerlink\" title=\"混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。\"></a>混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png\">  </p>\n<h4 id=\"摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）\"><a href=\"#摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）\" class=\"headerlink\" title=\"摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）\"></a>摘要算法：验证信息的完整性，保障传递的<strong>信息</strong>未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/023790e0-b300-11eb-ab90-d9ae814b240d.png\" alt=\"摘要算法图\">  </p>\n<h4 id=\"数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）\"><a href=\"#数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）\" class=\"headerlink\" title=\"数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）\"></a>数字签名：身份验证，<strong>确认消息的发送者身份</strong>，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）</h4><p><img src=\"https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png\" alt=\"数字签名图\">  </p>\n<h4 id=\"CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名-公钥）\"><a href=\"#CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名-公钥）\" class=\"headerlink\" title=\"CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）\"></a>CA验证机构：<strong>确认公钥的发送者身份</strong>，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）</h4><p>流程如下：  </p>\n<ul>\n<li>服务器的运营人员向数字证书认证机构提出公开密钥的申请</li>\n<li>数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名<br>然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书（密钥+数字签名为公钥证书）后绑定在一起</li>\n<li>服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行非对称加密方式通信</li>\n<li>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，验证通过则证明公开密钥是数字证书认证机构真实有效、值得姓赖的。</li>\n</ul>\n"},{"title":"http状态码","date":"2022-03-08T16:00:00.000Z","sidebar":"auto","_content":"---\n## http状态码\n- 1 表示信息\n- 2 表示成功\n- 3 表示重定向\n- 4 表示请求错误\n- 5 表示服务器错误\n\n### 1XX\n代表请求已被接受，需要继续处理。\n- 100（客户端继续发送请求，这是临时响应）：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输\n\n### 2XX\n代表请求已成功被服务器接收、理解、并接受\n- 206（部分内容）：服务器成功处理了部分请求\n\n### 3XX（重点）\n- 301（永久重定向缓存）：新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名\n- 302（临时重定向不会缓存）： 常用于未登陆的用户访问用户中心重定向到登录页面\n- 304（协商缓存）：告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分\n\n### 4XX\n- 400（参数错误）：请求无法被服务器识别\n- 401（未授权）：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n- 403（禁止）：告诉客户端禁止访问该站点或者资源\n- 404（未找到）： 服务器找不到请求的网页\n\n### 5XX\n- 503（服务不可用）：服务器目前无法使用（由于超载或停机维护）\n- 504（网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求","source":"_posts/Computer/06.md","raw":"---\ntitle: http状态码\ndate: 2022-03-09\ncategories:\n - 计算机网络笔记\ntags:\n - Computer\nsidebar: 'auto'\n---\n---\n## http状态码\n- 1 表示信息\n- 2 表示成功\n- 3 表示重定向\n- 4 表示请求错误\n- 5 表示服务器错误\n\n### 1XX\n代表请求已被接受，需要继续处理。\n- 100（客户端继续发送请求，这是临时响应）：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输\n\n### 2XX\n代表请求已成功被服务器接收、理解、并接受\n- 206（部分内容）：服务器成功处理了部分请求\n\n### 3XX（重点）\n- 301（永久重定向缓存）：新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名\n- 302（临时重定向不会缓存）： 常用于未登陆的用户访问用户中心重定向到登录页面\n- 304（协商缓存）：告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分\n\n### 4XX\n- 400（参数错误）：请求无法被服务器识别\n- 401（未授权）：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\n- 403（禁止）：告诉客户端禁止访问该站点或者资源\n- 404（未找到）： 服务器找不到请求的网页\n\n### 5XX\n- 503（服务不可用）：服务器目前无法使用（由于超载或停机维护）\n- 504（网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求","slug":"Computer/06","published":1,"updated":"2022-03-23T10:49:09.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8g0000ad63uh5xxerpu","content":"<hr>\n<h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><ul>\n<li>1 表示信息</li>\n<li>2 表示成功</li>\n<li>3 表示重定向</li>\n<li>4 表示请求错误</li>\n<li>5 表示服务器错误</li>\n</ul>\n<h3 id=\"1XX\"><a href=\"#1XX\" class=\"headerlink\" title=\"1XX\"></a>1XX</h3><p>代表请求已被接受，需要继续处理。</p>\n<ul>\n<li>100（客户端继续发送请求，这是临时响应）：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输</li>\n</ul>\n<h3 id=\"2XX\"><a href=\"#2XX\" class=\"headerlink\" title=\"2XX\"></a>2XX</h3><p>代表请求已成功被服务器接收、理解、并接受</p>\n<ul>\n<li>206（部分内容）：服务器成功处理了部分请求</li>\n</ul>\n<h3 id=\"3XX（重点）\"><a href=\"#3XX（重点）\" class=\"headerlink\" title=\"3XX（重点）\"></a>3XX（重点）</h3><ul>\n<li>301（永久重定向缓存）：新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名</li>\n<li>302（临时重定向不会缓存）： 常用于未登陆的用户访问用户中心重定向到登录页面</li>\n<li>304（协商缓存）：告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li>\n</ul>\n<h3 id=\"4XX\"><a href=\"#4XX\" class=\"headerlink\" title=\"4XX\"></a>4XX</h3><ul>\n<li>400（参数错误）：请求无法被服务器识别</li>\n<li>401（未授权）：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li>\n<li>403（禁止）：告诉客户端禁止访问该站点或者资源</li>\n<li>404（未找到）： 服务器找不到请求的网页</li>\n</ul>\n<h3 id=\"5XX\"><a href=\"#5XX\" class=\"headerlink\" title=\"5XX\"></a>5XX</h3><ul>\n<li>503（服务不可用）：服务器目前无法使用（由于超载或停机维护）</li>\n<li>504（网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><ul>\n<li>1 表示信息</li>\n<li>2 表示成功</li>\n<li>3 表示重定向</li>\n<li>4 表示请求错误</li>\n<li>5 表示服务器错误</li>\n</ul>\n<h3 id=\"1XX\"><a href=\"#1XX\" class=\"headerlink\" title=\"1XX\"></a>1XX</h3><p>代表请求已被接受，需要继续处理。</p>\n<ul>\n<li>100（客户端继续发送请求，这是临时响应）：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输</li>\n</ul>\n<h3 id=\"2XX\"><a href=\"#2XX\" class=\"headerlink\" title=\"2XX\"></a>2XX</h3><p>代表请求已成功被服务器接收、理解、并接受</p>\n<ul>\n<li>206（部分内容）：服务器成功处理了部分请求</li>\n</ul>\n<h3 id=\"3XX（重点）\"><a href=\"#3XX（重点）\" class=\"headerlink\" title=\"3XX（重点）\"></a>3XX（重点）</h3><ul>\n<li>301（永久重定向缓存）：新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名</li>\n<li>302（临时重定向不会缓存）： 常用于未登陆的用户访问用户中心重定向到登录页面</li>\n<li>304（协商缓存）：告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li>\n</ul>\n<h3 id=\"4XX\"><a href=\"#4XX\" class=\"headerlink\" title=\"4XX\"></a>4XX</h3><ul>\n<li>400（参数错误）：请求无法被服务器识别</li>\n<li>401（未授权）：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li>\n<li>403（禁止）：告诉客户端禁止访问该站点或者资源</li>\n<li>404（未找到）： 服务器找不到请求的网页</li>\n</ul>\n<h3 id=\"5XX\"><a href=\"#5XX\" class=\"headerlink\" title=\"5XX\"></a>5XX</h3><ul>\n<li>503（服务不可用）：服务器目前无法使用（由于超载或停机维护）</li>\n<li>504（网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求</li>\n</ul>\n"},{"title":"数组的常用方法","date":"2022-03-03T16:00:00.000Z","sidebar":"auto","_content":"---\n## 数组的常用方法\n### 0. 属性：Array.length\n### 1. 操作方法\n#### 增删改\n- `unshift(element1, ..., elementN)`:数组**开头添加**数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**\n- `shift()`:数组**开头删除**第一个元素，并返回该元素的值。**(该方法修改原有数组)。**\n\n\n- `push(element1, ..., elementN)`:数组**结尾添加**数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**\n- `pop()`: 数组**结尾删除**最后一个元素，并返回该元素的值。**(该方法修改原有数组)。**\n\n- `splice(start[, deleteCount[, item1[, item2[, ...]]]])`:从**指定位置删除、添加**数个元素，并以数组形式返回被修改的内容。**(该方法修改原有数组)。**\n\n```js\n//从索引 2 的位置开始删除 0 个元素，插入“drum” 和 \"guitar\"\nvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(2, 0, 'drum', 'guitar');\n\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"guitar\", \"mandarin\", \"sturgeon\"]\n// 被删除的元素: [], 没有元素被删除\n```\n\n- `slice([begin[, end]])`:返回现有数组的一部分(浅拷贝)，这一对象元素包括 begin，不包括end。(原始数组不会被改变)。\n\n```js\n//返回现有数组的一部分\nvar fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\nvar citrus = fruits.slice(1, 3);\n\n// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']\n// citrus contains ['Orange','Lemon']\n```\n\n- `concat(value1[, value2[, ...[, valueN]]])`:用于合并两个或多个数组，返回一个新数组。(原始数组不会被改变)。\n\n```js\nvar num1 = [1, 2, 3],\n    num2 = [4, 5, 6],\n    num3 = [7, 8, 9];\n\nvar nums = num1.concat(num2, num3);\n\nconsole.log(nums);\n// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n#### 查\n- `indexOf(searchElement[, fromIndex])`:返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。\n- `includes(valueToFind[, fromIndex])`:判断一个数组是否包含一个指定的值,返回布尔值\n- `findIndex(callback[, thisArg])`:返回数组中满足提供的测试函数的**第一个元素的索引**。若没有找到对应元素则返回-1。\n- `find(callback[, thisArg])`:返回数组中满足提供的测试函数的**第一个元素的值**。否则返回 undefined。(callback函数带有3个参数：当前元素的值、当前元素的索引，以及数组本身。)\n\n```js\n//用对象的属性查找数组里的对象\nvar inventory = [\n    {name: 'apples', quantity: 2},\n    {name: 'bananas', quantity: 0},\n    {name: 'cherries', quantity: 5}\n];\n\nfunction findCherries(fruit) {\n    return fruit.name === 'cherries';\n}\n\nconsole.log(inventory.find(findCherries)); // { name: 'cherries', quantity: 5 }\n```\n\n### 2. 排序方法\n\n- `reverse()`:将数组中元素的位置颠倒，并返回该数组。**(该方法修改原有数组)。**\n\n- `sort([compareFunction])`:接收一个比较函数，对数组的元素进行排序，并返回该数组。**(该方法修改原有数组)。**\n```js\nfunction compare(value1, value2) {\n    if (value1 < value2) {\n        //返回值小于0不交换,排序为value1,value2\n        return -1;\n    } else if (value1 > value2) {\n        //返回值大于0交换,排序为value2,value1\n        return 1;\n    } else {\n        //相等,不交换\n        return 0;\n    }\n}\nlet values = [0, 1, 5, 10, 15];\nvalues.sort(compare);\nalert(values); // 0,1,5,10,15\n```\n\n### 3. 转换方法\n- `join([separator])`:将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。\n```js\nconst elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// expected output: \"Fire,Air,Water\"\n\nconsole.log(elements.join(''));\n// expected output: \"FireAirWater\"\n\nconsole.log(elements.join('-'));\n// expected output: \"Fire-Air-Water\"\n```\n\n\n### 4. 迭代方法(用forEach（用于操作原数组）和reduce（用于生成新数组）)\n- `some(callback(element[, index[, array]])[, thisArg])`:测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回一个布尔值。\n```js\n//是否有元素大于 10\nfunction isBiggerThan10(element, index, array) {\n  return element > 10;\n}\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n```\n- `every(callback(element[, index[, array]])[, thisArg])`:测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n\n```js\n//所有元素是否都大于 10\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\n[12, 5, 8, 130, 44].every(isBigEnough);   // false\n[12, 54, 18, 130, 44].every(isBigEnough); // true\n```\n- `forEach(callback(currentValue [, index [, array]])[, thisArg])`:对数组的每个元素执行一次给定的函数。**callback内无返回值**，调用forEach方法后返回undefined。**(该方法修改原有数组)**\n```js\n//将 for 循环转换为 forEach\nconst items = ['item1', 'item2', 'item3'];\nconst copy = [];\n\n// before\nfor (let i=0; i<items.length; i++) {\n  copy.push(items[i]);\n}\n\n// after\nitems.forEach(function(item){\n  copy.push(item);\n});\n```\n\n```js\nlet arr = [12, 4, 6, 89, 2]\n//参数index\narr.forEach((item,index) => {\n    console.log(index+ ':' +item)\n})\n// 0:12\n// 1:4\n// 2:6\n// 3:89\n// 4:2\n```\n\n- `filter(callback(element[, index[, array]])[, thisArg])`:**返回一个新数组**, 其包含通过所提供函数实现的测试的所有元素（不喜欢用）\n```js\nfunction isBigEnough(element) {\n  return element >= 10;\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n- `map(callback(currentValue[, index[, array]]){ return element }[, thisArg]))`:**返回一个新数组**，其结果是该数组中的每个元素调用一次提供的函数后的返回值。\n\n```js\nvar numbers = [1, 4, 9];\nvar doubles = numbers.map(function(num) {\n  return num * 2;\n});\n\n// doubles数组的值为： [2, 8, 18]\n// numbers数组未被修改： [1, 4, 9]\n```\n\n\n- `reduce((previousValue, currentValue, currentIndex, array) => { /* ... */ }, initialValue)`:对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n\n```js\n[15, 16, 17, 18, 19].reduce( (previousValue, currentValue, currentIndex, array) => previousValue + currentValue, 10 )\n//95\n```\n\n```js\n//使用 .reduce() (一次循环)替换 .filter().map() (两次循环)\nconst numbers = [-5, 6, 2, 0];\n\nconst doubledPositiveNumbers = numbers.reduce((previousValue, currentValue) => {\n  if (currentValue > 0) {\n    const doubled = currentValue * 2;\n    previousValue.push(doubled);\n  }\n  return previousValue;\n}, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]\n\n```\n\n```js\n//计算数组中每个元素出现的次数\nlet names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\n\nlet countedNames = names.reduce(function (allNames, name) {\n  if (name in allNames) {\n    allNames[name]++\n  }\n  else {\n    allNames[name] = 1\n  }\n  return allNames\n}, {})\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n\n```js\n// 去重\nlet myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) {\n  if (previousValue.indexOf(currentValue) === -1) {\n    previousValue.push(currentValue)\n  }\n  return previousValue\n}, [])\n\nconsole.log(myArrayWithNoDuplicates)\n```\n\n### 5. 数组的扩展运算符\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n- **将数组转换为参数序列**\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n```\n\n- **复制数组**\n\n```javascript\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n```\n\n- **合并数组**\n\n如果想在数组内合并数组，可以这样：\n\n```javascript\nconst arr1 = ['two', 'three'];\nconst arr2 = ['one', ...arr1, 'four', 'five'];\n// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n```\n\n- **扩展运算符与解构赋值结合起来，用于生成数组**\n\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n```\n\n需要注意：**如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。**\n\n```javascript\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错\nconst [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n```\n\n- **将字符串转为真正的数组**\n\n```javascript\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n- **任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组**\n\n比较常见的应用是可以将类数组转为数组：\n\n```javascript\n// arguments对象：一个对应于传递给函数的参数的类数组对象arguments[0]，arguments[1]，arguments[2]\nfunction foo() {\n  const args = [...arguments];\n}\n```\n\n用于替换`es5`中的`Array.prototype.slice.call(arguments)`写法。\n\n- **使用**`Math`**函数获取数组中特定的值**\n\n```javascript\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n```\n\n### 6. 数组构造函数新增方法\n- `Array.from(arrayLike[, mapFn[, thisArg]])`:对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n```js\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n- `Array.of(element0[, element1[, ...[, elementN]]])`:创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。\n```js\nArray.of(7);       // [7]\nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]\n```\n\n\n### 7. 判断数组的方法\n- 通过`Object.prototype.toString.call()`做判断\n\n```javascript\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n```\n\n- 通过原型链做判断\n\n```javascript\nobj.__proto__ === Array.prototype;\n```\n\n- 通过ES6的`Array.isArray()`做判断\n\n```JavaScript\nArray.isArray(obj);\n```\n\n- 通过instanceof做判断\n\n```javascript\nobj instanceof Array\n```\n\n- 通过constructor做判断\n```JavaScript\n(obj).constructor === Array \n```\n\n- 通过`Array.prototype.isPrototypeOf`\n\n```javascript\nArray.prototype.isPrototypeOf(obj)\n```\n\n### 8. 数组去重\n#### 循环遍历+indexOf()\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique1(arr){\n\tlet result = [arr[0]];\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tlet item = arr[i];\n        //待添加的元素是否存在于arr中\n\t\tif(result.indexOf(item) == -1){\n\t\t\tresult.push(item);\n\t\t}\n\t}\n\treturn result;\n}\n\nconsole.log(unique1(arr));\n```\n\n```js\nlet myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) {\n  if (previousValue.indexOf(currentValue) === -1) {\n    previousValue.push(currentValue)\n  }\n  return previousValue\n}, [])\n\nconsole.log(myArrayWithNoDuplicates)\n```\n\n#### Hash对象\n将数组所有的元素转变成对象的键名，利用对象键名的不可重复的特性来去重。\n\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique2(arr){\n\tlet result = [];\n\tlet obj ={};\n\n\tfor(let i =0;i<arr.length;i++){\n\t  let item = arr[i];\n\t  if(!obj[item]){\n\t    result.push(item);\n\t    obj[item] = 1;\n\t  }\n\t}\n\n\treturn result;\n}\nconsole.log(unique2(arr))\n```\n问题：’12’不在结果中。因为在键名中，String类型的’12’和Number类型的12对于Hash对象来说都是一样的。\n\n#### 排序比较\n利用数组原生的sort()方法，将数组先进行排序，排序后比较相邻两个元素的值。\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique3(arr) {\n    let result = [arr[0]];\n    arr = arr.sort();\n    for (let i = 1; i < arr.length; i++) {\n        let item = arr[i];\n        //待添加的元素是否与上一次添加的元素相同\n        if (item !== result[result.length - 1]) {\n            result.push(item)\n        }\n    }\n    return result;\n}\n\nconsole.log(unique3(arr))\n```\n问题：去重后的数组顺序发生了改变\n\n#### Set类型\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique4(arr){\n    return Array.from(new Set(arr));\n}\n\nconsole.log(unique4(arr));\n```\n\n\n","source":"_posts/JavaScript/01.md","raw":"---\ntitle: 数组的常用方法\ndate: 2022-03-04\ncategories:\n - JavaScript数据结构与算法笔记\ntags:\n - JavaScript\nsidebar: 'auto'\n---\n---\n## 数组的常用方法\n### 0. 属性：Array.length\n### 1. 操作方法\n#### 增删改\n- `unshift(element1, ..., elementN)`:数组**开头添加**数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**\n- `shift()`:数组**开头删除**第一个元素，并返回该元素的值。**(该方法修改原有数组)。**\n\n\n- `push(element1, ..., elementN)`:数组**结尾添加**数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**\n- `pop()`: 数组**结尾删除**最后一个元素，并返回该元素的值。**(该方法修改原有数组)。**\n\n- `splice(start[, deleteCount[, item1[, item2[, ...]]]])`:从**指定位置删除、添加**数个元素，并以数组形式返回被修改的内容。**(该方法修改原有数组)。**\n\n```js\n//从索引 2 的位置开始删除 0 个元素，插入“drum” 和 \"guitar\"\nvar myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\nvar removed = myFish.splice(2, 0, 'drum', 'guitar');\n\n// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"guitar\", \"mandarin\", \"sturgeon\"]\n// 被删除的元素: [], 没有元素被删除\n```\n\n- `slice([begin[, end]])`:返回现有数组的一部分(浅拷贝)，这一对象元素包括 begin，不包括end。(原始数组不会被改变)。\n\n```js\n//返回现有数组的一部分\nvar fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\nvar citrus = fruits.slice(1, 3);\n\n// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']\n// citrus contains ['Orange','Lemon']\n```\n\n- `concat(value1[, value2[, ...[, valueN]]])`:用于合并两个或多个数组，返回一个新数组。(原始数组不会被改变)。\n\n```js\nvar num1 = [1, 2, 3],\n    num2 = [4, 5, 6],\n    num3 = [7, 8, 9];\n\nvar nums = num1.concat(num2, num3);\n\nconsole.log(nums);\n// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n#### 查\n- `indexOf(searchElement[, fromIndex])`:返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。\n- `includes(valueToFind[, fromIndex])`:判断一个数组是否包含一个指定的值,返回布尔值\n- `findIndex(callback[, thisArg])`:返回数组中满足提供的测试函数的**第一个元素的索引**。若没有找到对应元素则返回-1。\n- `find(callback[, thisArg])`:返回数组中满足提供的测试函数的**第一个元素的值**。否则返回 undefined。(callback函数带有3个参数：当前元素的值、当前元素的索引，以及数组本身。)\n\n```js\n//用对象的属性查找数组里的对象\nvar inventory = [\n    {name: 'apples', quantity: 2},\n    {name: 'bananas', quantity: 0},\n    {name: 'cherries', quantity: 5}\n];\n\nfunction findCherries(fruit) {\n    return fruit.name === 'cherries';\n}\n\nconsole.log(inventory.find(findCherries)); // { name: 'cherries', quantity: 5 }\n```\n\n### 2. 排序方法\n\n- `reverse()`:将数组中元素的位置颠倒，并返回该数组。**(该方法修改原有数组)。**\n\n- `sort([compareFunction])`:接收一个比较函数，对数组的元素进行排序，并返回该数组。**(该方法修改原有数组)。**\n```js\nfunction compare(value1, value2) {\n    if (value1 < value2) {\n        //返回值小于0不交换,排序为value1,value2\n        return -1;\n    } else if (value1 > value2) {\n        //返回值大于0交换,排序为value2,value1\n        return 1;\n    } else {\n        //相等,不交换\n        return 0;\n    }\n}\nlet values = [0, 1, 5, 10, 15];\nvalues.sort(compare);\nalert(values); // 0,1,5,10,15\n```\n\n### 3. 转换方法\n- `join([separator])`:将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。\n```js\nconst elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// expected output: \"Fire,Air,Water\"\n\nconsole.log(elements.join(''));\n// expected output: \"FireAirWater\"\n\nconsole.log(elements.join('-'));\n// expected output: \"Fire-Air-Water\"\n```\n\n\n### 4. 迭代方法(用forEach（用于操作原数组）和reduce（用于生成新数组）)\n- `some(callback(element[, index[, array]])[, thisArg])`:测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回一个布尔值。\n```js\n//是否有元素大于 10\nfunction isBiggerThan10(element, index, array) {\n  return element > 10;\n}\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n```\n- `every(callback(element[, index[, array]])[, thisArg])`:测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。\n\n```js\n//所有元素是否都大于 10\nfunction isBigEnough(element, index, array) {\n  return element >= 10;\n}\n[12, 5, 8, 130, 44].every(isBigEnough);   // false\n[12, 54, 18, 130, 44].every(isBigEnough); // true\n```\n- `forEach(callback(currentValue [, index [, array]])[, thisArg])`:对数组的每个元素执行一次给定的函数。**callback内无返回值**，调用forEach方法后返回undefined。**(该方法修改原有数组)**\n```js\n//将 for 循环转换为 forEach\nconst items = ['item1', 'item2', 'item3'];\nconst copy = [];\n\n// before\nfor (let i=0; i<items.length; i++) {\n  copy.push(items[i]);\n}\n\n// after\nitems.forEach(function(item){\n  copy.push(item);\n});\n```\n\n```js\nlet arr = [12, 4, 6, 89, 2]\n//参数index\narr.forEach((item,index) => {\n    console.log(index+ ':' +item)\n})\n// 0:12\n// 1:4\n// 2:6\n// 3:89\n// 4:2\n```\n\n- `filter(callback(element[, index[, array]])[, thisArg])`:**返回一个新数组**, 其包含通过所提供函数实现的测试的所有元素（不喜欢用）\n```js\nfunction isBigEnough(element) {\n  return element >= 10;\n}\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n```\n\n- `map(callback(currentValue[, index[, array]]){ return element }[, thisArg]))`:**返回一个新数组**，其结果是该数组中的每个元素调用一次提供的函数后的返回值。\n\n```js\nvar numbers = [1, 4, 9];\nvar doubles = numbers.map(function(num) {\n  return num * 2;\n});\n\n// doubles数组的值为： [2, 8, 18]\n// numbers数组未被修改： [1, 4, 9]\n```\n\n\n- `reduce((previousValue, currentValue, currentIndex, array) => { /* ... */ }, initialValue)`:对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。\n\n```js\n[15, 16, 17, 18, 19].reduce( (previousValue, currentValue, currentIndex, array) => previousValue + currentValue, 10 )\n//95\n```\n\n```js\n//使用 .reduce() (一次循环)替换 .filter().map() (两次循环)\nconst numbers = [-5, 6, 2, 0];\n\nconst doubledPositiveNumbers = numbers.reduce((previousValue, currentValue) => {\n  if (currentValue > 0) {\n    const doubled = currentValue * 2;\n    previousValue.push(doubled);\n  }\n  return previousValue;\n}, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]\n\n```\n\n```js\n//计算数组中每个元素出现的次数\nlet names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\n\nlet countedNames = names.reduce(function (allNames, name) {\n  if (name in allNames) {\n    allNames[name]++\n  }\n  else {\n    allNames[name] = 1\n  }\n  return allNames\n}, {})\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n\n\n```js\n// 去重\nlet myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) {\n  if (previousValue.indexOf(currentValue) === -1) {\n    previousValue.push(currentValue)\n  }\n  return previousValue\n}, [])\n\nconsole.log(myArrayWithNoDuplicates)\n```\n\n### 5. 数组的扩展运算符\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n- **将数组转换为参数序列**\n\n```javascript\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n```\n\n- **复制数组**\n\n```javascript\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n```\n\n- **合并数组**\n\n如果想在数组内合并数组，可以这样：\n\n```javascript\nconst arr1 = ['two', 'three'];\nconst arr2 = ['one', ...arr1, 'four', 'five'];\n// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n```\n\n- **扩展运算符与解构赋值结合起来，用于生成数组**\n\n```javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n```\n\n需要注意：**如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。**\n\n```javascript\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错\nconst [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n```\n\n- **将字符串转为真正的数组**\n\n```javascript\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n- **任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组**\n\n比较常见的应用是可以将类数组转为数组：\n\n```javascript\n// arguments对象：一个对应于传递给函数的参数的类数组对象arguments[0]，arguments[1]，arguments[2]\nfunction foo() {\n  const args = [...arguments];\n}\n```\n\n用于替换`es5`中的`Array.prototype.slice.call(arguments)`写法。\n\n- **使用**`Math`**函数获取数组中特定的值**\n\n```javascript\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n```\n\n### 6. 数组构造函数新增方法\n- `Array.from(arrayLike[, mapFn[, thisArg]])`:对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。\n```js\nlet arrayLike = {\n    '0': 'a',\n    '1': 'b',\n    '2': 'c',\n    length: 3\n};\nlet arr2 = Array.from(arrayLike); // ['a', 'b', 'c']\n```\n- `Array.of(element0[, element1[, ...[, elementN]]])`:创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。\n```js\nArray.of(7);       // [7]\nArray.of(1, 2, 3); // [1, 2, 3]\n\nArray(7);          // [ , , , , , , ]\nArray(1, 2, 3);    // [1, 2, 3]\n```\n\n\n### 7. 判断数组的方法\n- 通过`Object.prototype.toString.call()`做判断\n\n```javascript\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n```\n\n- 通过原型链做判断\n\n```javascript\nobj.__proto__ === Array.prototype;\n```\n\n- 通过ES6的`Array.isArray()`做判断\n\n```JavaScript\nArray.isArray(obj);\n```\n\n- 通过instanceof做判断\n\n```javascript\nobj instanceof Array\n```\n\n- 通过constructor做判断\n```JavaScript\n(obj).constructor === Array \n```\n\n- 通过`Array.prototype.isPrototypeOf`\n\n```javascript\nArray.prototype.isPrototypeOf(obj)\n```\n\n### 8. 数组去重\n#### 循环遍历+indexOf()\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique1(arr){\n\tlet result = [arr[0]];\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tlet item = arr[i];\n        //待添加的元素是否存在于arr中\n\t\tif(result.indexOf(item) == -1){\n\t\t\tresult.push(item);\n\t\t}\n\t}\n\treturn result;\n}\n\nconsole.log(unique1(arr));\n```\n\n```js\nlet myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) {\n  if (previousValue.indexOf(currentValue) === -1) {\n    previousValue.push(currentValue)\n  }\n  return previousValue\n}, [])\n\nconsole.log(myArrayWithNoDuplicates)\n```\n\n#### Hash对象\n将数组所有的元素转变成对象的键名，利用对象键名的不可重复的特性来去重。\n\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique2(arr){\n\tlet result = [];\n\tlet obj ={};\n\n\tfor(let i =0;i<arr.length;i++){\n\t  let item = arr[i];\n\t  if(!obj[item]){\n\t    result.push(item);\n\t    obj[item] = 1;\n\t  }\n\t}\n\n\treturn result;\n}\nconsole.log(unique2(arr))\n```\n问题：’12’不在结果中。因为在键名中，String类型的’12’和Number类型的12对于Hash对象来说都是一样的。\n\n#### 排序比较\n利用数组原生的sort()方法，将数组先进行排序，排序后比较相邻两个元素的值。\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique3(arr) {\n    let result = [arr[0]];\n    arr = arr.sort();\n    for (let i = 1; i < arr.length; i++) {\n        let item = arr[i];\n        //待添加的元素是否与上一次添加的元素相同\n        if (item !== result[result.length - 1]) {\n            result.push(item)\n        }\n    }\n    return result;\n}\n\nconsole.log(unique3(arr))\n```\n问题：去重后的数组顺序发生了改变\n\n#### Set类型\n```js\nlet arr = [1,'1',2,'2',1,2,'x','y','f','x','y','f'];\n\nfunction unique4(arr){\n    return Array.from(new Set(arr));\n}\n\nconsole.log(unique4(arr));\n```\n\n\n","slug":"JavaScript/01","published":1,"updated":"2022-03-23T10:42:10.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8g2000ed63ugl6i92ub","content":"<hr>\n<h2 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h2><h3 id=\"0-属性：Array-length\"><a href=\"#0-属性：Array-length\" class=\"headerlink\" title=\"0. 属性：Array.length\"></a>0. 属性：Array.length</h3><h3 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1. 操作方法\"></a>1. 操作方法</h3><h4 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h4><ul>\n<li><code>unshift(element1, ..., elementN)</code>:数组<strong>开头添加</strong>数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**</li>\n<li><code>shift()</code>:数组<strong>开头删除</strong>第一个元素，并返回该元素的值。**(该方法修改原有数组)。**</li>\n</ul>\n<ul>\n<li><p><code>push(element1, ..., elementN)</code>:数组<strong>结尾添加</strong>数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**</p>\n</li>\n<li><p><code>pop()</code>: 数组<strong>结尾删除</strong>最后一个元素，并返回该元素的值。**(该方法修改原有数组)。**</p>\n</li>\n<li><p><code>splice(start[, deleteCount[, item1[, item2[, ...]]]])</code>:从<strong>指定位置删除、添加</strong>数个元素，并以数组形式返回被修改的内容。**(该方法修改原有数组)。**</p>\n</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//从索引 2 的位置开始删除 0 个元素，插入“drum” 和 \"guitar\"</span>\n<span class=\"token keyword\">var</span> myFish <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'angel'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clown'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mandarin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sturgeon'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> removed <span class=\"token operator\">=</span> myFish<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'drum'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guitar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 运算后的 myFish: [\"angel\", \"clown\", \"drum\", \"guitar\", \"mandarin\", \"sturgeon\"]</span>\n<span class=\"token comment\" spellcheck=\"true\">// 被删除的元素: [], 没有元素被删除</span>\n</code></pre>\n<ul>\n<li><code>slice([begin[, end]])</code>:返回现有数组的一部分(浅拷贝)，这一对象元素包括 begin，不包括end。(原始数组不会被改变)。</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//返回现有数组的一部分</span>\n<span class=\"token keyword\">var</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Orange'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Lemon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Mango'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> citrus <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']</span>\n<span class=\"token comment\" spellcheck=\"true\">// citrus contains ['Orange','Lemon']</span>\n</code></pre>\n<ul>\n<li><code>concat(value1[, value2[, ...[, valueN]]])</code>:用于合并两个或多个数组，返回一个新数组。(原始数组不会被改变)。</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> num1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    num2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    num3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> nums <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">,</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n</code></pre>\n<h4 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h4><ul>\n<li><code>indexOf(searchElement[, fromIndex])</code>:返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</li>\n<li><code>includes(valueToFind[, fromIndex])</code>:判断一个数组是否包含一个指定的值,返回布尔值</li>\n<li><code>findIndex(callback[, thisArg])</code>:返回数组中满足提供的测试函数的<strong>第一个元素的索引</strong>。若没有找到对应元素则返回-1。</li>\n<li><code>find(callback[, thisArg])</code>:返回数组中满足提供的测试函数的<strong>第一个元素的值</strong>。否则返回 undefined。(callback函数带有3个参数：当前元素的值、当前元素的索引，以及数组本身。)</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//用对象的属性查找数组里的对象</span>\n<span class=\"token keyword\">var</span> inventory <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'apples'</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'bananas'</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>name<span class=\"token punctuation\">:</span> <span class=\"token string\">'cherries'</span><span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">findCherries</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fruit<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'cherries'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inventory<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>findCherries<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// &amp;#123; name: 'cherries', quantity: 5 &amp;#125;</span>\n</code></pre>\n<h3 id=\"2-排序方法\"><a href=\"#2-排序方法\" class=\"headerlink\" title=\"2. 排序方法\"></a>2. 排序方法</h3><ul>\n<li><p><code>reverse()</code>:将数组中元素的位置颠倒，并返回该数组。**(该方法修改原有数组)。**</p>\n</li>\n<li><p><code>sort([compareFunction])</code>:接收一个比较函数，对数组的元素进行排序，并返回该数组。**(该方法修改原有数组)。**</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value1 <span class=\"token operator\">&lt;</span> value2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//返回值小于0不交换,排序为value1,value2</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value1 <span class=\"token operator\">></span> value2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//返回值大于0交换,排序为value2,value1</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">//相等,不交换</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 0,1,5,10,15</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-转换方法\"><a href=\"#3-转换方法\" class=\"headerlink\" title=\"3. 转换方法\"></a>3. 转换方法</h3><ul>\n<li><code>join([separator])</code>:将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。<br>```js<br>const elements = [‘Fire’, ‘Air’, ‘Water’];</li>\n</ul>\n<p>console.log(elements.join());<br>// expected output: “Fire,Air,Water”</p>\n<p>console.log(elements.join(‘’));<br>// expected output: “FireAirWater”</p>\n<p>console.log(elements.join(‘-‘));<br>// expected output: “Fire-Air-Water”</p>\n<pre><code>\n\n### 4. 迭代方法(用forEach（用于操作原数组）和reduce（用于生成新数组）)\n- `some(callback(element[, index[, array]])[, thisArg])`:测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回一个布尔值。\n```js\n//是否有元素大于 10\nfunction isBiggerThan10(element, index, array) &#123;\n  return element &gt; 10;\n&#125;\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n</code></pre>\n<ul>\n<li><code>every(callback(element[, index[, array]])[, thisArg])</code>:测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//所有元素是否都大于 10</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> element <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// false</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// true</span>\n</code></pre>\n<ul>\n<li><code>forEach(callback(currentValue [, index [, array]])[, thisArg])</code>:对数组的每个元素执行一次给定的函数。<strong>callback内无返回值</strong>，调用forEach方法后返回undefined。**(该方法修改原有数组)**<br>```js<br>//将 for 循环转换为 forEach<br>const items = [‘item1’, ‘item2’, ‘item3’];<br>const copy = [];</li>\n</ul>\n<p>// before<br>for (let i=0; i&lt;items.length; i++) {<br>  copy.push(items[i]);<br>}</p>\n<p>// after<br>items.forEach(function(item){<br>  copy.push(item);<br>});</p>\n<pre><code>\n```js\nlet arr = [12, 4, 6, 89, 2]\n//参数index\narr.forEach((item,index) =&gt; &#123;\n    console.log(index+ &#39;:&#39; +item)\n&#125;)\n// 0:12\n// 1:4\n// 2:6\n// 3:89\n// 4:2\n</code></pre>\n<ul>\n<li><p><code>filter(callback(element[, index[, array]])[, thisArg])</code>:<strong>返回一个新数组</strong>, 其包含通过所提供函数实现的测试的所有元素（不喜欢用）</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isBigEnough</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> element <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> filtered <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isBigEnough<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// filtered is [12, 130, 44]</span>\n</code></pre>\n</li>\n<li><p><code>map(callback(currentValue[, index[, array]])&#123; return element &#125;[, thisArg]))</code>:<strong>返回一个新数组</strong>，其结果是该数组中的每个元素调用一次提供的函数后的返回值。</p>\n</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> doubles <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// doubles数组的值为： [2, 8, 18]</span>\n<span class=\"token comment\" spellcheck=\"true\">// numbers数组未被修改： [1, 4, 9]</span>\n</code></pre>\n<ul>\n<li><code>reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123; /* ... */ &#125;, initialValue)</code>:对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span> currentIndex<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> previousValue <span class=\"token operator\">+</span> currentValue<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">//95</span>\n</code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//使用 .reduce() (一次循环)替换 .filter().map() (两次循环)</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> doubledPositiveNumbers <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentValue <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> doubled <span class=\"token operator\">=</span> currentValue <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>doubled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> previousValue<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doubledPositiveNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// [12, 4]</span>\n</code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//计算数组中每个元素出现的次数</span>\n<span class=\"token keyword\">let</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tiff'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bruce'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">let</span> countedNames <span class=\"token operator\">=</span> names<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>allNames<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token keyword\">in</span> allNames<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    allNames<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    allNames<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> allNames\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">// countedNames is:</span>\n<span class=\"token comment\" spellcheck=\"true\">// &amp;#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &amp;#125;</span>\n</code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">// 去重</span>\n<span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> myArrayWithNoDuplicates <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> previousValue\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myArrayWithNoDuplicates<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"5-数组的扩展运算符\"><a href=\"#5-数组的扩展运算符\" class=\"headerlink\" title=\"5. 数组的扩展运算符\"></a>5. 数组的扩展运算符</h3><p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<ul>\n<li><strong>将数组转换为参数序列</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 3</span>\n</code></pre>\n<ul>\n<li><strong>复制数组</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>合并数组</strong></li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// [\"one\", \"two\", \"three\", \"four\", \"five\"]</span>\n</code></pre>\n<ul>\n<li><strong>扩展运算符与解构赋值结合起来，用于生成数组</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfirst <span class=\"token comment\" spellcheck=\"true\">// 1</span>\nrest  <span class=\"token comment\" spellcheck=\"true\">// [2, 3, 4, 5]</span>\n</code></pre>\n<p>需要注意：<strong>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</strong></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// 报错</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 报错</span>\n</code></pre>\n<ul>\n<li><strong>将字符串转为真正的数组</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\" spellcheck=\"true\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span>\n</code></pre>\n<ul>\n<li><strong>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</strong></li>\n</ul>\n<p>比较常见的应用是可以将类数组转为数组：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">// arguments对象：一个对应于传递给函数的参数的类数组对象arguments[0]，arguments[1]，arguments[2]</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>用于替换<code>es5</code>中的<code>Array.prototype.slice.call(arguments)</code>写法。</p>\n<ul>\n<li><strong>使用</strong><code>Math</code><strong>函数获取数组中特定的值</strong></li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 1</span>\nMath<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 9</span>\n</code></pre>\n<h3 id=\"6-数组构造函数新增方法\"><a href=\"#6-数组构造函数新增方法\" class=\"headerlink\" title=\"6. 数组构造函数新增方法\"></a>6. 数组构造函数新增方法</h3><ul>\n<li><code>Array.from(arrayLike[, mapFn[, thisArg]])</code>:对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arrayLike <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token string\">'0'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'1'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'2'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span>\n  length<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ['a', 'b', 'c']</span>\n</code></pre>\n</li>\n<li><code>Array.of(element0[, element1[, ...[, elementN]]])</code>:创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。<br>```js<br>Array.of(7);       // [7]<br>Array.of(1, 2, 3); // [1, 2, 3]</li>\n</ul>\n<p>Array(7);          // [ , , , , , , ]<br>Array(1, 2, 3);    // [1, 2, 3]</p>\n<pre><code>\n\n### 7. 判断数组的方法\n- 通过`Object.prototype.toString.call()`做判断\n\n```javascript\nObject.prototype.toString.call(obj).slice(8,-1) === &#39;Array&#39;;\n</code></pre>\n<ul>\n<li>通过原型链做判断</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>通过ES6的<code>Array.isArray()</code>做判断</li>\n</ul>\n<pre class=\" language-JavaScript\"><code class=\"language-JavaScript\">Array.isArray(obj);\n</code></pre>\n<ul>\n<li>通过instanceof做判断</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span>\n</code></pre>\n<ul>\n<li><p>通过constructor做判断</p>\n<pre class=\" language-JavaScript\"><code class=\"language-JavaScript\">(obj).constructor === Array \n</code></pre>\n</li>\n<li><p>通过<code>Array.prototype.isPrototypeOf</code></p>\n</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"8-数组去重\"><a href=\"#8-数组去重\" class=\"headerlink\" title=\"8. 数组去重\"></a>8. 数组去重</h3><h4 id=\"循环遍历-indexOf\"><a href=\"#循环遍历-indexOf\" class=\"headerlink\" title=\"循环遍历+indexOf()\"></a>循环遍历+indexOf()</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//待添加的元素是否存在于arr中</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique1</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> myArrayWithNoDuplicates <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    previousValue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentValue<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> previousValue\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myArrayWithNoDuplicates<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"Hash对象\"><a href=\"#Hash对象\" class=\"headerlink\" title=\"Hash对象\"></a>Hash对象</h4><p>将数组所有的元素转变成对象的键名，利用对象键名的不可重复的特性来去重。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>问题：’12’不在结果中。因为在键名中，String类型的’12’和Number类型的12对于Hash对象来说都是一样的。</p>\n<h4 id=\"排序比较\"><a href=\"#排序比较\" class=\"headerlink\" title=\"排序比较\"></a>排序比较</h4><p>利用数组原生的sort()方法，将数组先进行排序，排序后比较相邻两个元素的值。</p>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique3</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//待添加的元素是否与上一次添加的元素相同</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">!==</span> result<span class=\"token punctuation\">[</span>result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique3</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>问题：去重后的数组顺序发生了改变</p>\n<h4 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h4><pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">unique4</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique4</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"数组的常用方法\"><a href=\"#数组的常用方法\" class=\"headerlink\" title=\"数组的常用方法\"></a>数组的常用方法</h2><h3 id=\"0-属性：Array-length\"><a href=\"#0-属性：Array-length\" class=\"headerlink\" title=\"0. 属性：Array.length\"></a>0. 属性：Array.length</h3><h3 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1. 操作方法\"></a>1. 操作方法</h3><h4 id=\"增删改\"><a href=\"#增删改\" class=\"headerlink\" title=\"增删改\"></a>增删改</h4><ul>\n<li><code>unshift(element1, ..., elementN)</code>:数组<strong>开头添加</strong>数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**</li>\n<li><code>shift()</code>:数组<strong>开头删除</strong>第一个元素，并返回该元素的值。**(该方法修改原有数组)。**</li>\n</ul>\n<ul>\n<li><p><code>push(element1, ..., elementN)</code>:数组<strong>结尾添加</strong>数个元素，并返回该数组的新长度。**(该方法修改原有数组)。**</p>\n</li>\n<li><p><code>pop()</code>: 数组<strong>结尾删除</strong>最后一个元素，并返回该元素的值。**(该方法修改原有数组)。**</p>\n</li>\n<li><p><code>splice(start[, deleteCount[, item1[, item2[, ...]]]])</code>:从<strong>指定位置删除、添加</strong>数个元素，并以数组形式返回被修改的内容。**(该方法修改原有数组)。**</p>\n</li>\n</ul>\n<pre><code class=\"js\">//从索引 2 的位置开始删除 0 个元素，插入“drum” 和 &quot;guitar&quot;\nvar myFish = [&#39;angel&#39;, &#39;clown&#39;, &#39;mandarin&#39;, &#39;sturgeon&#39;];\nvar removed = myFish.splice(2, 0, &#39;drum&#39;, &#39;guitar&#39;);\n\n// 运算后的 myFish: [&quot;angel&quot;, &quot;clown&quot;, &quot;drum&quot;, &quot;guitar&quot;, &quot;mandarin&quot;, &quot;sturgeon&quot;]\n// 被删除的元素: [], 没有元素被删除\n</code></pre>\n<ul>\n<li><code>slice([begin[, end]])</code>:返回现有数组的一部分(浅拷贝)，这一对象元素包括 begin，不包括end。(原始数组不会被改变)。</li>\n</ul>\n<pre><code class=\"js\">//返回现有数组的一部分\nvar fruits = [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;];\nvar citrus = fruits.slice(1, 3);\n\n// fruits contains [&#39;Banana&#39;, &#39;Orange&#39;, &#39;Lemon&#39;, &#39;Apple&#39;, &#39;Mango&#39;]\n// citrus contains [&#39;Orange&#39;,&#39;Lemon&#39;]\n</code></pre>\n<ul>\n<li><code>concat(value1[, value2[, ...[, valueN]]])</code>:用于合并两个或多个数组，返回一个新数组。(原始数组不会被改变)。</li>\n</ul>\n<pre><code class=\"js\">var num1 = [1, 2, 3],\n    num2 = [4, 5, 6],\n    num3 = [7, 8, 9];\n\nvar nums = num1.concat(num2, num3);\n\nconsole.log(nums);\n// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n<h4 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h4><ul>\n<li><code>indexOf(searchElement[, fromIndex])</code>:返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</li>\n<li><code>includes(valueToFind[, fromIndex])</code>:判断一个数组是否包含一个指定的值,返回布尔值</li>\n<li><code>findIndex(callback[, thisArg])</code>:返回数组中满足提供的测试函数的<strong>第一个元素的索引</strong>。若没有找到对应元素则返回-1。</li>\n<li><code>find(callback[, thisArg])</code>:返回数组中满足提供的测试函数的<strong>第一个元素的值</strong>。否则返回 undefined。(callback函数带有3个参数：当前元素的值、当前元素的索引，以及数组本身。)</li>\n</ul>\n<pre><code class=\"js\">//用对象的属性查找数组里的对象\nvar inventory = [\n    &#123;name: &#39;apples&#39;, quantity: 2&#125;,\n    &#123;name: &#39;bananas&#39;, quantity: 0&#125;,\n    &#123;name: &#39;cherries&#39;, quantity: 5&#125;\n];\n\nfunction findCherries(fruit) &#123;\n    return fruit.name === &#39;cherries&#39;;\n&#125;\n\nconsole.log(inventory.find(findCherries)); // &#123; name: &#39;cherries&#39;, quantity: 5 &#125;\n</code></pre>\n<h3 id=\"2-排序方法\"><a href=\"#2-排序方法\" class=\"headerlink\" title=\"2. 排序方法\"></a>2. 排序方法</h3><ul>\n<li><p><code>reverse()</code>:将数组中元素的位置颠倒，并返回该数组。**(该方法修改原有数组)。**</p>\n</li>\n<li><p><code>sort([compareFunction])</code>:接收一个比较函数，对数组的元素进行排序，并返回该数组。**(该方法修改原有数组)。**</p>\n<pre><code class=\"js\">function compare(value1, value2) &#123;\n  if (value1 &lt; value2) &#123;\n      //返回值小于0不交换,排序为value1,value2\n      return -1;\n  &#125; else if (value1 &gt; value2) &#123;\n      //返回值大于0交换,排序为value2,value1\n      return 1;\n  &#125; else &#123;\n      //相等,不交换\n      return 0;\n  &#125;\n&#125;\nlet values = [0, 1, 5, 10, 15];\nvalues.sort(compare);\nalert(values); // 0,1,5,10,15\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-转换方法\"><a href=\"#3-转换方法\" class=\"headerlink\" title=\"3. 转换方法\"></a>3. 转换方法</h3><ul>\n<li><code>join([separator])</code>:将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。<br>```js<br>const elements = [‘Fire’, ‘Air’, ‘Water’];</li>\n</ul>\n<p>console.log(elements.join());<br>// expected output: “Fire,Air,Water”</p>\n<p>console.log(elements.join(‘’));<br>// expected output: “FireAirWater”</p>\n<p>console.log(elements.join(‘-‘));<br>// expected output: “Fire-Air-Water”</p>\n<pre><code>\n\n### 4. 迭代方法(用forEach（用于操作原数组）和reduce（用于生成新数组）)\n- `some(callback(element[, index[, array]])[, thisArg])`:测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回一个布尔值。\n```js\n//是否有元素大于 10\nfunction isBiggerThan10(element, index, array) &#123;\n  return element &gt; 10;\n&#125;\n\n[2, 5, 8, 1, 4].some(isBiggerThan10);  // false\n[12, 5, 8, 1, 4].some(isBiggerThan10); // true\n</code></pre>\n<ul>\n<li><code>every(callback(element[, index[, array]])[, thisArg])</code>:测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。</li>\n</ul>\n<pre><code class=\"js\">//所有元素是否都大于 10\nfunction isBigEnough(element, index, array) &#123;\n  return element &gt;= 10;\n&#125;\n[12, 5, 8, 130, 44].every(isBigEnough);   // false\n[12, 54, 18, 130, 44].every(isBigEnough); // true\n</code></pre>\n<ul>\n<li><code>forEach(callback(currentValue [, index [, array]])[, thisArg])</code>:对数组的每个元素执行一次给定的函数。<strong>callback内无返回值</strong>，调用forEach方法后返回undefined。**(该方法修改原有数组)**<br>```js<br>//将 for 循环转换为 forEach<br>const items = [‘item1’, ‘item2’, ‘item3’];<br>const copy = [];</li>\n</ul>\n<p>// before<br>for (let i=0; i&lt;items.length; i++) {<br>  copy.push(items[i]);<br>}</p>\n<p>// after<br>items.forEach(function(item){<br>  copy.push(item);<br>});</p>\n<pre><code>\n```js\nlet arr = [12, 4, 6, 89, 2]\n//参数index\narr.forEach((item,index) =&gt; &#123;\n    console.log(index+ &#39;:&#39; +item)\n&#125;)\n// 0:12\n// 1:4\n// 2:6\n// 3:89\n// 4:2\n</code></pre>\n<ul>\n<li><p><code>filter(callback(element[, index[, array]])[, thisArg])</code>:<strong>返回一个新数组</strong>, 其包含通过所提供函数实现的测试的所有元素（不喜欢用）</p>\n<pre><code class=\"js\">function isBigEnough(element) &#123;\nreturn element &gt;= 10;\n&#125;\nvar filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n// filtered is [12, 130, 44]\n</code></pre>\n</li>\n<li><p><code>map(callback(currentValue[, index[, array]])&#123; return element &#125;[, thisArg]))</code>:<strong>返回一个新数组</strong>，其结果是该数组中的每个元素调用一次提供的函数后的返回值。</p>\n</li>\n</ul>\n<pre><code class=\"js\">var numbers = [1, 4, 9];\nvar doubles = numbers.map(function(num) &#123;\n  return num * 2;\n&#125;);\n\n// doubles数组的值为： [2, 8, 18]\n// numbers数组未被修改： [1, 4, 9]\n</code></pre>\n<ul>\n<li><code>reduce((previousValue, currentValue, currentIndex, array) =&gt; &#123; /* ... */ &#125;, initialValue)</code>:对数组中的每个元素按序执行一个由您提供的 reducer 函数，每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。</li>\n</ul>\n<pre><code class=\"js\">[15, 16, 17, 18, 19].reduce( (previousValue, currentValue, currentIndex, array) =&gt; previousValue + currentValue, 10 )\n//95\n</code></pre>\n<pre><code class=\"js\">//使用 .reduce() (一次循环)替换 .filter().map() (两次循环)\nconst numbers = [-5, 6, 2, 0];\n\nconst doubledPositiveNumbers = numbers.reduce((previousValue, currentValue) =&gt; &#123;\n  if (currentValue &gt; 0) &#123;\n    const doubled = currentValue * 2;\n    previousValue.push(doubled);\n  &#125;\n  return previousValue;\n&#125;, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]\n</code></pre>\n<pre><code class=\"js\">//计算数组中每个元素出现的次数\nlet names = [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Tiff&#39;, &#39;Bruce&#39;, &#39;Alice&#39;]\n\nlet countedNames = names.reduce(function (allNames, name) &#123;\n  if (name in allNames) &#123;\n    allNames[name]++\n  &#125;\n  else &#123;\n    allNames[name] = 1\n  &#125;\n  return allNames\n&#125;, &#123;&#125;)\n// countedNames is:\n// &#123; &#39;Alice&#39;: 2, &#39;Bob&#39;: 1, &#39;Tiff&#39;: 1, &#39;Bruce&#39;: 1 &#125;\n</code></pre>\n<pre><code class=\"js\">// 去重\nlet myArray = [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;, &#39;e&#39;, &#39;c&#39;, &#39;d&#39;, &#39;d&#39;, &#39;d&#39;, &#39;d&#39;]\nlet myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) &#123;\n  if (previousValue.indexOf(currentValue) === -1) &#123;\n    previousValue.push(currentValue)\n  &#125;\n  return previousValue\n&#125;, [])\n\nconsole.log(myArrayWithNoDuplicates)\n</code></pre>\n<h3 id=\"5-数组的扩展运算符\"><a href=\"#5-数组的扩展运算符\" class=\"headerlink\" title=\"5. 数组的扩展运算符\"></a>5. 数组的扩展运算符</h3><p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<ul>\n<li><strong>将数组转换为参数序列</strong></li>\n</ul>\n<pre><code class=\"javascript\">function add(x, y) &#123;\n  return x + y;\n&#125;\nconst numbers = [1, 2];\nadd(...numbers) // 3\n</code></pre>\n<ul>\n<li><strong>复制数组</strong></li>\n</ul>\n<pre><code class=\"javascript\">const arr1 = [1, 2];\nconst arr2 = [...arr1];\n</code></pre>\n<ul>\n<li><strong>合并数组</strong></li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<pre><code class=\"javascript\">const arr1 = [&#39;two&#39;, &#39;three&#39;];\nconst arr2 = [&#39;one&#39;, ...arr1, &#39;four&#39;, &#39;five&#39;];\n// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]\n</code></pre>\n<ul>\n<li><strong>扩展运算符与解构赋值结合起来，用于生成数组</strong></li>\n</ul>\n<pre><code class=\"javascript\">const [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n</code></pre>\n<p>需要注意：<strong>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</strong></p>\n<pre><code class=\"javascript\">const [...rest, last] = [1, 2, 3, 4, 5];         // 报错\nconst [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n</code></pre>\n<ul>\n<li><strong>将字符串转为真正的数组</strong></li>\n</ul>\n<pre><code class=\"javascript\">[...&#39;hello&#39;]    // [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]\n</code></pre>\n<ul>\n<li><strong>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</strong></li>\n</ul>\n<p>比较常见的应用是可以将类数组转为数组：</p>\n<pre><code class=\"javascript\">// arguments对象：一个对应于传递给函数的参数的类数组对象arguments[0]，arguments[1]，arguments[2]\nfunction foo() &#123;\n  const args = [...arguments];\n&#125;\n</code></pre>\n<p>用于替换<code>es5</code>中的<code>Array.prototype.slice.call(arguments)</code>写法。</p>\n<ul>\n<li><strong>使用</strong><code>Math</code><strong>函数获取数组中特定的值</strong></li>\n</ul>\n<pre><code class=\"javascript\">const numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n</code></pre>\n<h3 id=\"6-数组构造函数新增方法\"><a href=\"#6-数组构造函数新增方法\" class=\"headerlink\" title=\"6. 数组构造函数新增方法\"></a>6. 数组构造函数新增方法</h3><ul>\n<li><code>Array.from(arrayLike[, mapFn[, thisArg]])</code>:对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。<pre><code class=\"js\">let arrayLike = &#123;\n  &#39;0&#39;: &#39;a&#39;,\n  &#39;1&#39;: &#39;b&#39;,\n  &#39;2&#39;: &#39;c&#39;,\n  length: 3\n&#125;;\nlet arr2 = Array.from(arrayLike); // [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]\n</code></pre>\n</li>\n<li><code>Array.of(element0[, element1[, ...[, elementN]]])</code>:创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。<br>```js<br>Array.of(7);       // [7]<br>Array.of(1, 2, 3); // [1, 2, 3]</li>\n</ul>\n<p>Array(7);          // [ , , , , , , ]<br>Array(1, 2, 3);    // [1, 2, 3]</p>\n<pre><code>\n\n### 7. 判断数组的方法\n- 通过`Object.prototype.toString.call()`做判断\n\n```javascript\nObject.prototype.toString.call(obj).slice(8,-1) === &#39;Array&#39;;\n</code></pre>\n<ul>\n<li>通过原型链做判断</li>\n</ul>\n<pre><code class=\"javascript\">obj.__proto__ === Array.prototype;\n</code></pre>\n<ul>\n<li>通过ES6的<code>Array.isArray()</code>做判断</li>\n</ul>\n<pre><code class=\"JavaScript\">Array.isArray(obj);\n</code></pre>\n<ul>\n<li>通过instanceof做判断</li>\n</ul>\n<pre><code class=\"javascript\">obj instanceof Array\n</code></pre>\n<ul>\n<li><p>通过constructor做判断</p>\n<pre><code class=\"JavaScript\">(obj).constructor === Array \n</code></pre>\n</li>\n<li><p>通过<code>Array.prototype.isPrototypeOf</code></p>\n</li>\n</ul>\n<pre><code class=\"javascript\">Array.prototype.isPrototypeOf(obj)\n</code></pre>\n<h3 id=\"8-数组去重\"><a href=\"#8-数组去重\" class=\"headerlink\" title=\"8. 数组去重\"></a>8. 数组去重</h3><h4 id=\"循环遍历-indexOf\"><a href=\"#循环遍历-indexOf\" class=\"headerlink\" title=\"循环遍历+indexOf()\"></a>循环遍历+indexOf()</h4><pre><code class=\"js\">let arr = [1,&#39;1&#39;,2,&#39;2&#39;,1,2,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;];\n\nfunction unique1(arr)&#123;\n    let result = [arr[0]];\n    for (let i = 1; i &lt; arr.length; i++) &#123;\n        let item = arr[i];\n        //待添加的元素是否存在于arr中\n        if(result.indexOf(item) == -1)&#123;\n            result.push(item);\n        &#125;\n    &#125;\n    return result;\n&#125;\n\nconsole.log(unique1(arr));\n</code></pre>\n<pre><code class=\"js\">let myArray = [&#39;a&#39;, &#39;b&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;e&#39;, &#39;e&#39;, &#39;c&#39;, &#39;d&#39;, &#39;d&#39;, &#39;d&#39;, &#39;d&#39;]\nlet myArrayWithNoDuplicates = myArray.reduce(function (previousValue, currentValue) &#123;\n  if (previousValue.indexOf(currentValue) === -1) &#123;\n    previousValue.push(currentValue)\n  &#125;\n  return previousValue\n&#125;, [])\n\nconsole.log(myArrayWithNoDuplicates)\n</code></pre>\n<h4 id=\"Hash对象\"><a href=\"#Hash对象\" class=\"headerlink\" title=\"Hash对象\"></a>Hash对象</h4><p>将数组所有的元素转变成对象的键名，利用对象键名的不可重复的特性来去重。</p>\n<pre><code class=\"js\">let arr = [1,&#39;1&#39;,2,&#39;2&#39;,1,2,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;];\n\nfunction unique2(arr)&#123;\n    let result = [];\n    let obj =&#123;&#125;;\n\n    for(let i =0;i&lt;arr.length;i++)&#123;\n      let item = arr[i];\n      if(!obj[item])&#123;\n        result.push(item);\n        obj[item] = 1;\n      &#125;\n    &#125;\n\n    return result;\n&#125;\nconsole.log(unique2(arr))\n</code></pre>\n<p>问题：’12’不在结果中。因为在键名中，String类型的’12’和Number类型的12对于Hash对象来说都是一样的。</p>\n<h4 id=\"排序比较\"><a href=\"#排序比较\" class=\"headerlink\" title=\"排序比较\"></a>排序比较</h4><p>利用数组原生的sort()方法，将数组先进行排序，排序后比较相邻两个元素的值。</p>\n<pre><code class=\"js\">let arr = [1,&#39;1&#39;,2,&#39;2&#39;,1,2,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;];\n\nfunction unique3(arr) &#123;\n    let result = [arr[0]];\n    arr = arr.sort();\n    for (let i = 1; i &lt; arr.length; i++) &#123;\n        let item = arr[i];\n        //待添加的元素是否与上一次添加的元素相同\n        if (item !== result[result.length - 1]) &#123;\n            result.push(item)\n        &#125;\n    &#125;\n    return result;\n&#125;\n\nconsole.log(unique3(arr))\n</code></pre>\n<p>问题：去重后的数组顺序发生了改变</p>\n<h4 id=\"Set类型\"><a href=\"#Set类型\" class=\"headerlink\" title=\"Set类型\"></a>Set类型</h4><pre><code class=\"js\">let arr = [1,&#39;1&#39;,2,&#39;2&#39;,1,2,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;,&#39;x&#39;,&#39;y&#39;,&#39;f&#39;];\n\nfunction unique4(arr)&#123;\n    return Array.from(new Set(arr));\n&#125;\n\nconsole.log(unique4(arr));\n</code></pre>\n"},{"title":"TCP三次握手和四次挥手","date":"2022-03-06T16:00:00.000Z","sidebar":"auto","_content":"---\n## TCP三次握手和四次挥手\n\n三次握手那次最容易被攻击\n\n\n\n### 1. 三次握手\n三次握手，建立TCP连接，主要是为了确认双方的接收能力和发送能力是否正常并指定自己的初始化序列号为后面的可靠性传送做准备。  \n\n过程如下：  \n刚开始客户端处于Closed状态，服务端处于Listen状态\n- 第一次握手：客户端给服务端发送连接请求报文段（SYN报文）并指明客户端的初始化序列号ISN，请求发送后客户端进入 SYN-SENT 状态。\n- 第二次握手：服务端收到客户端连接请求报文段（SYN报文）后，如果同意连接，则会以自己的SYN报文作为应答，并且指定自己的初始化序列号ISN。同时会把客户端的ISN+1作为ACK，表示自己已经收到客户端的SYN。发送完后服务器便进入 SYN_REVD 的状态。\n- 第三次握手：当客户端收到连接同意的应答后（SYN报文），向服务端发送一个确认报文（ACK=服务器的ISN+1），表示已经收到服务端的SYN报文了。客户端发送完这个报文后便进入 ESTABLISHED 状态，服务器收到ACK报文后也进入 ESTABLISHED 状态，此时连接建立成功。  \n\n![image](https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663256-5eb6dcdf-fdb6-4b67-a3da-da15c1d396fb.png)\n\n#### 为什么不是两次握手?  \n- TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。  \n- 如果是两次握手，客户端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到；**但服务端只能确定对方发的包自己能收到，无法确定自己发的包对方能收到。**  \n- 并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源\n\n\n### 2. 四次挥手\n刚开始双方都处于 ESTABLISHED 状态，假如是客户端认为数据发送完成，主动发起关闭请求。四次挥手的过程如下：\n- 第一次挥手：客户端向服务器发出连接释放请求报文段（FIN=1，序号seq=u），并停止再发送数据，此时客户端进入FIN_WAIT1（终止等待1）状态。\n- 第二次挥手：服务器收到连接释放报文段，会告诉应用层要释放 TCP 链接。然后向客户端发送连接释放报文段（ACK=1，确认号ack=u+1，序号seq=v），此时客户端进入FIN_WAIT2（终止等待2）状态，服务器进入 CLOSE_WAIT 状态。此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务器仍可以发送数据给客户端。\n- 第三次挥手：服务器如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），然后服务器便进入 LAST-ACK（最后确认） 状态。\n- 第四次挥手：客户端收到释放请求（FIN）后，向服务器发送确认报文段（ACK=1，seq=u+1，ack=w+1），此时客户端进入 TIME-WAIT（时间等待） 状态。该状态会持续 2MSL时间（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃）让TCP完全释放，若该时间段内没有服务端的重发请求的话，客户端就进入 CLOSED 状态。当服务器收到确认报文段后，也便进入 CLOSED 状态。  \n\n![image](https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663279-0ea063ba-a06b-4f57-9aa9-0e2d1c8d373c.png)\n\n#### 为什么是四次挥手\nTCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。  \n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。","source":"_posts/Computer/04.md","raw":"---\ntitle: TCP三次握手和四次挥手\ndate: 2022-03-07\ncategories:\n - 计算机网络笔记\ntags:\n - Computer\nsidebar: 'auto'\n---\n---\n## TCP三次握手和四次挥手\n\n三次握手那次最容易被攻击\n\n\n\n### 1. 三次握手\n三次握手，建立TCP连接，主要是为了确认双方的接收能力和发送能力是否正常并指定自己的初始化序列号为后面的可靠性传送做准备。  \n\n过程如下：  \n刚开始客户端处于Closed状态，服务端处于Listen状态\n- 第一次握手：客户端给服务端发送连接请求报文段（SYN报文）并指明客户端的初始化序列号ISN，请求发送后客户端进入 SYN-SENT 状态。\n- 第二次握手：服务端收到客户端连接请求报文段（SYN报文）后，如果同意连接，则会以自己的SYN报文作为应答，并且指定自己的初始化序列号ISN。同时会把客户端的ISN+1作为ACK，表示自己已经收到客户端的SYN。发送完后服务器便进入 SYN_REVD 的状态。\n- 第三次握手：当客户端收到连接同意的应答后（SYN报文），向服务端发送一个确认报文（ACK=服务器的ISN+1），表示已经收到服务端的SYN报文了。客户端发送完这个报文后便进入 ESTABLISHED 状态，服务器收到ACK报文后也进入 ESTABLISHED 状态，此时连接建立成功。  \n\n![image](https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663256-5eb6dcdf-fdb6-4b67-a3da-da15c1d396fb.png)\n\n#### 为什么不是两次握手?  \n- TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。  \n- 如果是两次握手，客户端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到；**但服务端只能确定对方发的包自己能收到，无法确定自己发的包对方能收到。**  \n- 并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源\n\n\n### 2. 四次挥手\n刚开始双方都处于 ESTABLISHED 状态，假如是客户端认为数据发送完成，主动发起关闭请求。四次挥手的过程如下：\n- 第一次挥手：客户端向服务器发出连接释放请求报文段（FIN=1，序号seq=u），并停止再发送数据，此时客户端进入FIN_WAIT1（终止等待1）状态。\n- 第二次挥手：服务器收到连接释放报文段，会告诉应用层要释放 TCP 链接。然后向客户端发送连接释放报文段（ACK=1，确认号ack=u+1，序号seq=v），此时客户端进入FIN_WAIT2（终止等待2）状态，服务器进入 CLOSE_WAIT 状态。此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务器仍可以发送数据给客户端。\n- 第三次挥手：服务器如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），然后服务器便进入 LAST-ACK（最后确认） 状态。\n- 第四次挥手：客户端收到释放请求（FIN）后，向服务器发送确认报文段（ACK=1，seq=u+1，ack=w+1），此时客户端进入 TIME-WAIT（时间等待） 状态。该状态会持续 2MSL时间（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃）让TCP完全释放，若该时间段内没有服务端的重发请求的话，客户端就进入 CLOSED 状态。当服务器收到确认报文段后，也便进入 CLOSED 状态。  \n\n![image](https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663279-0ea063ba-a06b-4f57-9aa9-0e2d1c8d373c.png)\n\n#### 为什么是四次挥手\nTCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。  \n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。","slug":"Computer/04","published":1,"updated":"2022-03-23T10:49:01.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8g3000gd63ud3yc458h","content":"<hr>\n<h2 id=\"TCP三次握手和四次挥手\"><a href=\"#TCP三次握手和四次挥手\" class=\"headerlink\" title=\"TCP三次握手和四次挥手\"></a>TCP三次握手和四次挥手</h2><p>三次握手那次最容易被攻击</p>\n<h3 id=\"1-三次握手\"><a href=\"#1-三次握手\" class=\"headerlink\" title=\"1. 三次握手\"></a>1. 三次握手</h3><p>三次握手，建立TCP连接，主要是为了确认双方的接收能力和发送能力是否正常并指定自己的初始化序列号为后面的可靠性传送做准备。  </p>\n<p>过程如下：<br>刚开始客户端处于Closed状态，服务端处于Listen状态</p>\n<ul>\n<li>第一次握手：客户端给服务端发送连接请求报文段（SYN报文）并指明客户端的初始化序列号ISN，请求发送后客户端进入 SYN-SENT 状态。</li>\n<li>第二次握手：服务端收到客户端连接请求报文段（SYN报文）后，如果同意连接，则会以自己的SYN报文作为应答，并且指定自己的初始化序列号ISN。同时会把客户端的ISN+1作为ACK，表示自己已经收到客户端的SYN。发送完后服务器便进入 SYN_REVD 的状态。</li>\n<li>第三次握手：当客户端收到连接同意的应答后（SYN报文），向服务端发送一个确认报文（ACK=服务器的ISN+1），表示已经收到服务端的SYN报文了。客户端发送完这个报文后便进入 ESTABLISHED 状态，服务器收到ACK报文后也进入 ESTABLISHED 状态，此时连接建立成功。  </li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663256-5eb6dcdf-fdb6-4b67-a3da-da15c1d396fb.png\" alt=\"image\"></p>\n<h4 id=\"为什么不是两次握手\"><a href=\"#为什么不是两次握手\" class=\"headerlink\" title=\"为什么不是两次握手?\"></a>为什么不是两次握手?</h4><ul>\n<li>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。  </li>\n<li>如果是两次握手，客户端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到；<strong>但服务端只能确定对方发的包自己能收到，无法确定自己发的包对方能收到。</strong>  </li>\n<li>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</li>\n</ul>\n<h3 id=\"2-四次挥手\"><a href=\"#2-四次挥手\" class=\"headerlink\" title=\"2. 四次挥手\"></a>2. 四次挥手</h3><p>刚开始双方都处于 ESTABLISHED 状态，假如是客户端认为数据发送完成，主动发起关闭请求。四次挥手的过程如下：</p>\n<ul>\n<li>第一次挥手：客户端向服务器发出连接释放请求报文段（FIN=1，序号seq=u），并停止再发送数据，此时客户端进入FIN_WAIT1（终止等待1）状态。</li>\n<li>第二次挥手：服务器收到连接释放报文段，会告诉应用层要释放 TCP 链接。然后向客户端发送连接释放报文段（ACK=1，确认号ack=u+1，序号seq=v），此时客户端进入FIN_WAIT2（终止等待2）状态，服务器进入 CLOSE_WAIT 状态。此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务器仍可以发送数据给客户端。</li>\n<li>第三次挥手：服务器如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），然后服务器便进入 LAST-ACK（最后确认） 状态。</li>\n<li>第四次挥手：客户端收到释放请求（FIN）后，向服务器发送确认报文段（ACK=1，seq=u+1，ack=w+1），此时客户端进入 TIME-WAIT（时间等待） 状态。该状态会持续 2MSL时间（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃）让TCP完全释放，若该时间段内没有服务端的重发请求的话，客户端就进入 CLOSED 状态。当服务器收到确认报文段后，也便进入 CLOSED 状态。  </li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663279-0ea063ba-a06b-4f57-9aa9-0e2d1c8d373c.png\" alt=\"image\"></p>\n<h4 id=\"为什么是四次挥手\"><a href=\"#为什么是四次挥手\" class=\"headerlink\" title=\"为什么是四次挥手\"></a>为什么是四次挥手</h4><p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br>最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"TCP三次握手和四次挥手\"><a href=\"#TCP三次握手和四次挥手\" class=\"headerlink\" title=\"TCP三次握手和四次挥手\"></a>TCP三次握手和四次挥手</h2><p>三次握手那次最容易被攻击</p>\n<h3 id=\"1-三次握手\"><a href=\"#1-三次握手\" class=\"headerlink\" title=\"1. 三次握手\"></a>1. 三次握手</h3><p>三次握手，建立TCP连接，主要是为了确认双方的接收能力和发送能力是否正常并指定自己的初始化序列号为后面的可靠性传送做准备。  </p>\n<p>过程如下：<br>刚开始客户端处于Closed状态，服务端处于Listen状态</p>\n<ul>\n<li>第一次握手：客户端给服务端发送连接请求报文段（SYN报文）并指明客户端的初始化序列号ISN，请求发送后客户端进入 SYN-SENT 状态。</li>\n<li>第二次握手：服务端收到客户端连接请求报文段（SYN报文）后，如果同意连接，则会以自己的SYN报文作为应答，并且指定自己的初始化序列号ISN。同时会把客户端的ISN+1作为ACK，表示自己已经收到客户端的SYN。发送完后服务器便进入 SYN_REVD 的状态。</li>\n<li>第三次握手：当客户端收到连接同意的应答后（SYN报文），向服务端发送一个确认报文（ACK=服务器的ISN+1），表示已经收到服务端的SYN报文了。客户端发送完这个报文后便进入 ESTABLISHED 状态，服务器收到ACK报文后也进入 ESTABLISHED 状态，此时连接建立成功。  </li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663256-5eb6dcdf-fdb6-4b67-a3da-da15c1d396fb.png\" alt=\"image\"></p>\n<h4 id=\"为什么不是两次握手\"><a href=\"#为什么不是两次握手\" class=\"headerlink\" title=\"为什么不是两次握手?\"></a>为什么不是两次握手?</h4><ul>\n<li>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。  </li>\n<li>如果是两次握手，客户端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到；<strong>但服务端只能确定对方发的包自己能收到，无法确定自己发的包对方能收到。</strong>  </li>\n<li>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</li>\n</ul>\n<h3 id=\"2-四次挥手\"><a href=\"#2-四次挥手\" class=\"headerlink\" title=\"2. 四次挥手\"></a>2. 四次挥手</h3><p>刚开始双方都处于 ESTABLISHED 状态，假如是客户端认为数据发送完成，主动发起关闭请求。四次挥手的过程如下：</p>\n<ul>\n<li>第一次挥手：客户端向服务器发出连接释放请求报文段（FIN=1，序号seq=u），并停止再发送数据，此时客户端进入FIN_WAIT1（终止等待1）状态。</li>\n<li>第二次挥手：服务器收到连接释放报文段，会告诉应用层要释放 TCP 链接。然后向客户端发送连接释放报文段（ACK=1，确认号ack=u+1，序号seq=v），此时客户端进入FIN_WAIT2（终止等待2）状态，服务器进入 CLOSE_WAIT 状态。此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务器仍可以发送数据给客户端。</li>\n<li>第三次挥手：服务器如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），然后服务器便进入 LAST-ACK（最后确认） 状态。</li>\n<li>第四次挥手：客户端收到释放请求（FIN）后，向服务器发送确认报文段（ACK=1，seq=u+1，ack=w+1），此时客户端进入 TIME-WAIT（时间等待） 状态。该状态会持续 2MSL时间（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃）让TCP完全释放，若该时间段内没有服务端的重发请求的话，客户端就进入 CLOSED 状态。当服务器收到确认报文段后，也便进入 CLOSED 状态。  </li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663279-0ea063ba-a06b-4f57-9aa9-0e2d1c8d373c.png\" alt=\"image\"></p>\n<h4 id=\"为什么是四次挥手\"><a href=\"#为什么是四次挥手\" class=\"headerlink\" title=\"为什么是四次挥手\"></a>为什么是四次挥手</h4><p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br>最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>\n"},{"title":"水平垂直居中","date":"2022-02-28T16:00:00.000Z","sidebar":"auto","_content":"---\n\n## 水平垂直居中\n\n### 1. 行内元素（text-align: center;vertical-align: middle;）\n- 行内元素水平居中：\n```css\n.parent {\n    text-align: center;\n}\n\n```\n- 行内元素垂直居中：\n```css\n.son {\n  vertical-align: middle;\n}\n```\n\n- 行内元素垂直居中:子元素行高等于父元素高度\n```css\n.parent {\n    height: 高度;\n}\n.son {\n    line-height: 高度;\n}\n```\n\n\n### 2. 块级元素\n- 居中元素（子元素）的宽高已知\n- 居中元素宽高未知\n#### （1）利用定位+margin:auto（父相子绝，四方向0）\n父级设置相对定位，子级设置绝对定位。**子级设置四个方向的值都为 0**，`margin：auto`。子级没有设置宽高则被拉开到与父级一样宽高；**子级设置宽高**，对应方向实现平分，可以实现水平和垂直方向上的居中。  \n该方法适用于**子盒子有宽高**的情况\n\n```html\n<style>\n    .father{\n        width:500px;\n        height:300px;\n        border:1px solid #0a3b98;\n        position: relative;\n    }\n    .son{\n        width:100px;\n        height:40px;\n        background: #f0a238;\n        position: absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n        margin:auto;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （2）利用定位+margin:负值（父相子绝，方向50%）\n父级设置相对定位，子级设置绝对定位。子级先将元素的左上角起始原点通过 `top:50%`和 `left:50%`定位到页面的中心，然后再通过 `margin 负值`来调整元素的中心点到页面的中心。  \n该方法适用于**子盒子宽高已知**的情况  \n```html\n<style>\n    .father {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    }\n    .son {\n        width: 100px;\n        height: 100px;\n        background: red;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-left:-50px;   /* 自身 width 的一半 */\n        margin-top:-50px;  /* 自身 height 的一半 */\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （3）利用定位+transform（父相子绝，方向50%）\n父级设置相对定位，子级设置绝对定位。先将元素的左上角通过 `top:50%`和 `left:50%`定位到页面的中心，然后再通过 `transform: translate(-50%,-50%)` 来调整元素的中心点到页面的中心。该方法需要**考虑浏览器兼容问题,不需要知道自身元素的宽高**\n```html\n<style>\n    .father {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    }\n    .son {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n  \t\t\ttransform: translate(-50%,-50%);\n        width: 100px;\n        height: 100px;\n        background: red;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （4）table布局（子元素为行内块元素）\n设置父元素为`display:table-cell`，子元素设置`display: inline-block`。利用`vertical-align: middle;`（用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式）和`text-align: center;`可以让所有的行内块级元素水平垂直居中\n```html\n<style>\n    .father {\n        display: table-cell;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n        vertical-align: middle;/*用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式*/\n        text-align: center;/*行内内容（例如文字）如何相对它的块父元素水平对齐方式*/\n    }\n    .son {\n        display: inline-block;\n        width: 100px;\n        height: 100px;\n        background: red;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （5）flex布局（align-items:center和justify-content:center）\n通过 `display: flex`,`align-items:center` 和 `justify-content:center`设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要**考虑兼容的问题**，该方法在移动端用的较多\n```html\n<style>\n    .father {\n        display: flex;/*flex布局*/\n        justify-content: center;/*水平居中*/\n        align-items: center;/*垂直居中*/\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    }\n    .son {\n        width: 100px;\n        height: 100px;\n        background: red;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （6）grid布局（align-items:center和justify-content:center）\n通过 `display: grid`,`align-items:center` 和 `justify-content:center`设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。\n```html\n<style>\n    .father {\n            display: grid;\n            align-items:center;/*垂直居中*/\n            justify-content: center;/*水平居中*/\n            width: 200px;\n            height: 200px;\n            background: skyblue;\n\n        }\n        .son {\n            width: 10px;\n            height: 10px;\n            border: 1px solid red\n        }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n\n\n\n\n","source":"_posts/css/01.md","raw":"---\ntitle: 水平垂直居中\ndate: 2022-03-01\ncategories:\n - CSS学习笔记\ntags:\n - CSS\nsidebar: 'auto'\n---\n---\n\n## 水平垂直居中\n\n### 1. 行内元素（text-align: center;vertical-align: middle;）\n- 行内元素水平居中：\n```css\n.parent {\n    text-align: center;\n}\n\n```\n- 行内元素垂直居中：\n```css\n.son {\n  vertical-align: middle;\n}\n```\n\n- 行内元素垂直居中:子元素行高等于父元素高度\n```css\n.parent {\n    height: 高度;\n}\n.son {\n    line-height: 高度;\n}\n```\n\n\n### 2. 块级元素\n- 居中元素（子元素）的宽高已知\n- 居中元素宽高未知\n#### （1）利用定位+margin:auto（父相子绝，四方向0）\n父级设置相对定位，子级设置绝对定位。**子级设置四个方向的值都为 0**，`margin：auto`。子级没有设置宽高则被拉开到与父级一样宽高；**子级设置宽高**，对应方向实现平分，可以实现水平和垂直方向上的居中。  \n该方法适用于**子盒子有宽高**的情况\n\n```html\n<style>\n    .father{\n        width:500px;\n        height:300px;\n        border:1px solid #0a3b98;\n        position: relative;\n    }\n    .son{\n        width:100px;\n        height:40px;\n        background: #f0a238;\n        position: absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n        margin:auto;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （2）利用定位+margin:负值（父相子绝，方向50%）\n父级设置相对定位，子级设置绝对定位。子级先将元素的左上角起始原点通过 `top:50%`和 `left:50%`定位到页面的中心，然后再通过 `margin 负值`来调整元素的中心点到页面的中心。  \n该方法适用于**子盒子宽高已知**的情况  \n```html\n<style>\n    .father {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    }\n    .son {\n        width: 100px;\n        height: 100px;\n        background: red;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-left:-50px;   /* 自身 width 的一半 */\n        margin-top:-50px;  /* 自身 height 的一半 */\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （3）利用定位+transform（父相子绝，方向50%）\n父级设置相对定位，子级设置绝对定位。先将元素的左上角通过 `top:50%`和 `left:50%`定位到页面的中心，然后再通过 `transform: translate(-50%,-50%)` 来调整元素的中心点到页面的中心。该方法需要**考虑浏览器兼容问题,不需要知道自身元素的宽高**\n```html\n<style>\n    .father {\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    }\n    .son {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n  \t\t\ttransform: translate(-50%,-50%);\n        width: 100px;\n        height: 100px;\n        background: red;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （4）table布局（子元素为行内块元素）\n设置父元素为`display:table-cell`，子元素设置`display: inline-block`。利用`vertical-align: middle;`（用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式）和`text-align: center;`可以让所有的行内块级元素水平垂直居中\n```html\n<style>\n    .father {\n        display: table-cell;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n        vertical-align: middle;/*用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式*/\n        text-align: center;/*行内内容（例如文字）如何相对它的块父元素水平对齐方式*/\n    }\n    .son {\n        display: inline-block;\n        width: 100px;\n        height: 100px;\n        background: red;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （5）flex布局（align-items:center和justify-content:center）\n通过 `display: flex`,`align-items:center` 和 `justify-content:center`设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要**考虑兼容的问题**，该方法在移动端用的较多\n```html\n<style>\n    .father {\n        display: flex;/*flex布局*/\n        justify-content: center;/*水平居中*/\n        align-items: center;/*垂直居中*/\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    }\n    .son {\n        width: 100px;\n        height: 100px;\n        background: red;\n    }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n#### （6）grid布局（align-items:center和justify-content:center）\n通过 `display: grid`,`align-items:center` 和 `justify-content:center`设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。\n```html\n<style>\n    .father {\n            display: grid;\n            align-items:center;/*垂直居中*/\n            justify-content: center;/*水平居中*/\n            width: 200px;\n            height: 200px;\n            background: skyblue;\n\n        }\n        .son {\n            width: 10px;\n            height: 10px;\n            border: 1px solid red\n        }\n</style>\n<div class=\"father\">\n    <div class=\"son\"></div>\n</div>\n```\n\n\n\n\n\n","slug":"css/01","published":1,"updated":"2022-03-23T10:41:21.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8g5000ld63u8muobfya","content":"<hr>\n<h2 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h2><h3 id=\"1-行内元素（text-align-center-vertical-align-middle-）\"><a href=\"#1-行内元素（text-align-center-vertical-align-middle-）\" class=\"headerlink\" title=\"1. 行内元素（text-align: center;vertical-align: middle;）\"></a>1. 行内元素（text-align: center;vertical-align: middle;）</h3><ul>\n<li>行内元素水平居中：<br>```css<br>.parent {<br>  text-align: center;<br>}</li>\n</ul>\n<pre><code>- 行内元素垂直居中：\n```css\n.son &#123;\n  vertical-align: middle;\n&#125;\n</code></pre>\n<ul>\n<li>行内元素垂直居中:子元素行高等于父元素高度<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token number\">.</span>parent &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 高度<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>son &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 高度<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"2-块级元素\"><a href=\"#2-块级元素\" class=\"headerlink\" title=\"2. 块级元素\"></a>2. 块级元素</h3><ul>\n<li>居中元素（子元素）的宽高已知</li>\n<li>居中元素宽高未知<h4 id=\"（1）利用定位-margin-auto（父相子绝，四方向0）\"><a href=\"#（1）利用定位-margin-auto（父相子绝，四方向0）\" class=\"headerlink\" title=\"（1）利用定位+margin:auto（父相子绝，四方向0）\"></a>（1）利用定位+margin:auto（父相子绝，四方向0）</h4>父级设置相对定位，子级设置绝对定位。<strong>子级设置四个方向的值都为 0</strong>，<code>margin：auto</code>。子级没有设置宽高则被拉开到与父级一样宽高；<strong>子级设置宽高</strong>，对应方向实现平分，可以实现水平和垂直方向上的居中。<br>该方法适用于<strong>子盒子有宽高</strong>的情况</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>father&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span><span class=\"token number\">500</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span><span class=\"token number\">300</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">border</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span>px solid <span class=\"token hexcode\">#0a3b98</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>son&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span><span class=\"token number\">40</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#f0a238</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span>auto<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h4 id=\"（2）利用定位-margin-负值（父相子绝，方向50-）\"><a href=\"#（2）利用定位-margin-负值（父相子绝，方向50-）\" class=\"headerlink\" title=\"（2）利用定位+margin:负值（父相子绝，方向50%）\"></a>（2）利用定位+margin:负值（父相子绝，方向50%）</h4><p>父级设置相对定位，子级设置绝对定位。子级先将元素的左上角起始原点通过 <code>top:50%</code>和 <code>left:50%</code>定位到页面的中心，然后再通过 <code>margin 负值</code>来调整元素的中心点到页面的中心。<br>该方法适用于<strong>子盒子宽高已知</strong>的情况  </p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>father &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>son &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span>-<span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">/* 自身 width 的一半 */</span>\n        <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span>-<span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">/* 自身 height 的一半 */</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h4 id=\"（3）利用定位-transform（父相子绝，方向50-）\"><a href=\"#（3）利用定位-transform（父相子绝，方向50-）\" class=\"headerlink\" title=\"（3）利用定位+transform（父相子绝，方向50%）\"></a>（3）利用定位+transform（父相子绝，方向50%）</h4><p>父级设置相对定位，子级设置绝对定位。先将元素的左上角通过 <code>top:50%</code>和 <code>left:50%</code>定位到页面的中心，然后再通过 <code>transform: translate(-50%,-50%)</code> 来调整元素的中心点到页面的中心。该方法需要<strong>考虑浏览器兼容问题,不需要知道自身元素的宽高</strong></p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>father &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>son &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50%</span><span class=\"token punctuation\">;</span>\n              <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-<span class=\"token number\">50%</span>,-<span class=\"token number\">50%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h4 id=\"（4）table布局（子元素为行内块元素）\"><a href=\"#（4）table布局（子元素为行内块元素）\" class=\"headerlink\" title=\"（4）table布局（子元素为行内块元素）\"></a>（4）table布局（子元素为行内块元素）</h4><p>设置父元素为<code>display:table-cell</code>，子元素设置<code>display: inline-block</code>。利用<code>vertical-align: middle;</code>（用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式）和<code>text-align: center;</code>可以让所有的行内块级元素水平垂直居中</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>father &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table-cell<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">vertical-align</span><span class=\"token punctuation\">:</span> middle<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式*/</span>\n        <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*行内内容（例如文字）如何相对它的块父元素水平对齐方式*/</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>son &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h4 id=\"（5）flex布局（align-items-center和justify-content-center）\"><a href=\"#（5）flex布局（align-items-center和justify-content-center）\" class=\"headerlink\" title=\"（5）flex布局（align-items:center和justify-content:center）\"></a>（5）flex布局（align-items:center和justify-content:center）</h4><p>通过 <code>display: flex</code>,<code>align-items:center</code> 和 <code>justify-content:center</code>设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要<strong>考虑兼容的问题</strong>，该方法在移动端用的较多</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>father &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*flex布局*/</span>\n        <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*水平居中*/</span>\n        <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*垂直居中*/</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>son &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h4 id=\"（6）grid布局（align-items-center和justify-content-center）\"><a href=\"#（6）grid布局（align-items-center和justify-content-center）\" class=\"headerlink\" title=\"（6）grid布局（align-items:center和justify-content:center）\"></a>（6）grid布局（align-items:center和justify-content:center）</h4><p>通过 <code>display: grid</code>,<code>align-items:center</code> 和 <code>justify-content:center</code>设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>father &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*垂直居中*/</span>\n            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*水平居中*/</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> skyblue<span class=\"token punctuation\">;</span>\n\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token number\">.</span>son &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>px<span class=\"token punctuation\">;</span>\n            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>px solid red\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>son<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h2><h3 id=\"1-行内元素（text-align-center-vertical-align-middle-）\"><a href=\"#1-行内元素（text-align-center-vertical-align-middle-）\" class=\"headerlink\" title=\"1. 行内元素（text-align: center;vertical-align: middle;）\"></a>1. 行内元素（text-align: center;vertical-align: middle;）</h3><ul>\n<li>行内元素水平居中：<br>```css<br>.parent {<br>  text-align: center;<br>}</li>\n</ul>\n<pre><code>- 行内元素垂直居中：\n```css\n.son &#123;\n  vertical-align: middle;\n&#125;\n</code></pre>\n<ul>\n<li>行内元素垂直居中:子元素行高等于父元素高度<pre><code class=\"css\">.parent &#123;\n  height: 高度;\n&#125;\n.son &#123;\n  line-height: 高度;\n&#125;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"2-块级元素\"><a href=\"#2-块级元素\" class=\"headerlink\" title=\"2. 块级元素\"></a>2. 块级元素</h3><ul>\n<li>居中元素（子元素）的宽高已知</li>\n<li>居中元素宽高未知<h4 id=\"（1）利用定位-margin-auto（父相子绝，四方向0）\"><a href=\"#（1）利用定位-margin-auto（父相子绝，四方向0）\" class=\"headerlink\" title=\"（1）利用定位+margin:auto（父相子绝，四方向0）\"></a>（1）利用定位+margin:auto（父相子绝，四方向0）</h4>父级设置相对定位，子级设置绝对定位。<strong>子级设置四个方向的值都为 0</strong>，<code>margin：auto</code>。子级没有设置宽高则被拉开到与父级一样宽高；<strong>子级设置宽高</strong>，对应方向实现平分，可以实现水平和垂直方向上的居中。<br>该方法适用于<strong>子盒子有宽高</strong>的情况</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .father&#123;\n        width:500px;\n        height:300px;\n        border:1px solid #0a3b98;\n        position: relative;\n    &#125;\n    .son&#123;\n        width:100px;\n        height:40px;\n        background: #f0a238;\n        position: absolute;\n        top:0;\n        left:0;\n        right:0;\n        bottom:0;\n        margin:auto;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;father&quot;&gt;\n    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"（2）利用定位-margin-负值（父相子绝，方向50-）\"><a href=\"#（2）利用定位-margin-负值（父相子绝，方向50-）\" class=\"headerlink\" title=\"（2）利用定位+margin:负值（父相子绝，方向50%）\"></a>（2）利用定位+margin:负值（父相子绝，方向50%）</h4><p>父级设置相对定位，子级设置绝对定位。子级先将元素的左上角起始原点通过 <code>top:50%</code>和 <code>left:50%</code>定位到页面的中心，然后再通过 <code>margin 负值</code>来调整元素的中心点到页面的中心。<br>该方法适用于<strong>子盒子宽高已知</strong>的情况  </p>\n<pre><code class=\"html\">&lt;style&gt;\n    .father &#123;\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    &#125;\n    .son &#123;\n        width: 100px;\n        height: 100px;\n        background: red;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        margin-left:-50px;   /* 自身 width 的一半 */\n        margin-top:-50px;  /* 自身 height 的一半 */\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;father&quot;&gt;\n    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"（3）利用定位-transform（父相子绝，方向50-）\"><a href=\"#（3）利用定位-transform（父相子绝，方向50-）\" class=\"headerlink\" title=\"（3）利用定位+transform（父相子绝，方向50%）\"></a>（3）利用定位+transform（父相子绝，方向50%）</h4><p>父级设置相对定位，子级设置绝对定位。先将元素的左上角通过 <code>top:50%</code>和 <code>left:50%</code>定位到页面的中心，然后再通过 <code>transform: translate(-50%,-50%)</code> 来调整元素的中心点到页面的中心。该方法需要<strong>考虑浏览器兼容问题,不需要知道自身元素的宽高</strong></p>\n<pre><code class=\"html\">&lt;style&gt;\n    .father &#123;\n        position: relative;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    &#125;\n    .son &#123;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n              transform: translate(-50%,-50%);\n        width: 100px;\n        height: 100px;\n        background: red;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;father&quot;&gt;\n    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"（4）table布局（子元素为行内块元素）\"><a href=\"#（4）table布局（子元素为行内块元素）\" class=\"headerlink\" title=\"（4）table布局（子元素为行内块元素）\"></a>（4）table布局（子元素为行内块元素）</h4><p>设置父元素为<code>display:table-cell</code>，子元素设置<code>display: inline-block</code>。利用<code>vertical-align: middle;</code>（用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式）和<code>text-align: center;</code>可以让所有的行内块级元素水平垂直居中</p>\n<pre><code class=\"html\">&lt;style&gt;\n    .father &#123;\n        display: table-cell;\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n        vertical-align: middle;/*用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式*/\n        text-align: center;/*行内内容（例如文字）如何相对它的块父元素水平对齐方式*/\n    &#125;\n    .son &#123;\n        display: inline-block;\n        width: 100px;\n        height: 100px;\n        background: red;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;father&quot;&gt;\n    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"（5）flex布局（align-items-center和justify-content-center）\"><a href=\"#（5）flex布局（align-items-center和justify-content-center）\" class=\"headerlink\" title=\"（5）flex布局（align-items:center和justify-content:center）\"></a>（5）flex布局（align-items:center和justify-content:center）</h4><p>通过 <code>display: flex</code>,<code>align-items:center</code> 和 <code>justify-content:center</code>设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要<strong>考虑兼容的问题</strong>，该方法在移动端用的较多</p>\n<pre><code class=\"html\">&lt;style&gt;\n    .father &#123;\n        display: flex;/*flex布局*/\n        justify-content: center;/*水平居中*/\n        align-items: center;/*垂直居中*/\n        width: 200px;\n        height: 200px;\n        background: skyblue;\n    &#125;\n    .son &#123;\n        width: 100px;\n        height: 100px;\n        background: red;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;father&quot;&gt;\n    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h4 id=\"（6）grid布局（align-items-center和justify-content-center）\"><a href=\"#（6）grid布局（align-items-center和justify-content-center）\" class=\"headerlink\" title=\"（6）grid布局（align-items:center和justify-content:center）\"></a>（6）grid布局（align-items:center和justify-content:center）</h4><p>通过 <code>display: grid</code>,<code>align-items:center</code> 和 <code>justify-content:center</code>设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。</p>\n<pre><code class=\"html\">&lt;style&gt;\n    .father &#123;\n            display: grid;\n            align-items:center;/*垂直居中*/\n            justify-content: center;/*水平居中*/\n            width: 200px;\n            height: 200px;\n            background: skyblue;\n\n        &#125;\n        .son &#123;\n            width: 10px;\n            height: 10px;\n            border: 1px solid red\n        &#125;\n&lt;/style&gt;\n&lt;div class=&quot;father&quot;&gt;\n    &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n"},{"title":"布局方法","date":"2022-03-01T16:00:00.000Z","sidebar":"auto","_content":"---\n## 布局方法\n\n### 0. display和position\n#### display 的属性\n\n| **属性值**   | **作用**                                                                                                                                                             |\n| ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| none         | 元素不显示，并且会从文档流中移除。                                                                                                                                   |\n| block        | 块类型。会独占一行，多个元素会另起一行，默认宽度为父元素宽度，可以设置 width、height、margin 和 padding 属性。                                                       |\n| inline       | 行内元素类型。元素不会独占一行，默认宽度为内容宽度，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin。 |\n| inline-block | 默认宽度为内容宽度，可以设置宽高，同行显示。                                                                                                                         |\n| list-item    | 像块类型元素一样显示，并添加样式列表标记。                                                                                                                           |\n| table        | 此元素会作为块级表格来显示。                                                                                                                                         |\n| inherit      | 规定应该从父元素继承 display 属性的值。                                                                                                                              |\n\n##### 行内元素和块级元素特点\n\n**（1）行内元素**\n\n- **设置宽高无效；**（由内容撑开）\n- **可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；**\n- 不会自动换行；\n- 如：a,span,**img**,label,input,textarea,select,strong,u,em等等\n\n**（2）块级元素**\n\n- 可以设置宽高；\n- 设置 margin 和 padding 都有效；\n- 可以自动换行；\n- 多个块状，默认排列从上到下。\n- 如：h1-h6,p,**div**,hr,,ol,ul,li等等\n\n##### display:inline-block 什么时候会显示间隙？\n- 有空格时会有间隙，可以删除空格解决；\n- `margin`正值时，可以让`margin`使用负值解决；\n- 使用`font-size`时，可通过设置`font-size:0`、`letter-spacing`、`word-spacing`解决；\n\n#### position属性\n\n| 属性值   | 概述                                                                                                                                            |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| absolute | 生成绝对定位的元素，相对于 static 定位以外的一个父元素进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。                          |\n| relative | 生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。                                          |\n| fixed    | 生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。 |\n| static   | 默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。  |\n| inherit  | 规定从父元素继承 position 属性的值                                                                                                    |\n| sticky   | 粘滞定位。当页面要划走时，相对页面的定位方式（通讯录字母顶端定位）（absolute+fixed）                                                            |\n\n前面三者的定位方式如下：\n\n- **relative**：元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694939-58dfe7f7-2fc9-45e5-9961-a953f95496a7.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=448&size=0&status=done&style=stroke&width=447)\n\n- **fixed**：元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694841-89472ba9-b236-4098-802f-c3c26ff49466.png#align=left&display=inline&height=117&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=516&size=0&status=done&style=stroke&width=446)\n\n- **absolute**：元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了`position:relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694882-589670e0-cd52-41d4-a3ed-4ebbdfc88f32.png#align=left&display=inline&height=142&margin=%5Bobject%20Object%5D&originHeight=183&originWidth=576&size=0&status=done&style=stroke&width=446)\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694842-2764d9ed-d5fe-45f4-8ede-34a73d237f94.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=137&originWidth=516&size=0&status=done&style=stroke&width=446)\n\n\n### 1. 两栏布局(float,flex,父相子绝)（margin-left,overflow:hidden,绝对定位的left）\n\n一般两栏布局指的是**左边一栏宽度固定，右边一栏宽度自适应**，两栏布局的具体实现：\n\n- 利用浮动，将左边元素宽度设置为 200px，并且设置向左浮动`float: left;`。将右边元素的 **margin-left** 设置为 200px，宽度为 auto（默认为 auto，撑满整个父元素）。\n\n```html\n<style>\n.box{\n    overflow: hidden;/* 为父级元素添加BFC，防止下方元素飞到上方内容 */\n}\n.left {\n    float: left;\n    width: 200px;\n    background: tomato;\n}\n.right {\n    margin-left: 200px;/*左外边距200px*/\n    /* width: auto; */\n    background: gold;\n}\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用浮动，左侧元素设置固定大小，并左浮动`float: left;`，右侧元素设置 overflow: hidden; 这样右边就触发了 BFC，**BFC 的区域不会与浮动元素发生重叠**，所以两侧就不会发生重叠。\n\n```html\n<style>\n.box{\n   overflow: hidden; /* 为父级元素添加BFC，防止下方元素飞到上方内容 */\n}\n.left {\n  float: left;\n  width: 200px;\n  background: tomato;\n}\n.right {\n    overflow: hidden;/*设置浮动*/\n    background: gold;\n}\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用 flex 布局，将左边元素设置为固定宽度 100px，将右边的元素设置为 flex:1。\n\n```html\n<style>\n    .box{\n        display: flex;/*flex 布局*/\n    }\n    .left {\n        width: 100px;\n        background: tomato;\n    }\n    .right {\n        flex: 1;/* width:100%;flex:1 1 auto;*/\n        /* 默认为flex:0不索取扩大 1不缩小 auto自动宽度 */\n        background: gold;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用绝对定位，将父级元素设置为relative定位。左边元素设置为 absolute 定位，并且宽度设置为 100px。将右边元素的 **margin-left** 的值设置为 100px。(父相子绝,绝对定位的子元素脱离文档流独立出来)\n\n```html\n<style>\n    .box{\n        position:relative;\n    }\n    .left {\n        position:absolute;\n        width: 100px;\n        background: tomato;\n    }\n    .right {\n        margin-left:100px;/*左外边距100px*/\n        background: gold;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用绝对定位，将父级元素设置为relative定位。左边元素宽度设置为100px;右边元素设置为absolute定位，left为100px，其余方向定位为 0。(父相子绝,绝对定位的子元素脱离文档流独立出来)\n\n```html\n<style>\n    .box{\n        position:relative;\n    }\n    .left {\n        width: 100px;\n        background: tomato;\n    }\n    .right {\n        position:absolute;\n        top:0;\n        bottom:0;\n        right:0;\n        left:100px;/*离左边间隔100px*/\n        background: gold;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n\n### 2. 三栏布局\n\n三栏布局一般指的是页面中一共有三栏，**左右两栏宽度固定，中间自适应的布局**，三栏布局的具体实现：\n\n- 利用**绝对定位**+margin，左右两栏设置为绝对定位和宽度，中间设置对应方向大小的 margin 的值。\n\n```html\n<style>\n  .container {\n    position: relative;\n  }\n  .left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 200px;\n    background: gold;\n  }\n  .right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 200px;\n    background: gold;\n  }\n  .main {\n    margin: 0 200px;\n    background: lightgreen;\n  }\n</style>\n\n<div class=\"container\">\n    <!-- 每一栏顺序可以任意放 -->\n  <div class=\"left\">左边固定宽度</div>\n  <div class=\"main\">中间自适应</div>\n  <div class=\"right\">右边固定宽度</div>\n</div>\n```\n\n- 利用浮动+margin-left,margin-right，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的 margin 值，注意这种方式**中间一栏必须放到最后**\n\n```html\n<style>\n    .left {\n        float: left;\n        width: 200px;\n        background: coral;\n    }\n    .right {\n        float: right;\n        width: 100px;\n        background: lightblue;\n    }\n    .middle {\n        margin-left: 200px;\n        margin-right: 100px;\n        background: lightpink;\n    }\n</style>\n<div class=\"wrap\">\n    <!-- 中间一栏必须放到最后 -->\n    <div class=\"left\">左侧</div>\n    <div class=\"right\">右侧</div>\n    <div class=\"middle\">中间</div>\n</div>\n```\n\n- 利用 flex 布局，左右两栏设置固定大小，中间一栏设置为 flex:1;(width:100%;)。\n\n```html\n<style>\n    .wrap {\n        display: flex;\n    }\n    .left {\n        width: 200px;\n        background: coral;\n    }\n    .right {\n        width: 120px;\n        background: lightblue;\n    }\n    .middle {\n        background: #555;\n        flex:1;/* width: 100%; */\n    }\n</style>\n<div class=\"wrap\">\n    <!-- 每一栏按顺序放 -->\n    <div class=\"left\">左侧</div>\n    <div class=\"middle\">中间</div>\n    <div class=\"right\">右侧</div>\n</div>\n```\n\n- grid网格布局\n\n```html\n<style>\n\t.wrap {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 200px auto 120px;\n\t}\n\t.left {\n\t\tbackground: coral;\n\t}\n\t.right {\n\t\tbackground: lightblue;\n\t}\n\t.middle {\n\t\tbackground: #555;\n\t}\n</style>\n<div class=\"wrap\">\n\t<div class=\"left\">左侧</div>\n\t<div class=\"middle\">中间</div>\n\t<div class=\"right\">右侧</div>\n</div>\n```","source":"_posts/css/02.md","raw":"---\ntitle: 布局方法\ndate: 2022-03-02\ncategories:\n - CSS学习笔记\ntags:\n - CSS\nsidebar: 'auto'\n---\n---\n## 布局方法\n\n### 0. display和position\n#### display 的属性\n\n| **属性值**   | **作用**                                                                                                                                                             |\n| ------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| none         | 元素不显示，并且会从文档流中移除。                                                                                                                                   |\n| block        | 块类型。会独占一行，多个元素会另起一行，默认宽度为父元素宽度，可以设置 width、height、margin 和 padding 属性。                                                       |\n| inline       | 行内元素类型。元素不会独占一行，默认宽度为内容宽度，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin。 |\n| inline-block | 默认宽度为内容宽度，可以设置宽高，同行显示。                                                                                                                         |\n| list-item    | 像块类型元素一样显示，并添加样式列表标记。                                                                                                                           |\n| table        | 此元素会作为块级表格来显示。                                                                                                                                         |\n| inherit      | 规定应该从父元素继承 display 属性的值。                                                                                                                              |\n\n##### 行内元素和块级元素特点\n\n**（1）行内元素**\n\n- **设置宽高无效；**（由内容撑开）\n- **可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；**\n- 不会自动换行；\n- 如：a,span,**img**,label,input,textarea,select,strong,u,em等等\n\n**（2）块级元素**\n\n- 可以设置宽高；\n- 设置 margin 和 padding 都有效；\n- 可以自动换行；\n- 多个块状，默认排列从上到下。\n- 如：h1-h6,p,**div**,hr,,ol,ul,li等等\n\n##### display:inline-block 什么时候会显示间隙？\n- 有空格时会有间隙，可以删除空格解决；\n- `margin`正值时，可以让`margin`使用负值解决；\n- 使用`font-size`时，可通过设置`font-size:0`、`letter-spacing`、`word-spacing`解决；\n\n#### position属性\n\n| 属性值   | 概述                                                                                                                                            |\n| -------- | ----------------------------------------------------------------------------------------------------------------------------------------------- |\n| absolute | 生成绝对定位的元素，相对于 static 定位以外的一个父元素进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。                          |\n| relative | 生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。                                          |\n| fixed    | 生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。 |\n| static   | 默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。  |\n| inherit  | 规定从父元素继承 position 属性的值                                                                                                    |\n| sticky   | 粘滞定位。当页面要划走时，相对页面的定位方式（通讯录字母顶端定位）（absolute+fixed）                                                            |\n\n前面三者的定位方式如下：\n\n- **relative**：元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694939-58dfe7f7-2fc9-45e5-9961-a953f95496a7.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=448&size=0&status=done&style=stroke&width=447)\n\n- **fixed**：元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694841-89472ba9-b236-4098-802f-c3c26ff49466.png#align=left&display=inline&height=117&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=516&size=0&status=done&style=stroke&width=446)\n\n- **absolute**：元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了`position:relative/absolute/fixed`的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694882-589670e0-cd52-41d4-a3ed-4ebbdfc88f32.png#align=left&display=inline&height=142&margin=%5Bobject%20Object%5D&originHeight=183&originWidth=576&size=0&status=done&style=stroke&width=446)\n\n![img](https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694842-2764d9ed-d5fe-45f4-8ede-34a73d237f94.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=137&originWidth=516&size=0&status=done&style=stroke&width=446)\n\n\n### 1. 两栏布局(float,flex,父相子绝)（margin-left,overflow:hidden,绝对定位的left）\n\n一般两栏布局指的是**左边一栏宽度固定，右边一栏宽度自适应**，两栏布局的具体实现：\n\n- 利用浮动，将左边元素宽度设置为 200px，并且设置向左浮动`float: left;`。将右边元素的 **margin-left** 设置为 200px，宽度为 auto（默认为 auto，撑满整个父元素）。\n\n```html\n<style>\n.box{\n    overflow: hidden;/* 为父级元素添加BFC，防止下方元素飞到上方内容 */\n}\n.left {\n    float: left;\n    width: 200px;\n    background: tomato;\n}\n.right {\n    margin-left: 200px;/*左外边距200px*/\n    /* width: auto; */\n    background: gold;\n}\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用浮动，左侧元素设置固定大小，并左浮动`float: left;`，右侧元素设置 overflow: hidden; 这样右边就触发了 BFC，**BFC 的区域不会与浮动元素发生重叠**，所以两侧就不会发生重叠。\n\n```html\n<style>\n.box{\n   overflow: hidden; /* 为父级元素添加BFC，防止下方元素飞到上方内容 */\n}\n.left {\n  float: left;\n  width: 200px;\n  background: tomato;\n}\n.right {\n    overflow: hidden;/*设置浮动*/\n    background: gold;\n}\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用 flex 布局，将左边元素设置为固定宽度 100px，将右边的元素设置为 flex:1。\n\n```html\n<style>\n    .box{\n        display: flex;/*flex 布局*/\n    }\n    .left {\n        width: 100px;\n        background: tomato;\n    }\n    .right {\n        flex: 1;/* width:100%;flex:1 1 auto;*/\n        /* 默认为flex:0不索取扩大 1不缩小 auto自动宽度 */\n        background: gold;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用绝对定位，将父级元素设置为relative定位。左边元素设置为 absolute 定位，并且宽度设置为 100px。将右边元素的 **margin-left** 的值设置为 100px。(父相子绝,绝对定位的子元素脱离文档流独立出来)\n\n```html\n<style>\n    .box{\n        position:relative;\n    }\n    .left {\n        position:absolute;\n        width: 100px;\n        background: tomato;\n    }\n    .right {\n        margin-left:100px;/*左外边距100px*/\n        background: gold;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n- 利用绝对定位，将父级元素设置为relative定位。左边元素宽度设置为100px;右边元素设置为absolute定位，left为100px，其余方向定位为 0。(父相子绝,绝对定位的子元素脱离文档流独立出来)\n\n```html\n<style>\n    .box{\n        position:relative;\n    }\n    .left {\n        width: 100px;\n        background: tomato;\n    }\n    .right {\n        position:absolute;\n        top:0;\n        bottom:0;\n        right:0;\n        left:100px;/*离左边间隔100px*/\n        background: gold;\n    }\n</style>\n<div class=\"box\">\n    <div class=\"left\">左边</div>\n    <div class=\"right\">右边</div>\n</div>\n```\n\n\n### 2. 三栏布局\n\n三栏布局一般指的是页面中一共有三栏，**左右两栏宽度固定，中间自适应的布局**，三栏布局的具体实现：\n\n- 利用**绝对定位**+margin，左右两栏设置为绝对定位和宽度，中间设置对应方向大小的 margin 的值。\n\n```html\n<style>\n  .container {\n    position: relative;\n  }\n  .left {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 200px;\n    background: gold;\n  }\n  .right {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 200px;\n    background: gold;\n  }\n  .main {\n    margin: 0 200px;\n    background: lightgreen;\n  }\n</style>\n\n<div class=\"container\">\n    <!-- 每一栏顺序可以任意放 -->\n  <div class=\"left\">左边固定宽度</div>\n  <div class=\"main\">中间自适应</div>\n  <div class=\"right\">右边固定宽度</div>\n</div>\n```\n\n- 利用浮动+margin-left,margin-right，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的 margin 值，注意这种方式**中间一栏必须放到最后**\n\n```html\n<style>\n    .left {\n        float: left;\n        width: 200px;\n        background: coral;\n    }\n    .right {\n        float: right;\n        width: 100px;\n        background: lightblue;\n    }\n    .middle {\n        margin-left: 200px;\n        margin-right: 100px;\n        background: lightpink;\n    }\n</style>\n<div class=\"wrap\">\n    <!-- 中间一栏必须放到最后 -->\n    <div class=\"left\">左侧</div>\n    <div class=\"right\">右侧</div>\n    <div class=\"middle\">中间</div>\n</div>\n```\n\n- 利用 flex 布局，左右两栏设置固定大小，中间一栏设置为 flex:1;(width:100%;)。\n\n```html\n<style>\n    .wrap {\n        display: flex;\n    }\n    .left {\n        width: 200px;\n        background: coral;\n    }\n    .right {\n        width: 120px;\n        background: lightblue;\n    }\n    .middle {\n        background: #555;\n        flex:1;/* width: 100%; */\n    }\n</style>\n<div class=\"wrap\">\n    <!-- 每一栏按顺序放 -->\n    <div class=\"left\">左侧</div>\n    <div class=\"middle\">中间</div>\n    <div class=\"right\">右侧</div>\n</div>\n```\n\n- grid网格布局\n\n```html\n<style>\n\t.wrap {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 200px auto 120px;\n\t}\n\t.left {\n\t\tbackground: coral;\n\t}\n\t.right {\n\t\tbackground: lightblue;\n\t}\n\t.middle {\n\t\tbackground: #555;\n\t}\n</style>\n<div class=\"wrap\">\n\t<div class=\"left\">左侧</div>\n\t<div class=\"middle\">中间</div>\n\t<div class=\"right\">右侧</div>\n</div>\n```","slug":"css/02","published":1,"updated":"2022-03-23T10:41:24.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8g7000od63ubojqh9dr","content":"<hr>\n<h2 id=\"布局方法\"><a href=\"#布局方法\" class=\"headerlink\" title=\"布局方法\"></a>布局方法</h2><h3 id=\"0-display和position\"><a href=\"#0-display和position\" class=\"headerlink\" title=\"0. display和position\"></a>0. display和position</h3><h4 id=\"display-的属性\"><a href=\"#display-的属性\" class=\"headerlink\" title=\"display 的属性\"></a>display 的属性</h4><table>\n<thead>\n<tr>\n<th><strong>属性值</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不显示，并且会从文档流中移除。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块类型。会独占一行，多个元素会另起一行，默认宽度为父元素宽度，可以设置 width、height、margin 和 padding 属性。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内元素类型。元素不会独占一行，默认宽度为内容宽度，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>默认宽度为内容宽度，可以设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>像块类型元素一样显示，并添加样式列表标记。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 display 属性的值。</td>\n</tr>\n</tbody></table>\n<h5 id=\"行内元素和块级元素特点\"><a href=\"#行内元素和块级元素特点\" class=\"headerlink\" title=\"行内元素和块级元素特点\"></a>行内元素和块级元素特点</h5><p><strong>（1）行内元素</strong></p>\n<ul>\n<li><strong>设置宽高无效；</strong>（由内容撑开）</li>\n<li><strong>可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；</strong></li>\n<li>不会自动换行；</li>\n<li>如：a,span,<strong>img</strong>,label,input,textarea,select,strong,u,em等等</li>\n</ul>\n<p><strong>（2）块级元素</strong></p>\n<ul>\n<li>可以设置宽高；</li>\n<li>设置 margin 和 padding 都有效；</li>\n<li>可以自动换行；</li>\n<li>多个块状，默认排列从上到下。</li>\n<li>如：h1-h6,p,<strong>div</strong>,hr,,ol,ul,li等等</li>\n</ul>\n<h5 id=\"display-inline-block-什么时候会显示间隙？\"><a href=\"#display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"display:inline-block 什么时候会显示间隙？\"></a>display:inline-block 什么时候会显示间隙？</h5><ul>\n<li>有空格时会有间隙，可以删除空格解决；</li>\n<li><code>margin</code>正值时，可以让<code>margin</code>使用负值解决；</li>\n<li>使用<code>font-size</code>时，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li>\n</ul>\n<h4 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h4><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于 static 定位以外的一个父元素进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td>\n</tr>\n<tr>\n<td>static</td>\n<td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承 position 属性的值</td>\n</tr>\n<tr>\n<td>sticky</td>\n<td>粘滞定位。当页面要划走时，相对页面的定位方式（通讯录字母顶端定位）（absolute+fixed）</td>\n</tr>\n</tbody></table>\n<p>前面三者的定位方式如下：</p>\n<ul>\n<li><strong>relative</strong>：元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694939-58dfe7f7-2fc9-45e5-9961-a953f95496a7.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=448&size=0&status=done&style=stroke&width=447\" alt=\"img\"></p>\n<ul>\n<li><strong>fixed</strong>：元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694841-89472ba9-b236-4098-802f-c3c26ff49466.png#align=left&display=inline&height=117&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=516&size=0&status=done&style=stroke&width=446\" alt=\"img\"></p>\n<ul>\n<li><strong>absolute</strong>：元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694882-589670e0-cd52-41d4-a3ed-4ebbdfc88f32.png#align=left&display=inline&height=142&margin=%5Bobject%20Object%5D&originHeight=183&originWidth=576&size=0&status=done&style=stroke&width=446\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694842-2764d9ed-d5fe-45f4-8ede-34a73d237f94.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=137&originWidth=516&size=0&status=done&style=stroke&width=446\" alt=\"img\"></p>\n<h3 id=\"1-两栏布局-float-flex-父相子绝-（margin-left-overflow-hidden-绝对定位的left）\"><a href=\"#1-两栏布局-float-flex-父相子绝-（margin-left-overflow-hidden-绝对定位的left）\" class=\"headerlink\" title=\"1. 两栏布局(float,flex,父相子绝)（margin-left,overflow:hidden,绝对定位的left）\"></a>1. 两栏布局(float,flex,父相子绝)（margin-left,overflow:hidden,绝对定位的left）</h3><p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong>，两栏布局的具体实现：</p>\n<ul>\n<li>利用浮动，将左边元素宽度设置为 200px，并且设置向左浮动<code>float: left;</code>。将右边元素的 <strong>margin-left</strong> 设置为 200px，宽度为 auto（默认为 auto，撑满整个父元素）。</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n<span class=\"token number\">.</span>box&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/* 为父级元素添加BFC，防止下方元素飞到上方内容 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*左外边距200px*/</span>\n    <span class=\"token comment\" spellcheck=\"true\">/* width: auto; */</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>利用浮动，左侧元素设置固定大小，并左浮动<code>float: left;</code>，右侧元素设置 overflow: hidden; 这样右边就触发了 BFC，<strong>BFC 的区域不会与浮动元素发生重叠</strong>，所以两侧就不会发生重叠。</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n<span class=\"token number\">.</span>box&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n   <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 为父级元素添加BFC，防止下方元素飞到上方内容 */</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*设置浮动*/</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>利用 flex 布局，将左边元素设置为固定宽度 100px，将右边的元素设置为 flex:1。</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>box&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*flex 布局*/</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/* width:100%;flex:1 1 auto;*/</span>\n        <span class=\"token comment\" spellcheck=\"true\">/* 默认为flex:0不索取扩大 1不缩小 auto自动宽度 */</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>利用绝对定位，将父级元素设置为relative定位。左边元素设置为 absolute 定位，并且宽度设置为 100px。将右边元素的 <strong>margin-left</strong> 的值设置为 100px。(父相子绝,绝对定位的子元素脱离文档流独立出来)</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>box&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*左外边距100px*/</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>利用绝对定位，将父级元素设置为relative定位。左边元素宽度设置为100px;右边元素设置为absolute定位，left为100px，其余方向定位为 0。(父相子绝,绝对定位的子元素脱离文档流独立出来)</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>box&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> tomato<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>absolute<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">top</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">right</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">left</span><span class=\"token punctuation\">:</span><span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*离左边间隔100px*/</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右边<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"2-三栏布局\"><a href=\"#2-三栏布局\" class=\"headerlink\" title=\"2. 三栏布局\"></a>2. 三栏布局</h3><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应的布局</strong>，三栏布局的具体实现：</p>\n<ul>\n<li>利用<strong>绝对定位</strong>+margin，左右两栏设置为绝对定位和宽度，中间设置对应方向大小的 margin 的值。</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n  <span class=\"token number\">.</span>container &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gold<span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n  <span class=\"token number\">.</span>main &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n  &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 每一栏顺序可以任意放 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左边固定宽度<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>中间自适应<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右边固定宽度<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>利用浮动+margin-left,margin-right，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的 margin 值，注意这种方式<strong>中间一栏必须放到最后</strong></li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> coral<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>middle &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightpink<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 中间一栏必须放到最后 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左侧<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右侧<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>中间<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>利用 flex 布局，左右两栏设置固定大小，中间一栏设置为 flex:1;(width:100%;)。</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>wrap &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> coral<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">120</span>px<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>middle &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#555</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/* width: 100%; */</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 每一栏按顺序放 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左侧<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>中间<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右侧<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>grid网格布局</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n    <span class=\"token number\">.</span>wrap &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span>\n        <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span>px auto <span class=\"token number\">120</span>px<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>left &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> coral<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>right &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> lightblue<span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token number\">.</span>middle &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#555</span><span class=\"token punctuation\">;</span>\n    &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>左侧<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>中间<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>右侧<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"布局方法\"><a href=\"#布局方法\" class=\"headerlink\" title=\"布局方法\"></a>布局方法</h2><h3 id=\"0-display和position\"><a href=\"#0-display和position\" class=\"headerlink\" title=\"0. display和position\"></a>0. display和position</h3><h4 id=\"display-的属性\"><a href=\"#display-的属性\" class=\"headerlink\" title=\"display 的属性\"></a>display 的属性</h4><table>\n<thead>\n<tr>\n<th><strong>属性值</strong></th>\n<th><strong>作用</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>元素不显示，并且会从文档流中移除。</td>\n</tr>\n<tr>\n<td>block</td>\n<td>块类型。会独占一行，多个元素会另起一行，默认宽度为父元素宽度，可以设置 width、height、margin 和 padding 属性。</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内元素类型。元素不会独占一行，默认宽度为内容宽度，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin。</td>\n</tr>\n<tr>\n<td>inline-block</td>\n<td>默认宽度为内容宽度，可以设置宽高，同行显示。</td>\n</tr>\n<tr>\n<td>list-item</td>\n<td>像块类型元素一样显示，并添加样式列表标记。</td>\n</tr>\n<tr>\n<td>table</td>\n<td>此元素会作为块级表格来显示。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定应该从父元素继承 display 属性的值。</td>\n</tr>\n</tbody></table>\n<h5 id=\"行内元素和块级元素特点\"><a href=\"#行内元素和块级元素特点\" class=\"headerlink\" title=\"行内元素和块级元素特点\"></a>行内元素和块级元素特点</h5><p><strong>（1）行内元素</strong></p>\n<ul>\n<li><strong>设置宽高无效；</strong>（由内容撑开）</li>\n<li><strong>可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；</strong></li>\n<li>不会自动换行；</li>\n<li>如：a,span,<strong>img</strong>,label,input,textarea,select,strong,u,em等等</li>\n</ul>\n<p><strong>（2）块级元素</strong></p>\n<ul>\n<li>可以设置宽高；</li>\n<li>设置 margin 和 padding 都有效；</li>\n<li>可以自动换行；</li>\n<li>多个块状，默认排列从上到下。</li>\n<li>如：h1-h6,p,<strong>div</strong>,hr,,ol,ul,li等等</li>\n</ul>\n<h5 id=\"display-inline-block-什么时候会显示间隙？\"><a href=\"#display-inline-block-什么时候会显示间隙？\" class=\"headerlink\" title=\"display:inline-block 什么时候会显示间隙？\"></a>display:inline-block 什么时候会显示间隙？</h5><ul>\n<li>有空格时会有间隙，可以删除空格解决；</li>\n<li><code>margin</code>正值时，可以让<code>margin</code>使用负值解决；</li>\n<li>使用<code>font-size</code>时，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li>\n</ul>\n<h4 id=\"position属性\"><a href=\"#position属性\" class=\"headerlink\" title=\"position属性\"></a>position属性</h4><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>概述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>absolute</td>\n<td>生成绝对定位的元素，相对于 static 定位以外的一个父元素进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。</td>\n</tr>\n<tr>\n<td>relative</td>\n<td>生成相对定位的元素，相对于其原来的位置进行定位。元素的位置通过 left、top、right、bottom 属性进行规定。</td>\n</tr>\n<tr>\n<td>fixed</td>\n<td>生成绝对定位的元素，指定元素相对于屏幕视⼝（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变，⽐如回到顶部的按钮⼀般都是⽤此定位⽅式。</td>\n</tr>\n<tr>\n<td>static</td>\n<td>默认值，没有定位，元素出现在正常的文档流中，会忽略 top, bottom, left, right 或者 z-index 声明，块级元素从上往下纵向排布，⾏级元素从左向右排列。</td>\n</tr>\n<tr>\n<td>inherit</td>\n<td>规定从父元素继承 position 属性的值</td>\n</tr>\n<tr>\n<td>sticky</td>\n<td>粘滞定位。当页面要划走时，相对页面的定位方式（通讯录字母顶端定位）（absolute+fixed）</td>\n</tr>\n</tbody></table>\n<p>前面三者的定位方式如下：</p>\n<ul>\n<li><strong>relative</strong>：元素的定位永远是相对于元素自身位置的，和其他元素没关系，也不会影响其他元素。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694939-58dfe7f7-2fc9-45e5-9961-a953f95496a7.png#align=left&display=inline&height=105&margin=%5Bobject%20Object%5D&originHeight=105&originWidth=448&size=0&status=done&style=stroke&width=447\" alt=\"img\"></p>\n<ul>\n<li><strong>fixed</strong>：元素的定位是相对于 window （或者 iframe）边界的，和其他元素没有关系。但是它具有破坏性，会导致其他元素位置的变化。</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694841-89472ba9-b236-4098-802f-c3c26ff49466.png#align=left&display=inline&height=117&margin=%5Bobject%20Object%5D&originHeight=135&originWidth=516&size=0&status=done&style=stroke&width=446\" alt=\"img\"></p>\n<ul>\n<li><strong>absolute</strong>：元素的定位相对于前两者要复杂许多。如果为 absolute 设置了 top、left，浏览器会根据什么去确定它的纵向和横向的偏移量呢？答案是浏览器会递归查找该元素的所有父元素，如果找到一个设置了<code>position:relative/absolute/fixed</code>的元素，就以该元素为基准定位，如果没找到，就以浏览器边界定位。如下两个图所示：</li>\n</ul>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694882-589670e0-cd52-41d4-a3ed-4ebbdfc88f32.png#align=left&display=inline&height=142&margin=%5Bobject%20Object%5D&originHeight=183&originWidth=576&size=0&status=done&style=stroke&width=446\" alt=\"img\"></p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/1500604/1603554694842-2764d9ed-d5fe-45f4-8ede-34a73d237f94.png#align=left&display=inline&height=118&margin=%5Bobject%20Object%5D&originHeight=137&originWidth=516&size=0&status=done&style=stroke&width=446\" alt=\"img\"></p>\n<h3 id=\"1-两栏布局-float-flex-父相子绝-（margin-left-overflow-hidden-绝对定位的left）\"><a href=\"#1-两栏布局-float-flex-父相子绝-（margin-left-overflow-hidden-绝对定位的left）\" class=\"headerlink\" title=\"1. 两栏布局(float,flex,父相子绝)（margin-left,overflow:hidden,绝对定位的left）\"></a>1. 两栏布局(float,flex,父相子绝)（margin-left,overflow:hidden,绝对定位的left）</h3><p>一般两栏布局指的是<strong>左边一栏宽度固定，右边一栏宽度自适应</strong>，两栏布局的具体实现：</p>\n<ul>\n<li>利用浮动，将左边元素宽度设置为 200px，并且设置向左浮动<code>float: left;</code>。将右边元素的 <strong>margin-left</strong> 设置为 200px，宽度为 auto（默认为 auto，撑满整个父元素）。</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n.box&#123;\n    overflow: hidden;/* 为父级元素添加BFC，防止下方元素飞到上方内容 */\n&#125;\n.left &#123;\n    float: left;\n    width: 200px;\n    background: tomato;\n&#125;\n.right &#123;\n    margin-left: 200px;/*左外边距200px*/\n    /* width: auto; */\n    background: gold;\n&#125;\n&lt;/style&gt;\n&lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>利用浮动，左侧元素设置固定大小，并左浮动<code>float: left;</code>，右侧元素设置 overflow: hidden; 这样右边就触发了 BFC，<strong>BFC 的区域不会与浮动元素发生重叠</strong>，所以两侧就不会发生重叠。</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n.box&#123;\n   overflow: hidden; /* 为父级元素添加BFC，防止下方元素飞到上方内容 */\n&#125;\n.left &#123;\n  float: left;\n  width: 200px;\n  background: tomato;\n&#125;\n.right &#123;\n    overflow: hidden;/*设置浮动*/\n    background: gold;\n&#125;\n&lt;/style&gt;\n&lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>利用 flex 布局，将左边元素设置为固定宽度 100px，将右边的元素设置为 flex:1。</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .box&#123;\n        display: flex;/*flex 布局*/\n    &#125;\n    .left &#123;\n        width: 100px;\n        background: tomato;\n    &#125;\n    .right &#123;\n        flex: 1;/* width:100%;flex:1 1 auto;*/\n        /* 默认为flex:0不索取扩大 1不缩小 auto自动宽度 */\n        background: gold;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>利用绝对定位，将父级元素设置为relative定位。左边元素设置为 absolute 定位，并且宽度设置为 100px。将右边元素的 <strong>margin-left</strong> 的值设置为 100px。(父相子绝,绝对定位的子元素脱离文档流独立出来)</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .box&#123;\n        position:relative;\n    &#125;\n    .left &#123;\n        position:absolute;\n        width: 100px;\n        background: tomato;\n    &#125;\n    .right &#123;\n        margin-left:100px;/*左外边距100px*/\n        background: gold;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>利用绝对定位，将父级元素设置为relative定位。左边元素宽度设置为100px;右边元素设置为absolute定位，left为100px，其余方向定位为 0。(父相子绝,绝对定位的子元素脱离文档流独立出来)</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .box&#123;\n        position:relative;\n    &#125;\n    .left &#123;\n        width: 100px;\n        background: tomato;\n    &#125;\n    .right &#123;\n        position:absolute;\n        top:0;\n        bottom:0;\n        right:0;\n        left:100px;/*离左边间隔100px*/\n        background: gold;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;box&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左边&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右边&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<h3 id=\"2-三栏布局\"><a href=\"#2-三栏布局\" class=\"headerlink\" title=\"2. 三栏布局\"></a>2. 三栏布局</h3><p>三栏布局一般指的是页面中一共有三栏，<strong>左右两栏宽度固定，中间自适应的布局</strong>，三栏布局的具体实现：</p>\n<ul>\n<li>利用<strong>绝对定位</strong>+margin，左右两栏设置为绝对定位和宽度，中间设置对应方向大小的 margin 的值。</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n  .container &#123;\n    position: relative;\n  &#125;\n  .left &#123;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 200px;\n    background: gold;\n  &#125;\n  .right &#123;\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 200px;\n    background: gold;\n  &#125;\n  .main &#123;\n    margin: 0 200px;\n    background: lightgreen;\n  &#125;\n&lt;/style&gt;\n\n&lt;div class=&quot;container&quot;&gt;\n    &lt;!-- 每一栏顺序可以任意放 --&gt;\n  &lt;div class=&quot;left&quot;&gt;左边固定宽度&lt;/div&gt;\n  &lt;div class=&quot;main&quot;&gt;中间自适应&lt;/div&gt;\n  &lt;div class=&quot;right&quot;&gt;右边固定宽度&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>利用浮动+margin-left,margin-right，左右两栏设置固定大小，并设置对应方向的浮动。中间一栏设置左右两个方向的 margin 值，注意这种方式<strong>中间一栏必须放到最后</strong></li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .left &#123;\n        float: left;\n        width: 200px;\n        background: coral;\n    &#125;\n    .right &#123;\n        float: right;\n        width: 100px;\n        background: lightblue;\n    &#125;\n    .middle &#123;\n        margin-left: 200px;\n        margin-right: 100px;\n        background: lightpink;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;wrap&quot;&gt;\n    &lt;!-- 中间一栏必须放到最后 --&gt;\n    &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt;\n    &lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>利用 flex 布局，左右两栏设置固定大小，中间一栏设置为 flex:1;(width:100%;)。</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .wrap &#123;\n        display: flex;\n    &#125;\n    .left &#123;\n        width: 200px;\n        background: coral;\n    &#125;\n    .right &#123;\n        width: 120px;\n        background: lightblue;\n    &#125;\n    .middle &#123;\n        background: #555;\n        flex:1;/* width: 100%; */\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;wrap&quot;&gt;\n    &lt;!-- 每一栏按顺序放 --&gt;\n    &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt;\n    &lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>grid网格布局</li>\n</ul>\n<pre><code class=\"html\">&lt;style&gt;\n    .wrap &#123;\n        display: grid;\n        grid-template-columns: 200px auto 120px;\n    &#125;\n    .left &#123;\n        background: coral;\n    &#125;\n    .right &#123;\n        background: lightblue;\n    &#125;\n    .middle &#123;\n        background: #555;\n    &#125;\n&lt;/style&gt;\n&lt;div class=&quot;wrap&quot;&gt;\n    &lt;div class=&quot;left&quot;&gt;左侧&lt;/div&gt;\n    &lt;div class=&quot;middle&quot;&gt;中间&lt;/div&gt;\n    &lt;div class=&quot;right&quot;&gt;右侧&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n"},{"title":"字符串常用方法","date":"2022-03-02T16:00:00.000Z","sidebar":"auto","_content":"---\n\n## 字符串常用方法\n### 0. 属性:String.length\n### 1. 操作方法\n\n- 使用赋值操作符`（+, +=）`连接合并字符串\n- `substring(indexStart[, indexEnd])`:返回一个字符串在开始索引到结束索引之间的一个子集(indexStart,indexEnd], 或从开始索引直到字符串的末尾的一个子集。\n- `toLowerCase()、 toUpperCase()`:将调用该方法的字符串值转为小写/大写形式，并返回\n- `chatAt(index)`:从一个字符串中返回指定下标的字符。\n- `indexOf(searchValue [, fromIndex])`:返回调用它的 String 对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。\n```js\n\"Blue Whale\".indexOf(\"Blue\")       // 返回 0\n\"Blue Whale\".indexOf(\"Blute\")      // 返回 -1\n\"Blue Whale\".indexOf(\"Whale\", 0)   // 返回 5\n\"Blue Whale\".indexOf(\"Whale\", 5)   // 返回 5\n\"Blue Whale\".indexOf(\"\", -1)       // 返回 0\n\"Blue Whale\".indexOf(\"\", 9)        // 返回 9\n\"Blue Whale\".indexOf(\"\", 10)       // 返回 10\n\"Blue Whale\".indexOf(\"\", 11)       // 返回 10\n```\n- `includes(searchString[, position])`:判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。\n\n### 2. 转换方法\n- `split([separator[, limit]])`:使用指定的分隔符字符串将一个String对象分割成子字符串数组\n\n```js\n//查找字符串中的 0 或多个空格，并返回找到的前 3 个分割元素（splits）\nvar myString = \"Hello World. How are you doing?\";\nvar splits = myString.split(\" \", 3);\n\nconsole.log(splits);\n//[\"Hello\", \"World.\", \"How\"]\n```\n\n### 3. 模板匹配方法\n- `replace(regexp|substr, newSubStr|function)`:返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。\n```js\nlet text = \"cat, bat, sat, fat\";\nlet result = text.replace(\"at\", \"ond\");\nconsole.log(result); // \"cond, bat, sat, fat\"\n```\n```js\n//正则表达式包含有全局替换(g)和忽略大小写(i)的选项,这使得replace方法用'oranges'替换掉了所有出现的\"apples\".\nvar re = /apples/gi;\nvar str = \"Apples are round, and apples are juicy.\";\nvar newstr = str.replace(re, \"oranges\");\n\n// oranges are round, and oranges are juicy.\nconsole.log(newstr);\n```","source":"_posts/JavaScript/02.md","raw":"---\ntitle: 字符串常用方法\ndate: 2022-03-03\ncategories:\n - JavaScript数据结构与算法笔记\ntags:\n - JavaScript\nsidebar: 'auto'\n---\n---\n\n## 字符串常用方法\n### 0. 属性:String.length\n### 1. 操作方法\n\n- 使用赋值操作符`（+, +=）`连接合并字符串\n- `substring(indexStart[, indexEnd])`:返回一个字符串在开始索引到结束索引之间的一个子集(indexStart,indexEnd], 或从开始索引直到字符串的末尾的一个子集。\n- `toLowerCase()、 toUpperCase()`:将调用该方法的字符串值转为小写/大写形式，并返回\n- `chatAt(index)`:从一个字符串中返回指定下标的字符。\n- `indexOf(searchValue [, fromIndex])`:返回调用它的 String 对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。\n```js\n\"Blue Whale\".indexOf(\"Blue\")       // 返回 0\n\"Blue Whale\".indexOf(\"Blute\")      // 返回 -1\n\"Blue Whale\".indexOf(\"Whale\", 0)   // 返回 5\n\"Blue Whale\".indexOf(\"Whale\", 5)   // 返回 5\n\"Blue Whale\".indexOf(\"\", -1)       // 返回 0\n\"Blue Whale\".indexOf(\"\", 9)        // 返回 9\n\"Blue Whale\".indexOf(\"\", 10)       // 返回 10\n\"Blue Whale\".indexOf(\"\", 11)       // 返回 10\n```\n- `includes(searchString[, position])`:判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。\n\n### 2. 转换方法\n- `split([separator[, limit]])`:使用指定的分隔符字符串将一个String对象分割成子字符串数组\n\n```js\n//查找字符串中的 0 或多个空格，并返回找到的前 3 个分割元素（splits）\nvar myString = \"Hello World. How are you doing?\";\nvar splits = myString.split(\" \", 3);\n\nconsole.log(splits);\n//[\"Hello\", \"World.\", \"How\"]\n```\n\n### 3. 模板匹配方法\n- `replace(regexp|substr, newSubStr|function)`:返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。\n```js\nlet text = \"cat, bat, sat, fat\";\nlet result = text.replace(\"at\", \"ond\");\nconsole.log(result); // \"cond, bat, sat, fat\"\n```\n```js\n//正则表达式包含有全局替换(g)和忽略大小写(i)的选项,这使得replace方法用'oranges'替换掉了所有出现的\"apples\".\nvar re = /apples/gi;\nvar str = \"Apples are round, and apples are juicy.\";\nvar newstr = str.replace(re, \"oranges\");\n\n// oranges are round, and oranges are juicy.\nconsole.log(newstr);\n```","slug":"JavaScript/02","published":1,"updated":"2022-03-23T10:42:05.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl13gk8g9000td63u84un6cc2","content":"<hr>\n<h2 id=\"字符串常用方法\"><a href=\"#字符串常用方法\" class=\"headerlink\" title=\"字符串常用方法\"></a>字符串常用方法</h2><h3 id=\"0-属性-String-length\"><a href=\"#0-属性-String-length\" class=\"headerlink\" title=\"0. 属性:String.length\"></a>0. 属性:String.length</h3><h3 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1. 操作方法\"></a>1. 操作方法</h3><ul>\n<li>使用赋值操作符<code>（+, +=）</code>连接合并字符串</li>\n<li><code>substring(indexStart[, indexEnd])</code>:返回一个字符串在开始索引到结束索引之间的一个子集(indexStart,indexEnd], 或从开始索引直到字符串的末尾的一个子集。</li>\n<li><code>toLowerCase()、 toUpperCase()</code>:将调用该方法的字符串值转为小写/大写形式，并返回</li>\n<li><code>chatAt(index)</code>:从一个字符串中返回指定下标的字符。</li>\n<li><code>indexOf(searchValue [, fromIndex])</code>:返回调用它的 String 对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blue\"</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\">// 返回 0</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Blute\"</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\">// 返回 -1</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Whale\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">// 返回 5</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Whale\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\">// 返回 5</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\">// 返回 0</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\" spellcheck=\"true\">// 返回 9</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\">// 返回 10</span>\n<span class=\"token string\">\"Blue Whale\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\">// 返回 10</span>\n</code></pre>\n</li>\n<li><code>includes(searchString[, position])</code>:判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</li>\n</ul>\n<h3 id=\"2-转换方法\"><a href=\"#2-转换方法\" class=\"headerlink\" title=\"2. 转换方法\"></a>2. 转换方法</h3><ul>\n<li><code>split([separator[, limit]])</code>:使用指定的分隔符字符串将一个String对象分割成子字符串数组</li>\n</ul>\n<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token comment\" spellcheck=\"true\">//查找字符串中的 0 或多个空格，并返回找到的前 3 个分割元素（splits）</span>\n<span class=\"token keyword\">var</span> myString <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World. How are you doing?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> splits <span class=\"token operator\">=</span> myString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//[\"Hello\", \"World.\", \"How\"]</span>\n</code></pre>\n<h3 id=\"3-模板匹配方法\"><a href=\"#3-模板匹配方法\" class=\"headerlink\" title=\"3. 模板匹配方法\"></a>3. 模板匹配方法</h3><ul>\n<li><code>replace(regexp|substr, newSubStr|function)</code>:返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。<pre class=\" language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"cat, bat, sat, fat\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ond\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// \"cond, bat, sat, fat\"</span>\n</code></pre>\n```js<br>//正则表达式包含有全局替换(g)和忽略大小写(i)的选项,这使得replace方法用’oranges’替换掉了所有出现的”apples”.<br>var re = /apples/gi;<br>var str = “Apples are round, and apples are juicy.”;<br>var newstr = str.replace(re, “oranges”);</li>\n</ul>\n<p>// oranges are round, and oranges are juicy.<br>console.log(newstr);<br>```</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<hr>\n<h2 id=\"字符串常用方法\"><a href=\"#字符串常用方法\" class=\"headerlink\" title=\"字符串常用方法\"></a>字符串常用方法</h2><h3 id=\"0-属性-String-length\"><a href=\"#0-属性-String-length\" class=\"headerlink\" title=\"0. 属性:String.length\"></a>0. 属性:String.length</h3><h3 id=\"1-操作方法\"><a href=\"#1-操作方法\" class=\"headerlink\" title=\"1. 操作方法\"></a>1. 操作方法</h3><ul>\n<li>使用赋值操作符<code>（+, +=）</code>连接合并字符串</li>\n<li><code>substring(indexStart[, indexEnd])</code>:返回一个字符串在开始索引到结束索引之间的一个子集(indexStart,indexEnd], 或从开始索引直到字符串的末尾的一个子集。</li>\n<li><code>toLowerCase()、 toUpperCase()</code>:将调用该方法的字符串值转为小写/大写形式，并返回</li>\n<li><code>chatAt(index)</code>:从一个字符串中返回指定下标的字符。</li>\n<li><code>indexOf(searchValue [, fromIndex])</code>:返回调用它的 String 对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。<pre><code class=\"js\">&quot;Blue Whale&quot;.indexOf(&quot;Blue&quot;)       // 返回 0\n&quot;Blue Whale&quot;.indexOf(&quot;Blute&quot;)      // 返回 -1\n&quot;Blue Whale&quot;.indexOf(&quot;Whale&quot;, 0)   // 返回 5\n&quot;Blue Whale&quot;.indexOf(&quot;Whale&quot;, 5)   // 返回 5\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;, -1)       // 返回 0\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;, 9)        // 返回 9\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;, 10)       // 返回 10\n&quot;Blue Whale&quot;.indexOf(&quot;&quot;, 11)       // 返回 10\n</code></pre>\n</li>\n<li><code>includes(searchString[, position])</code>:判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</li>\n</ul>\n<h3 id=\"2-转换方法\"><a href=\"#2-转换方法\" class=\"headerlink\" title=\"2. 转换方法\"></a>2. 转换方法</h3><ul>\n<li><code>split([separator[, limit]])</code>:使用指定的分隔符字符串将一个String对象分割成子字符串数组</li>\n</ul>\n<pre><code class=\"js\">//查找字符串中的 0 或多个空格，并返回找到的前 3 个分割元素（splits）\nvar myString = &quot;Hello World. How are you doing?&quot;;\nvar splits = myString.split(&quot; &quot;, 3);\n\nconsole.log(splits);\n//[&quot;Hello&quot;, &quot;World.&quot;, &quot;How&quot;]\n</code></pre>\n<h3 id=\"3-模板匹配方法\"><a href=\"#3-模板匹配方法\" class=\"headerlink\" title=\"3. 模板匹配方法\"></a>3. 模板匹配方法</h3><ul>\n<li><code>replace(regexp|substr, newSubStr|function)</code>:返回一个由替换值（replacement）替换部分或所有的模式（pattern）匹配项后的新字符串。<pre><code class=\"js\">let text = &quot;cat, bat, sat, fat&quot;;\nlet result = text.replace(&quot;at&quot;, &quot;ond&quot;);\nconsole.log(result); // &quot;cond, bat, sat, fat&quot;\n</code></pre>\n```js<br>//正则表达式包含有全局替换(g)和忽略大小写(i)的选项,这使得replace方法用’oranges’替换掉了所有出现的”apples”.<br>var re = /apples/gi;<br>var str = “Apples are round, and apples are juicy.”;<br>var newstr = str.replace(re, “oranges”);</li>\n</ul>\n<p>// oranges are round, and oranges are juicy.<br>console.log(newstr);<br>```</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl13gk8fz0009d63uai7p9e8w","category_id":"cl13gk8fu0004d63u15dj1vtb","_id":"cl13gk8g4000hd63uhcnq5kjd"},{"post_id":"cl13gk8fp0001d63uen0eeufe","category_id":"cl13gk8fu0004d63u15dj1vtb","_id":"cl13gk8g6000md63uedk0evlh"},{"post_id":"cl13gk8g0000ad63uh5xxerpu","category_id":"cl13gk8fu0004d63u15dj1vtb","_id":"cl13gk8g7000pd63ualjl2z58"},{"post_id":"cl13gk8ft0003d63u7hqm7gp6","category_id":"cl13gk8fu0004d63u15dj1vtb","_id":"cl13gk8g9000ud63u25ii5dev"},{"post_id":"cl13gk8g3000gd63ud3yc458h","category_id":"cl13gk8fu0004d63u15dj1vtb","_id":"cl13gk8ga000wd63uc59f0y4h"},{"post_id":"cl13gk8fw0007d63ucjdk0hab","category_id":"cl13gk8fu0004d63u15dj1vtb","_id":"cl13gk8gb0010d63u9wkdh6ba"},{"post_id":"cl13gk8g9000td63u84un6cc2","category_id":"cl13gk8g7000qd63ueek9bn0u","_id":"cl13gk8gb0012d63u9lf78y36"},{"post_id":"cl13gk8g2000ed63ugl6i92ub","category_id":"cl13gk8g7000qd63ueek9bn0u","_id":"cl13gk8gc0015d63ub61s8hpp"},{"post_id":"cl13gk8g5000ld63u8muobfya","category_id":"cl13gk8ga000xd63ucb2535jh","_id":"cl13gk8gc0017d63u323ea44f"},{"post_id":"cl13gk8g7000od63ubojqh9dr","category_id":"cl13gk8ga000xd63ucb2535jh","_id":"cl13gk8gc0019d63u0tkl9r76"}],"PostTag":[{"post_id":"cl13gk8fz0009d63uai7p9e8w","tag_id":"cl13gk8fw0005d63ud4hi81kb","_id":"cl13gk8g2000dd63u318f7tep"},{"post_id":"cl13gk8fp0001d63uen0eeufe","tag_id":"cl13gk8fw0005d63ud4hi81kb","_id":"cl13gk8g3000fd63uhk61c1sd"},{"post_id":"cl13gk8g0000ad63uh5xxerpu","tag_id":"cl13gk8fw0005d63ud4hi81kb","_id":"cl13gk8g5000kd63u1c0x3dmx"},{"post_id":"cl13gk8ft0003d63u7hqm7gp6","tag_id":"cl13gk8fw0005d63ud4hi81kb","_id":"cl13gk8g7000nd63uf950a66u"},{"post_id":"cl13gk8g3000gd63ud3yc458h","tag_id":"cl13gk8fw0005d63ud4hi81kb","_id":"cl13gk8g8000sd63u8rkthumb"},{"post_id":"cl13gk8fw0007d63ucjdk0hab","tag_id":"cl13gk8fw0005d63ud4hi81kb","_id":"cl13gk8g9000vd63u48us8bbt"},{"post_id":"cl13gk8g9000td63u84un6cc2","tag_id":"cl13gk8g8000rd63uhspr4fiw","_id":"cl13gk8ga000zd63uda6wex55"},{"post_id":"cl13gk8g2000ed63ugl6i92ub","tag_id":"cl13gk8g8000rd63uhspr4fiw","_id":"cl13gk8gb0011d63uaue8e5j4"},{"post_id":"cl13gk8g5000ld63u8muobfya","tag_id":"cl13gk8ga000yd63uc251bddv","_id":"cl13gk8gc0016d63u98pnc1gr"},{"post_id":"cl13gk8g7000od63ubojqh9dr","tag_id":"cl13gk8ga000yd63uc251bddv","_id":"cl13gk8gc0018d63u9rmhbh2e"}],"Tag":[{"name":"Computer","_id":"cl13gk8fw0005d63ud4hi81kb"},{"name":"JavaScript","_id":"cl13gk8g8000rd63uhspr4fiw"},{"name":"CSS","_id":"cl13gk8ga000yd63uc251bddv"}]}}