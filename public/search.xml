<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>水平垂直居中</title>
      <link href="/2022/03/02/css/01/"/>
      <url>/2022/03/02/css/01/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="1-行内元素"><a href="#1-行内元素" class="headerlink" title="1. 行内元素"></a>1. 行内元素</h3><ul><li>行内元素水平居中：<br>```css<br>.parent {<br>  text-align: center;<br>}</li></ul><pre><code>- 行内元素垂直居中：```css.son &#123;  vertical-align: middle;&#125;</code></pre><ul><li>行内元素垂直居中:子元素行高等于父元素高度<pre class=" language-css"><code class="language-css"><span class="token number">.</span>parent &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 高度<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span><span class="token number">.</span>son &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 高度<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="1-块级元素"><a href="#1-块级元素" class="headerlink" title="1. 块级元素"></a>1. 块级元素</h3><ul><li>居中元素（子元素）的宽高已知</li><li>居中元素宽高未知<h4 id="（1）利用定位-margin-auto"><a href="#（1）利用定位-margin-auto" class="headerlink" title="（1）利用定位+margin:auto"></a>（1）利用定位+margin:auto</h4>父级设置相对定位，子级设置绝对定位。<strong>子级设置四个方向的值都为 0</strong>，<code>margin：auto</code>。子级没有设置宽高则被拉开到与父级一样宽高；<strong>子级设置宽高</strong>，对应方向实现平分，可以实现水平和垂直方向上的居中。<br>该方法适用于<strong>子盒子有宽高</strong>的情况<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token number">.</span>father&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">500</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#0a3b98</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>  <span class="token number">.</span>son&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f0a238</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span>  &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="（2）利用定位-margin-负值"><a href="#（2）利用定位-margin-负值" class="headerlink" title="（2）利用定位+margin:负值"></a>（2）利用定位+margin:负值</h4><p>父级设置相对定位，子级设置绝对定位。子级先将元素的左上角起始原点通过 <code>top:50%</code>和 <code>left:50%</code>定位到页面的中心，然后再通过 <code>margin 负值</code>来调整元素的中心点到页面的中心。<br>该方法适用于<strong>子盒子宽高已知</strong>的情况  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>father &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token number">.</span>son &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span>-<span class="token number">50</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 自身 width 的一半 */</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span>-<span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 自身 height 的一半 */</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="（3）利用定位-transform"><a href="#（3）利用定位-transform" class="headerlink" title="（3）利用定位+transform"></a>（3）利用定位+transform</h4><p>父级设置相对定位，子级设置绝对定位。先将元素的左上角通过 <code>top:50%</code>和 <code>left:50%</code>定位到页面的中心，然后再通过 <code>transform: translate(-50%,-50%)</code> 来调整元素的中心点到页面的中心。该方法需要<strong>考虑浏览器兼容问题,不需要知道自身元素的宽高</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>father &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token number">.</span>son &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="（4）table布局"><a href="#（4）table布局" class="headerlink" title="（4）table布局"></a>（4）table布局</h4><p>设置父元素为<code>display:table-cell</code>，子元素设置<code>display: inline-block</code>。利用<code>vertical-align: middle;</code>（用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式）和<code>text-align: center;</code>可以让所有的行内块级元素水平垂直居中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>father &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式*/</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*行内内容（例如文字）如何相对它的块父元素水平对齐方式*/</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token number">.</span>son &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="（5）flex布局"><a href="#（5）flex布局" class="headerlink" title="（5）flex布局"></a>（5）flex布局</h4><p>通过 <code>display: flex</code>,<code>align-items:center</code> 和 <code>justify-content:center</code>设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。该方法要<strong>考虑兼容的问题</strong>，该方法在移动端用的较多</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>father &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*flex布局*/</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*水平居中*/</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*垂直居中*/</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    <span class="token number">.</span>son &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="（6）grid布局"><a href="#（6）grid布局" class="headerlink" title="（6）grid布局"></a>（6）grid布局</h4><p>通过 <code>display: grid</code>,<code>align-items:center</code> 和 <code>justify-content:center</code>设置容器的垂直和水平方向上为居中对齐，然后它的子元素也可以实现垂直和水平的居中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">.</span>father &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*垂直居中*/</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*水平居中*/</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>        <span class="token number">.</span>son &amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型</title>
      <link href="/2022/03/02/css/02/"/>
      <url>/2022/03/02/css/02/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>一个盒子由四个部分组成：content、padding、border、margin</p><h3 id="标准盒子模型"><a href="#标准盒子模型" class="headerlink" title="标准盒子模型"></a>标准盒子模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603600820746-e10daafa-451a-454e-9705-f8c358769d5b.png#align=left&display=inline&height=366&margin=%5Bobject%20Object%5D&originHeight=455&originWidth=746&size=0&status=done&style=none&width=600" alt="image"></p><h3 id="IE盒子模型"><a href="#IE盒子模型" class="headerlink" title="IE盒子模型"></a>IE盒子模型</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603600820555-dc6ed390-d47e-412b-942a-857bbe5f280d.png?x-oss-process=image/resize,w_746#align=left&display=inline&height=368&margin=%5Bobject%20Object%5D&originHeight=462&originWidth=791&size=0&status=done&style=none&width=630" alt="img"></p><p>标准盒模型和 IE 盒模型的区别在于设置 width 和 height 时，所对应的范围不同：</p><ul><li><strong>标准盒模型的 width 和 height 属性的范围只包含了 content</strong></li><li>IE 盒模型的 width 和 height 属性的范围包含了 border、padding 和 content。  </li></ul><p>可以通过修改元素的 box-sizing 属性来改变元素的盒模型：</p><ul><li><code>box-sizing: content-box</code>表示标准盒模型（默认值）</li><li><code>box-sizing: border-box</code>表示 IE 盒模型（怪异盒模型）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回流和重绘</title>
      <link href="/2022/03/02/css/03/"/>
      <url>/2022/03/02/css/03/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>回流/重排(reflow)和重绘(repaint)<br>可以把每个元素理解为一个盒子,在浏览器解析过程中,会触发回流和重绘.  </p><ul><li>回流/重排：布局引擎会根据各种样式计算每个盒子在页面上的大小与位置</li><li>重绘：当计算好盒模型的位置、大小及其他属性后，浏览器根据每个盒子特性进行绘制</li></ul><p>页面渲染过程：</p><ul><li>解析 HTML，构建 <strong>DOM 树</strong></li><li>解析 CSS ，生成 <strong>CSS 规则树</strong></li><li>合并 DOM 树和 CSS 规则树，生成 <strong>render树/渲染树</strong></li><li><strong>布局</strong> render 树（ 回流：Layout / reflow ），负责各元素位置、大小的计算</li><li><strong>绘制</strong> render 树（ 重绘：paint / repaint ），绘制页面像素信息</li><li>浏览器会将各层的像素信息发送给 GPU，<strong>GPU 将各层像素信息合成</strong>（ composite ），显示在屏幕上  </li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png"></p><h3 id="如何触发"><a href="#如何触发" class="headerlink" title="如何触发"></a>如何触发</h3><h4 id="回流即布局即计算位置和大小"><a href="#回流即布局即计算位置和大小" class="headerlink" title="回流即布局即计算位置和大小"></a>回流即布局即计算位置和大小</h4><p>回流触发的情况：  </p><ul><li>添加或删除可见的DOM元素</li><li>元素的位置发生变化</li><li>元素的大小发生变化（包括外边距、内边框、边框大小、高度和宽度等）</li><li>内容发生变化，比如文本变化或图片被另一个不同尺寸的图片所替代</li><li>页面初始渲染的时候（这避免不了）</li><li>浏览器的窗口尺寸变化（因为回流是根据视口的大小来计算元素的位置和大小的）</li></ul><h4 id="重绘即像素，触发回流一定会触发重绘"><a href="#重绘即像素，触发回流一定会触发重绘" class="headerlink" title="重绘即像素，触发回流一定会触发重绘"></a>重绘即像素，触发回流一定会触发重绘</h4><ul><li>元素移动位置时，等等（回流+重绘）</li><li>颜色修改</li><li>文本方向修改</li><li>阴影修改</li></ul><h3 id="如何减少"><a href="#如何减少" class="headerlink" title="如何减少"></a>如何减少</h3><p>避免回流：</p><ul><li>如果想设定元素的样式，通过改变元素的 <strong>class 类名</strong> (尽可能在 DOM 树的最里层)</li><li>避免设置多项内联样式</li><li>避免使用 table 布局，table 中每个元素的大小以及内容的改动，都会导致整个 table 的重新计算</li><li>对于那些复杂的动画，对其设置 position: fixed/absolute，<strong>尽可能地使元素脱离文档流，从而减少对其他元素的影响</strong></li><li>可以使用<strong>css3硬件加速</strong>，可以让transform、opacity、filters这些动画不会引起回流重绘</li><li>避免使用 CSS 的 JavaScript 表达式</li><li>可以使用<strong>变量的形式缓存</strong>起来，待计算完毕再提交给浏览器发出重计算请求<pre><code>const el = document.getElementById(&#39;el&#39;)for(let i=0;i&lt;10;i++) &#123;  el.style.top  = el.offsetTop  + 10 + &quot;px&quot;;  el.style.left = el.offsetLeft + 10 + &quot;px&quot;;&#125;</code></pre>```<br>// 缓存offsetLeft与offsetTop的值<br>const el = document.getElementById(‘el’)<br>let offLeft = el.offsetLeft, offTop = el.offsetTop</li></ul><p>// 在JS层面进行计算<br>for(let i=0;i&lt;10;i++) {<br>  offLeft += 10<br>  offTop  += 10<br>}</p><p>// 一次性将计算结果应用到DOM上<br>el.style.left = offLeft + “px”<br>el.style.top = offTop  + “px”</p><pre><code>- 可以使用**类名**去合并样式</code></pre><p>const container = document.getElementById(‘container’)<br>container.style.width = ‘100px’<br>container.style.height = ‘200px’<br>container.style.border = ‘10px solid red’<br>container.style.color = ‘red</p><pre><code></code></pre><style>    .basic_style {        width: 100px;        height: 200px;        border: 10px solid red;        color: red;    }</style><script>    const container = document.getElementById('container')    container.classList.add('basic_style')</script><p>```</p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行内元素和块级元素</title>
      <link href="/2022/03/02/css/04/"/>
      <url>/2022/03/02/css/04/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="行内元素和块级元素：display-的-block、inline-和-inline-block-的区别"><a href="#行内元素和块级元素：display-的-block、inline-和-inline-block-的区别" class="headerlink" title="行内元素和块级元素：display 的 block、inline 和 inline-block 的区别"></a>行内元素和块级元素：display 的 block、inline 和 inline-block 的区别</h2><p>（1）<strong>block</strong>：会独占一行，多个元素会另起一行，可以设置 width、height、margin 和 padding 属性；</p><p>（2）<strong>inline</strong>：元素不会独占一行，设置 width、height 属性无效。但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；</p><p>（3）<strong>inline-block</strong>：将对象设置为 inline 对象，但对象的内容作为 block 对象呈现，之后的内联对象会被排列在同一行内。</p><p>对于行内元素和块级元素，其特点如下：</p><p><strong>（1）行内元素</strong></p><ul><li><strong>设置宽高无效；</strong></li><li><strong>可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；</strong></li><li>不会自动换行；</li><li>如：a,span,img,label,input,textarea,select,strong,u,em等等</li></ul><p><strong>（2）块级元素</strong></p><ul><li>可以设置宽高；</li><li>设置 margin 和 padding 都有效；</li><li>可以自动换行；</li><li>多个块状，默认排列从上到下。</li><li>如：h1-hi6,p,div,hr,,ol,ul,li等等</li></ul><h3 id="display-inline-block-什么时候会显示间隙？"><a href="#display-inline-block-什么时候会显示间隙？" class="headerlink" title="display:inline-block 什么时候会显示间隙？"></a>display:inline-block 什么时候会显示间隙？</h3><ul><li>有空格时会有间隙，可以删除空格解决；</li><li><code>margin</code>正值时，可以让<code>margin</code>使用负值解决；</li><li>使用<code>font-size</code>时，可通过设置<code>font-size:0</code>、<code>letter-spacing</code>、<code>word-spacing</code>解决；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器及实现原理</title>
      <link href="/2022/03/02/css/05/"/>
      <url>/2022/03/02/css/05/</url>
      
        <content type="html"><![CDATA[<hr><p>类选择器和伪类的区别及优先级？<br>伪类及实现原理</p><h2 id="CSS选择器及实现原理"><a href="#CSS选择器及实现原理" class="headerlink" title="CSS选择器及实现原理"></a>CSS选择器及实现原理</h2><h3 id="1-CSS选择器优先级"><a href="#1-CSS选择器优先级" class="headerlink" title="1. CSS选择器优先级"></a>1. CSS选择器优先级</h3><table><thead><tr><th><strong>选择器</strong></th><th><strong>格式</strong></th><th><strong>优先级权重</strong></th></tr></thead><tbody><tr><td>id 选择器</td><td>#id</td><td>100</td></tr><tr><td>类选择器</td><td>.classname</td><td>10</td></tr><tr><td>属性选择器</td><td>a[ref=“eee”]</td><td>10</td></tr><tr><td>伪类选择器</td><td>li:last-child</td><td>10</td></tr><tr><td>标签选择器</td><td>div</td><td>1</td></tr><tr><td>伪元素选择器</td><td>li::after</td><td>1</td></tr><tr><td>相邻兄弟选择器</td><td>h1+p</td><td>0</td></tr><tr><td>通用兄弟选择器</td><td>h1~p</td><td>0</td></tr><tr><td>子选择器</td><td>ul&gt;li</td><td>0</td></tr><tr><td>后代选择器</td><td>li a</td><td>0</td></tr><tr><td>通配符</td><td>*</td><td>0</td></tr></tbody></table><p>对于选择器的<strong>优先级</strong>：</p><ul><li>标签选择器、伪元素选择器：1</li><li>类选择器、伪类选择器、属性选择器：10</li><li>id 选择器：100</li><li>内联样式：1000</li><li>!important：10000  </li></ul><p><strong>注意事项：</strong></p><ul><li>如果优先级相同，则最后出现的样式生效；</li><li>继承得到的样式的优先级最低；</li><li>样式表的来源不同时，优先级顺序为：内联样式 &gt; 内部样式 &gt; 外部样式 &gt; 浏览器用户自定义样式 &gt; 浏览器默认样式。</li></ul><h3 id="2-伪类选择器"><a href="#2-伪类选择器" class="headerlink" title="2. 伪类选择器"></a>2. 伪类选择器</h3><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span>link ：选择未被访问的链接<span class="token punctuation">:</span>visited：选取已被访问的链接<span class="token punctuation">:</span>active：选择活动链接<span class="token punctuation">:</span>hover ：鼠标指针浮动在上面的元素<span class="token punctuation">:</span>focus ：选择具有焦点的<span class="token punctuation">:</span>first-child：父元素的首个子元素<span class="token punctuation">:</span>first-of-type 表示一组同级元素中其类型的第一个元素<span class="token punctuation">:</span>last-of-type 表示一组同级元素中其类型的最后一个元素<span class="token punctuation">:</span>only-of-type 表示没有同类型兄弟元素的元素<span class="token punctuation">:</span>only-child 表示没有任何兄弟的元素<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 根据元素在一组同级中的位置匹配元素<span class="token punctuation">:</span><span class="token function">nth-last-of-type</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> 匹配给定类型的元素，基于它们在一组兄弟元素中的位置，从末尾开始计数<span class="token punctuation">:</span>last-child 表示一组兄弟元素中的最后一个元素<span class="token punctuation">:</span>root 设置HTML文档<span class="token punctuation">:</span>empty 指定空的元素<span class="token punctuation">:</span>enabled 选择可用元素<span class="token punctuation">:</span>disabled 选择被禁用元素<span class="token punctuation">:</span>checked 选择选中的元素<span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> 选择与 &lt;selector> 不匹配的所有元素</code></pre><h3 id="3-伪元素选择器"><a href="#3-伪元素选择器" class="headerlink" title="3. 伪元素选择器"></a>3. 伪元素选择器</h3><pre class=" language-css"><code class="language-css"><span class="token punctuation">:</span><span class="token punctuation">:</span>first-letter ：用于选取指定选择器的首字母<span class="token punctuation">:</span><span class="token punctuation">:</span>first-line ：选取指定选择器的首行<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token property">before</span> <span class="token punctuation">:</span> 选择器在被选元素的内容前面插入内容<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token property">after</span> <span class="token punctuation">:</span> 选择器在被选元素的内容后面插入内容</code></pre><ul><li>伪类伪元素区别：1、伪类的操作对象是文档树中<strong>已有的元素</strong>；而伪元素则是创建的文档树外的元素。2、css3中，<strong>单冒号代表伪类</strong>，双冒号表示伪元素。3、伪类侧重丰富选择器的选择语法范围内元素的选择能力，伪元素侧重表达或者定义不在语法定义范围内的抽象元素。</li></ul><h3 id="4-属性选择器"><a href="#4-属性选择器" class="headerlink" title="4. 属性选择器"></a>4. 属性选择器</h3><pre class=" language-css"><code class="language-css">[attribute*=value]：选择attribute属性值包含value的所有元素[attribute^=value]：选择attribute属性开头为value的所有元素[attribute$=value]：选择attribute属性结尾为value的所有元素[attribute=value] 选择所有使用attribute=value的元素</code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐藏元素的方法</title>
      <link href="/2022/03/02/css/06/"/>
      <url>/2022/03/02/css/06/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="隐藏元素的方法"><a href="#隐藏元素的方法" class="headerlink" title="隐藏元素的方法"></a>隐藏元素的方法</h2><ul><li><strong>display: none</strong>：渲染树不会包含该渲染对象，因此该元素不会在页面中占据位置，也不会响应绑定的监听事件。</li><li><strong>visibility: hidden</strong>：元素在页面中仍占据空间，但是不会响应绑定的监听事件。</li><li><strong>opacity: 0</strong>：将元素的透明度设置为 0，以此来实现元素的隐藏。元素在页面中仍然占据空间，并且能够响应元素绑定的监听事件。</li><li><strong>position: absolute</strong>：通过使用绝对定位将元素移除可视区域内，以此来实现元素的隐藏。</li><li><strong>z-index: 负值</strong>：来使其他元素遮盖住该元素，以此来实现隐藏。</li><li><strong>clip/clip-path</strong> ：使用元素<strong>裁剪</strong>的方法来实现元素的隐藏，这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li><li><strong>transform: scale(0,0)<strong>：将元素</strong>缩放</strong>为 0，来实现元素的隐藏。这种方法下，元素仍在页面中占据位置，但是不会响应绑定的监听事件。</li><li>设置height、width模型属性为0</li></ul><table><thead><tr><th></th><th>display: none</th><th>visibility: hidden</th><th>opacity: 0</th></tr></thead><tbody><tr><td>页面中</td><td>不存在</td><td>存在</td><td>存在</td></tr><tr><td>自身绑定事件</td><td>不触发</td><td>不触发</td><td>不一定</td></tr><tr><td>重排</td><td>会</td><td>不会</td><td>不会</td></tr><tr><td>重绘</td><td>会</td><td>会</td><td>不一定</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFC</title>
      <link href="/2022/03/02/css/07/"/>
      <url>/2022/03/02/css/07/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a>1. 是什么</h3><p>BFC（Block Formatting Context），即块级格式化上下文，目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素，<strong>即浮动</strong>。<br>浮动和清除浮动时，只会应用于同一个BFC内的元素。浮动不会影响其他BFC中的元素布局，清除浮动（clear：both|left|right）只能清除同一BFC中在它前面的元素浮动。</p><h3 id="2-触发BFC的条件"><a href="#2-触发BFC的条件" class="headerlink" title="2. 触发BFC的条件"></a>2. 触发BFC的条件</h3><ul><li>根元素：body；</li><li>元素设置浮动：float：left/right 除 none 以外的值；</li><li>元素设置绝对定位：position (absolute、fixed)；</li><li>display 值为：inline-block、flex、grid、table、table-cell、table-caption、等；</li><li>overflow 值为：hidden、auto、scroll，不为visible。</li></ul><h3 id="3-应用场景"><a href="#3-应用场景" class="headerlink" title="3. 应用场景"></a>3. 应用场景</h3><h4 id="防止margin塌陷"><a href="#防止margin塌陷" class="headerlink" title="防止margin塌陷"></a>防止margin塌陷</h4><p>在 同一个BFC 中相邻的两个容器的 margin 会重叠。<br>由于 BFC 是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个 BFC，就解决了 margin 重叠的问题。</p><pre><code>&lt;style&gt;    .wrap &#123;        overflow: hidden;// 新的BFC    &#125;    p &#123;        color: #f55;        background: #fcc;        width: 200px;        line-height: 100px;        text-align:center;        margin: 100px;    &#125;&lt;/style&gt;&lt;body&gt;    &lt;p&gt;Haha&lt;/p &gt;    &lt;div class=&quot;wrap&quot;&gt;        &lt;p&gt;Hehe&lt;/p &gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="解决高度塌陷的问题（清除浮动）（父子之间）"><a href="#解决高度塌陷的问题（清除浮动）（父子之间）" class="headerlink" title="解决高度塌陷的问题（清除浮动）（父子之间）"></a>解决高度塌陷的问题（清除浮动）（父子之间）</h4><p>在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为 0。解决这个问题，只需要把父元素变成一个 BFC。常用的办法是给父元素设置<code>overflow:hidden</code>。<br><strong>计算BFC高度时，浮动子元素也要参与计算</strong> 。</p><pre><code>&lt;style&gt;    .par &#123;        border: 5px solid #fcc;        width: 300px;        overflow: hidden;    &#125;     .child &#123;        border: 5px solid #f66;        width:100px;        height: 100px;        float: left;    &#125;&lt;/style&gt;&lt;body&gt;    &lt;div class=&quot;par&quot;&gt;        &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;        &lt;div class=&quot;child&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;</code></pre><h4 id="创建自适应两栏布局（兄弟之间）"><a href="#创建自适应两栏布局（兄弟之间）" class="headerlink" title="创建自适应两栏布局（兄弟之间）"></a>创建自适应两栏布局（兄弟之间）</h4><p>每个元素的左 margin 值和容器的左 border 相接触，可以利用此特性来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</p><pre><code>&lt;style&gt;    body &#123;        width: 300px;        position: relative;    &#125;     .aside &#123;        width: 100px;        height: 150px;        float: left;        background: #f66;    &#125;     .main &#123;        height: 200px;        background: #fcc;        overflow: hidden;//新的BFC    &#125;&lt;/style&gt;&lt;body&gt;    &lt;div class=&quot;aside&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p>新的BFC不会与浮动的.aside元素重叠。因此会根据包含块的宽度，和.aside的宽度，自动变窄</p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>输入URL到网页呈现</title>
      <link href="/2022/03/02/computer/01/"/>
      <url>/2022/03/02/computer/01/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="输入URL到网页呈现"><a href="#输入URL到网页呈现" class="headerlink" title="输入URL到网页呈现"></a>输入URL到网页呈现</h1><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><ol><li><p>URL解析</p></li><li><p>DNS查询</p></li><li><p>TCP连接</p></li><li><p>HTTP请求</p></li><li><p>响应请求</p></li><li><p>页面渲染</p></li></ol><h2 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h2><h3 id="1-URL解析"><a href="#1-URL解析" class="headerlink" title="1. URL解析"></a>1. URL解析</h3><p>首先判断是否是合法的URL，还是一个待搜索的关键词<br>如果是合法的URL，则进行URL解析   </p><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/27a0c690-bdf4-11eb-ab90-d9ae814b240d.png">  </p><h3 id="2-DNS查询"><a href="#2-DNS查询" class="headerlink" title="2. DNS查询"></a>2. DNS查询</h3><p>获取到域名对应的目标服务器IP地址 </p><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/330fb770-bdf4-11eb-85f6-6fac77c0c9b3.png">  </p><h3 id="3-TCP连接"><a href="#3-TCP连接" class="headerlink" title="3. TCP连接"></a>3. TCP连接</h3><p>浏览器在确定目标服务器的IP地址后，经历三次握手建立TCP连接</p><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/ad750790-bdf4-11eb-85f6-6fac77c0c9b3.png"></p><h3 id="4-发送http请求"><a href="#4-发送http请求" class="headerlink" title="4. 发送http请求"></a>4. 发送http请求</h3><p>建立tcp连接之后，就可以再此基础上通信了。<br><strong>浏览器</strong>发送http请求到目标服务器。请求内容包括：</p><ul><li>请求行(请求方法get/post、请求URL、http协议及版本)</li><li>请求头/报文头</li><li>请求主体  </li></ul><p><strong>常见http请求方法</strong></p><ul><li>GET: 向服务器获取数据；</li><li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li><li>PUT：上传文件，更新数据；</li><li>DELETE：删除服务器上的对象；</li><li>HEAD：获取报文首部，与GET相比，不返回报文主体部分；</li><li>OPTIONS：询问支持的请求方法，用来跨域请求；</li><li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；</li><li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。  </li></ul><p><strong>HTTP Request Header 常见的请求头：</strong></p><ul><li>Accept:浏览器能够处理的内容类型</li><li>Accept-Charset:浏览器能够显示的字符集</li><li>Accept-Encoding：浏览器能够处理的压缩编码</li><li>Accept-Language：浏览器当前设置的语言</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cookie：当前页面设置的任何Cookie</li><li>Host：发出请求的页面所在的域</li><li>Referer：发出请求的页面的URL</li><li><strong>User-Agent：浏览器的用户代理字符串</strong></li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/bbcb60f0-bdf4-11eb-ab90-d9ae814b240d.png"></p><h3 id="5-响应请求"><a href="#5-响应请求" class="headerlink" title="5. 响应请求"></a>5. 响应请求</h3><p>当<strong>服务器</strong>接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，响应消息包括：</p><ul><li>响应行/状态行</li><li>响应头/消息报头</li><li>响应正文 </li></ul><p><strong>HTTP Responses Header 常见的响应头：</strong></p><ul><li>Date：表示消息发送的时间，时间的描述格式由rfc822定义</li><li>server:服务器名称</li><li>Connection：浏览器与服务器之间连接的类型</li><li>Cache-Control：控制HTTP缓存</li><li><strong>content-type:表示后面的文档属于什么MIME类型</strong></li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/c5fe0140-bdf4-11eb-ab90-d9ae814b240d.png"><br>在服务器响应之后，http默认开启长链接keep-alive。<br>当页面关闭之后，tcp连接则会经过四次挥手完成断开</p><h3 id="6-页面渲染"><a href="#6-页面渲染" class="headerlink" title="6. 页面渲染"></a>6. 页面渲染</h3><p>当浏览器接收服务器响应的资源并进行解析：  </p><ul><li>查看响应头信息，根据不同的指示做出相应的处理。比如重定向、存储cookie、解压gzip、缓存资源等等。  </li><li>查看响应头的Content-Type值，<strong>根据不同的资源类型采用不同的解析方式</strong>。</li></ul><p>页面渲染过程：</p><ul><li>解析 HTML，构建 <strong>DOM 树</strong></li><li>解析 CSS ，生成 <strong>CSS 规则树</strong></li><li>合并 DOM 树和 CSS 规则树，生成 <strong>render 树</strong></li><li><strong>布局</strong> render 树（ Layout / reflow ），负责各元素尺寸、位置的计算</li><li><strong>绘制</strong> render 树（ paint / repaint ），绘制页面像素信息</li><li>浏览器会将各层的像素信息发送给 GPU，GPU 会将<strong>各层像素信息合成</strong>（ composite ），显示在屏幕上  </li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/db7bddd0-bdf4-11eb-85f6-6fac77c0c9b3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET和POST</title>
      <link href="/2022/03/02/computer/02/"/>
      <url>/2022/03/02/computer/02/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h2><p>get和post是http请求的两种方法，其区别如下：  </p><ul><li><strong>应用场景（对服务器资源是否产生影响）</strong>：GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li><li><strong>发送的报文实体部分</strong>：Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li><li><strong>参数类型</strong>：post 的参数传递支持更多的数据类型。</li><li><strong>是否缓存</strong>：因为两者应用场景不同，浏览器一般会对 <strong>Get 请求缓存</strong>。但很少对 Post 请求缓存。</li><li><strong>安全性</strong>：Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</li><li><strong>请求长度</strong>：浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</li><li><strong>数据包</strong>：对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）。对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200。并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http1.0,1.1,2.0的区别</title>
      <link href="/2022/03/02/computer/03/"/>
      <url>/2022/03/02/computer/03/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="http1-0-1-1-2-0的区别"><a href="#http1-0-1-1-2-0的区别" class="headerlink" title="http1.0,1.1,2.0的区别"></a>http1.0,1.1,2.0的区别</h2><h3 id="1-http1-0"><a href="#1-http1-0" class="headerlink" title="1. http1.0"></a>1. http1.0</h3><p>HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接</p><h3 id="2-http1-1"><a href="#2-http1-1" class="headerlink" title="2. http1.1"></a>2. http1.1</h3><p>在HTTP1.1中，默认支持<strong>长连接</strong>（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟。<br>客户端可以<strong>同时发送多个请求</strong>，但服务器必须按照接受到客户端请求的<strong>先后顺序</strong>依次回送响应结果。服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着。</p><h3 id="3-http2-0"><a href="#3-http2-0" class="headerlink" title="3. http2.0"></a>3. http2.0</h3><p>新特性：</p><ul><li><p>多路复用<br>HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且<strong>不用按照顺序一一对应</strong>，这样就避免了”队头堵塞”</p></li><li><p>二进制分帧<br>HTTP/2 采用<strong>二进制格式的帧</strong>来传输数据，而非 HTTP 1.x的文本格式，帧解析起来更高效</p></li><li><p>首部压缩<br>例如：下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销<br><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/3c536740-b93b-11eb-ab90-d9ae814b240d.png"></p></li><li><p>服务器推送<br>HTTP2引入服务器推送，允许服务端推送客户端未请求的资源给客户端 </p><h3 id="4-http3-0"><a href="#4-http3-0" class="headerlink" title="4.http3.0"></a>4.http3.0</h3><p>HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP三次握手和四次挥手</title>
      <link href="/2022/03/02/computer/04/"/>
      <url>/2022/03/02/computer/04/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="TCP三次握手和四次挥手"><a href="#TCP三次握手和四次挥手" class="headerlink" title="TCP三次握手和四次挥手"></a>TCP三次握手和四次挥手</h2><p>三次握手那次最容易被攻击</p><h3 id="1-三次握手"><a href="#1-三次握手" class="headerlink" title="1. 三次握手"></a>1. 三次握手</h3><p>三次握手，建立TCP连接，主要是为了确认双方的接收能力和发送能力是否正常并指定自己的初始化序列号为后面的可靠性传送做准备。  </p><p>过程如下：<br>刚开始客户端处于Closed状态，服务端处于Listen状态</p><ul><li>第一次握手：客户端给服务端发送连接请求报文段（SYN报文）并指明客户端的初始化序列号ISN，请求发送后客户端进入 SYN-SENT 状态。</li><li>第二次握手：服务端收到客户端连接请求报文段（SYN报文）后，如果同意连接，则会以自己的SYN报文作为应答，并且指定自己的初始化序列号ISN。同时会把客户端的ISN+1作为ACK，表示自己已经收到客户端的SYN。发送完后服务器便进入 SYN_REVD 的状态。</li><li>第三次握手：当客户端收到连接同意的应答后（SYN报文），向服务端发送一个确认报文（ACK=服务器的ISN+1），表示已经收到服务端的SYN报文了。客户端发送完这个报文后便进入 ESTABLISHED 状态，服务器收到ACK报文后也进入 ESTABLISHED 状态，此时连接建立成功。  </li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663256-5eb6dcdf-fdb6-4b67-a3da-da15c1d396fb.png" alt="image"></p><h4 id="为什么不是两次握手"><a href="#为什么不是两次握手" class="headerlink" title="为什么不是两次握手?"></a>为什么不是两次握手?</h4><ul><li>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。  </li><li>如果是两次握手，客户端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到；<strong>但服务端只能确定对方发的包自己能收到，无法确定自己发的包对方能收到。</strong>  </li><li>并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源</li></ul><h3 id="2-四次挥手"><a href="#2-四次挥手" class="headerlink" title="2. 四次挥手"></a>2. 四次挥手</h3><p>刚开始双方都处于 ESTABLISHED 状态，假如是客户端认为数据发送完成，主动发起关闭请求。四次挥手的过程如下：</p><ul><li>第一次挥手：客户端向服务器发出连接释放请求报文段（FIN=1，序号seq=u），并停止再发送数据，此时客户端进入FIN_WAIT1（终止等待1）状态。</li><li>第二次挥手：服务器收到连接释放报文段，会告诉应用层要释放 TCP 链接。然后向客户端发送连接释放报文段（ACK=1，确认号ack=u+1，序号seq=v），此时客户端进入FIN_WAIT2（终止等待2）状态，服务器进入 CLOSE_WAIT 状态。此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务器仍可以发送数据给客户端。</li><li>第三次挥手：服务器如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），然后服务器便进入 LAST-ACK（最后确认） 状态。</li><li>第四次挥手：客户端收到释放请求（FIN）后，向服务器发送确认报文段（ACK=1，seq=u+1，ack=w+1），此时客户端进入 TIME-WAIT（时间等待） 状态。该状态会持续 2MSL时间（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃）让TCP完全释放，若该时间段内没有服务端的重发请求的话，客户端就进入 CLOSED 状态。当服务器收到确认报文段后，也便进入 CLOSED 状态。  </li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1604023663279-0ea063ba-a06b-4f57-9aa9-0e2d1c8d373c.png" alt="image"></p><h4 id="为什么是四次挥手"><a href="#为什么是四次挥手" class="headerlink" title="为什么是四次挥手"></a>为什么是四次挥手</h4><p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br>最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http和https</title>
      <link href="/2022/03/02/computer/05/"/>
      <url>/2022/03/02/computer/05/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h2><h3 id="1-http"><a href="#1-http" class="headerlink" title="1. http"></a>1. http</h3><p>HTTP (HyperText Transfer Protocol)，即<strong>超文本传输协议</strong>，是实现网络通信的一种规范</p><ul><li>传输的数据不是计算机底层二进制包，而是完整有意义、能被上层应用识别的数据，如HTML 文件, 图片文件等超文本。（传输请求方法和路径）</li><li>数据在A和B之间传输，之间可存在很多第三方，如：A&lt;=&gt;X&lt;=&gt;Y&lt;=&gt;Z&lt;=&gt;B</li><li>实际应用中，http被用于浏览器和服务器之间传递信息（<strong>以明文方式传递信息</strong>，不提供任何方式的数据加密）</li></ul><p>特点：协议简单通信快速、数据类型多样、无连接请求（连接-一个请求-断开）、无状态请求  </p><h3 id="2-https"><a href="#2-https" class="headerlink" title="2. https"></a>2. https</h3><p>https即http运行在安全的SSL/TLS协议上，即HTTPS = HTTP + SSL/TLS。通过 SSL证书来<strong>验证服务器的身份</strong>，并为浏览器和服务器之间的通信进行加密。<br>https特点：<br><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/cb559400-b2ff-11eb-85f6-6fac77c0c9b3.png" alt="信息加密、完整性校验、身份验证"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/1500604/1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png" alt="image"><br>https流程：<br><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/0e409fc0-b20c-11eb-85f6-6fac77c0c9b3.png">  </p><ol><li>客户端通过URL访问服务器并建立SSL连接  </li><li>服务端接受客户端的请求后，将自己的证书（包含<strong>公钥</strong>）传送给客户端</li><li>客户端和服务器协商SSL连接的安全等级，即信息加密的等级</li><li>客户端建立<strong>会话密钥/对称密钥</strong>，然后利用网站的<strong>公钥加密</strong>会话密钥/对称密钥，并发送给服务器</li><li>服务器利用自己的<strong>私钥解密</strong>出会话密钥/对称密钥</li><li>服务器可以利用会话密钥/对称密钥与客户端进行通信了</li></ol><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><ul><li>HTTPS是HTTP协议的<strong>安全</strong>版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全</li><li>HTTP 和 HTTPS 使用连接方式不同，默认<strong>端口</strong>也不一样，HTTP是80，HTTPS是443</li><li>HTTPS 由于需要设计加密以及多次握手，<strong>性能</strong>方面不如 HTTP</li><li>HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书<strong>费用</strong>越高  </li></ul><h3 id="4-补充"><a href="#4-补充" class="headerlink" title="4. 补充"></a>4. 补充</h3><h4 id="对称加密：采用协商的密钥对数据加密，密钥不安全"><a href="#对称加密：采用协商的密钥对数据加密，密钥不安全" class="headerlink" title="对称加密：采用协商的密钥对数据加密，密钥不安全"></a>对称加密：采用协商的密钥对数据加密，密钥不安全</h4><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/e3f040f0-b2ff-11eb-ab90-d9ae814b240d.png">  </p><h4 id="非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。"><a href="#非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。" class="headerlink" title="非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。"></a>非对称加密：实现身份认证和密钥协商，私钥公钥相互加密解密。</h4><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/d9603e60-b2ff-11eb-ab90-d9ae814b240d.png">  </p><h4 id="混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。"><a href="#混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。" class="headerlink" title="混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。"></a>混合加密：确保交换的密钥是安全的前提下，使用对称加密方式进行通信。对会话密钥进行加密解密。</h4><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/f375f290-b2ff-11eb-85f6-6fac77c0c9b3.png">  </p><h4 id="摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）"><a href="#摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）" class="headerlink" title="摘要算法：验证信息的完整性，保障传递的信息未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）"></a>摘要算法：验证信息的完整性，保障传递的<strong>信息</strong>未被黑客修改（明文和摘要使用会话密钥加密）（摘要为明文的压缩版）</h4><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/023790e0-b300-11eb-ab90-d9ae814b240d.png" alt="摘要算法图">  </p><h4 id="数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）"><a href="#数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）" class="headerlink" title="数字签名：身份验证，确认消息的发送者身份，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）"></a>数字签名：身份验证，<strong>确认消息的发送者身份</strong>，不是仿冒者（私钥加密摘要成为数字签名，数字签名只能被公钥解密，公钥和数字签名是公开的）</h4><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/21aa6880-b300-11eb-85f6-6fac77c0c9b3.png" alt="数字签名图">  </p><h4 id="CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名-公钥）"><a href="#CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名-公钥）" class="headerlink" title="CA验证机构：确认公钥的发送者身份，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）"></a>CA验证机构：<strong>确认公钥的发送者身份</strong>，不是仿冒者（私钥在CA机构中，返回给服务器数字签名+公钥）</h4><p>流程如下：  </p><ul><li>服务器的运营人员向数字证书认证机构提出公开密钥的申请</li><li>数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名<br>然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书（密钥+数字签名为公钥证书）后绑定在一起</li><li>服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行非对称加密方式通信</li><li>接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，验证通过则证明公开密钥是数字证书认证机构真实有效、值得姓赖的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http状态码</title>
      <link href="/2022/03/02/computer/06/"/>
      <url>/2022/03/02/computer/06/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><ul><li>1 表示信息</li><li>2 表示成功</li><li>3 表示重定向</li><li>4 表示请求错误</li><li>5 表示服务器错误</li></ul><h3 id="1XX"><a href="#1XX" class="headerlink" title="1XX"></a>1XX</h3><p>代表请求已被接受，需要继续处理。</p><ul><li>100（客户端继续发送请求，这是临时响应）：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输</li></ul><h3 id="2XX"><a href="#2XX" class="headerlink" title="2XX"></a>2XX</h3><p>代表请求已成功被服务器接收、理解、并接受</p><ul><li>206（部分内容）：服务器成功处理了部分请求</li></ul><h3 id="3XX（重点）"><a href="#3XX（重点）" class="headerlink" title="3XX（重点）"></a>3XX（重点）</h3><ul><li>301（永久重定向缓存）：新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名</li><li>302（临时重定向不会缓存）： 常用于未登陆的用户访问用户中心重定向到登录页面</li><li>304（协商缓存）：告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分</li></ul><h3 id="4XX"><a href="#4XX" class="headerlink" title="4XX"></a>4XX</h3><ul><li>400（参数错误）：请求无法被服务器识别</li><li>401（未授权）：请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403（禁止）：告诉客户端禁止访问该站点或者资源</li><li>404（未找到）： 服务器找不到请求的网页</li></ul><h3 id="5XX"><a href="#5XX" class="headerlink" title="5XX"></a>5XX</h3><ul><li>503（服务不可用）：服务器目前无法使用（由于超载或停机维护）</li><li>504（网关超时）：服务器作为网关或代理，但是没有及时从上游服务器收到请求</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP和UDP</title>
      <link href="/2022/03/02/computer/07/"/>
      <url>/2022/03/02/computer/07/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h2><h3 id="1-UDP"><a href="#1-UDP" class="headerlink" title="1. UDP"></a>1. UDP</h3><p>UDP（User Datagram Protocol），用户数据包协议，是一个简单的<strong>面向数据报</strong>的通信协议  </p><ul><li>传输层的UDP对应用层送过来的报文，不合并不拆分，直接加上UDP首部后送给下面的网络层</li><li>传输层的UDP对网络层送过来的报文直接去除UDP首部，然后送给上面的应用层。 </li><li>传输途中出现<strong>丢包</strong>，UDP 也不负责重发 </li><li>当包的到达顺序出现<strong>乱序</strong>时，UDP没有纠正的功能</li><li>出现<strong>网络拥堵</strong>的情况，UDP 也无法进行流量控制等避免网络拥塞行为</li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/928e5d20-b393-11eb-ab90-d9ae814b240d.png"></p><h3 id="2-TCP"><a href="#2-TCP" class="headerlink" title="2. TCP"></a>2. TCP</h3><p>TCP（Transmission Control Protocol），传输控制协议，是一种<strong>可靠、面向字节流</strong>的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送  </p><ul><li>可以进行丢包时的<strong>重发</strong>控制，还可以对次序乱掉的分包进行顺序控制</li><li><strong>拥塞控制</strong>：TCP会根据当前网络的拥塞状态来确定每个报文段的大小</li><li>TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以<strong>控制通信流量的浪费</strong></li><li>根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高<strong>可靠</strong>性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）</li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/a0010d40-b393-11eb-ab90-d9ae814b240d.png">  </p><h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><table><thead><tr><th></th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr><td>传输效率</td><td>传输效率低</td><td>传输效率高</td></tr><tr><td>双工性</td><td>全双工</td><td>一对一，一对多，多对一，多对多</td></tr><tr><td>流量控制</td><td>滑动窗口</td><td>无</td></tr><tr><td>拥塞控制</td><td>慢开始、拥塞避免、快重传、快恢复</td><td>无</td></tr><tr><td>首部开销</td><td>首部最小20字节，最大60字节</td><td>首部开销小，仅8字节</td></tr></tbody></table><ul><li>TCP 提供<strong>可靠</strong>的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方</li><li>TCP 是<strong>面向连接</strong>的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接连接，发送端只负责将数据发送到网络，接收端从消息队列读取</li><li>TCP<strong>面向字节流</strong>，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</li><li>TCP 只能<strong>点对点全双工通信</strong>。UDP 支持一对一、一对多、多对一和多对多的交互通信</li><li>TCP 应用场景适用于对<strong>效率要求低</strong>，对<strong>准确性要求高</strong>或者要求有链接的场景（SMTP、HTTP、FTP等），而UDP 适用场景为对效率要求高，对准确性要求低的场景（DNS、TFTP、SNMP、NFS等）  </li></ul><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/b6cdd800-b393-11eb-ab90-d9ae814b240d.png"></p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>闭包</title>
      <link href="/2022/03/02/js/01/"/>
      <url>/2022/03/02/js/01/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a>1. 是什么</h3><p>闭包可以让你可以在一个内层函数中访问到其外层函数的作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"Mozilla"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// name 是一个被 init 创建的局部变量</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 内部函数定义赋值时产生一个闭包</span>        <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用了父函数中声明的变量</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Mozilla</span></code></pre><h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2. 使用场景"></a>2. 使用场景</h3><p>闭包有两个常用的用途；</p><ul><li><strong>创建私有变量</strong>:使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</li><li><strong>延长变量的生命周期</strong>:使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</li></ul><h4 id="柯里化函数：避免频繁调用具有相同参数函数的同时，又能够轻松的重用"><a href="#柯里化函数：避免频繁调用具有相同参数函数的同时，又能够轻松的重用" class="headerlink" title="柯里化函数：避免频繁调用具有相同参数函数的同时，又能够轻松的重用"></a>柯里化函数：避免频繁调用具有相同参数函数的同时，又能够轻松的重用</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 假设我们有一个求长方形面积的函数</span><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果我们碰到的长方形的宽老是10</span><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">const</span> area2 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">const</span> area3 <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 我们可以使用闭包柯里化这个计算面积的函数</span><span class="token keyword">function</span> <span class="token function">getArea</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> height <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> width <span class="token operator">*</span> height    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> getTenWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 之后碰到宽度为10的长方形就可以这样计算面积</span><span class="token keyword">const</span> area1 <span class="token operator">=</span> <span class="token function">getTenWidthArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 而且如果遇到宽度偶尔变化也可以轻松复用</span><span class="token keyword">const</span> getTwentyWidthArea <span class="token operator">=</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><h4 id="使用闭包模拟私有方法-两个闭包相互独立"><a href="#使用闭包模拟私有方法-两个闭包相互独立" class="headerlink" title="使用闭包模拟私有方法:两个闭包相互独立"></a>使用闭包模拟私有方法:两个闭包相互独立</h4><p>通过使用闭包来定义公共函数，并令其可以访问私有函数和变量，这种方式也叫模块方式.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> Counter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> privateCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">changeBy</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    privateCounter <span class="token operator">+</span><span class="token operator">=</span> val<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    increment<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    decrement<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">changeBy</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> privateCounter<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Counter1 <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Counter2 <span class="token operator">=</span> <span class="token function">makeCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 0 */</span>Counter1<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Counter1<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 2 */</span>Counter1<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter1<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 1 */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Counter2<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* logs 0 */</span></code></pre><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3.缺点"></a>3.缺点</h3><p>如果不是某些特定任务需要使用闭包，在其它函数中创建函数是不明智的，因为闭包在<strong>处理速度和内存消耗</strong>方面对脚本性能具有负面影响</p><p>例如，在创建新的对象或者类时，方法通常应该关联于<strong>对象原型</strong>，而不是定义到对象的构造器中。</p><p>原因在于每个对象的创建，方法都会被重新赋值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>getMessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>MyObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>MyObject<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getMessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.1+0.2!=0.3怎么处理</title>
      <link href="/2022/03/02/js/02/"/>
      <url>/2022/03/02/js/02/</url>
      
        <content type="html"><![CDATA[<hr><p>把需要计算的数字升级（乘以10的n次幂）成计算机能够精确识别的整数，等计算完成后再进行降级（除以10的n次幂），即：</p><pre><code>(0.1*10 + 0.2*10)/10 == 0.3 //true</code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象的创建(new)和继承的方法</title>
      <link href="/2022/03/02/js/03/"/>
      <url>/2022/03/02/js/03/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="对象的创建和继承"><a href="#对象的创建和继承" class="headerlink" title="对象的创建和继承"></a>对象的创建和继承</h2><h3 id="1-对象的创建：构造函数＋原型的组合模式"><a href="#1-对象的创建：构造函数＋原型的组合模式" class="headerlink" title="1. 对象的创建：构造函数＋原型的组合模式"></a>1. 对象的创建：构造函数＋原型的组合模式</h3><h4 id="（1）new操作符的实现步骤"><a href="#（1）new操作符的实现步骤" class="headerlink" title="（1）new操作符的实现步骤"></a>（1）new操作符的实现步骤</h4><ol><li>创建一个新的空对象</li><li>将构造函数的作用域赋给新对象（也就是将实例对象的__proto__属性指向构造函数的prototype属性）</li><li>指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）</li><li>根据构建函数返回类型作判断，如果是原始值则被忽略；如果是返回对象，需要正常处理</li></ol><p>注意：箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Person &amp;#123;name: "Tom", age: 20&amp;#125;</span>t<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'Tom</span></code></pre><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/b429b990-7a39-11eb-85f6-6fac77c0c9b3.png"></p><h4 id="（2）手写new操作符"><a href="#（2）手写new操作符" class="headerlink" title="（2）手写new操作符"></a>（2）手写new操作符</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//手写mynew</span><span class="token keyword">function</span> <span class="token function">mynew</span><span class="token punctuation">(</span>Func<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.创建一个新对象</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.新对象原型指向构造函数原型对象</span>    obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Func<span class="token punctuation">.</span>prototype    <span class="token comment" spellcheck="true">// 3.将构建函数的this指向新对象</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> Func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4.根据返回值判断</span>    <span class="token keyword">return</span> result <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> result <span class="token punctuation">:</span> obj<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以下为测试</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token function">mynew</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">"huihui"</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Person &amp;#123;name: "huihui", age: 123&amp;#125;</span>p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// huihui</span></code></pre><h3 id="2-对象的继承"><a href="#2-对象的继承" class="headerlink" title="2. 对象的继承"></a>2. 对象的继承</h3><p>ES6:利用babel工具进行转换，我们会发现extends实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 原型方法</span>  <span class="token comment" spellcheck="true">// 即 Person.prototype.getName = function() &amp;#123; &amp;#125;</span>  <span class="token comment" spellcheck="true">// 下面可以简写为 getName() &amp;#123;...&amp;#125;</span>  getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Gamer</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用父类的constructor方法，子类得到“this”</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token comment" spellcheck="true">//添加新属性，也可以覆盖父属性</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">''</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token comment" spellcheck="true">//调用父类的getName </span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> asuna <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gamer</span><span class="token punctuation">(</span><span class="token string">'Asuna'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>asuna<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>寄生组合式继承：<code>Object.create()</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> clone <span class="token punctuation">(</span>parent<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span>    child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Parent6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'parent6'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>play <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Parent6<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Parent6<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>friends <span class="token operator">=</span> <span class="token string">'child5'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">clone</span><span class="token punctuation">(</span>Parent6<span class="token punctuation">,</span> Child6<span class="token punctuation">)</span><span class="token punctuation">;</span>Child6<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getFriends <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>friends<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> person6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&amp;#123;friends:"child5",name:"child5",play:[1,2,3],__proto__:Parent6&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person6<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// parent6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person6<span class="token punctuation">.</span><span class="token function">getFriends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// child5</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>普通函数、箭头函数this指向和call、apply、bind</title>
      <link href="/2022/03/02/js/04/"/>
      <url>/2022/03/02/js/04/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="普通函数、箭头函数this指向和call、apply、bind"><a href="#普通函数、箭头函数this指向和call、apply、bind" class="headerlink" title="普通函数、箭头函数this指向和call、apply、bind"></a>普通函数、箭头函数this指向和call、apply、bind</h2><ul><li>普通函数是调用的时候决定this值，this指向可改变</li><li>箭头函数是定义的时候决定this值，this指向固定</li></ul><h3 id="1-常规this指向"><a href="#1-常规this指向" class="headerlink" title="1. 常规this指向"></a>1. 常规this指向</h3><p>this 是<strong>执行上下文</strong>中的一个<strong>属性</strong>，它指向<strong>最后一次调用</strong>这个方法的<strong>对象</strong>。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> name<span class="token operator">=</span><span class="token string">"lucy"</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"martin"</span><span class="token punctuation">,</span>    say<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//martin，this指向obj对象</span><span class="token comment" spellcheck="true">//在定时器中是作为回调函数来执行的，因此回到主栈执行时是在全局执行上下文的环境中执行的</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>say<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//lucy，this指向window对象</span></code></pre><p>回调函数：dom事件回调函数，定时器回调函数，ajax请求回调函数，生命周期回调函数等等。  </p><p>在实际开发中，this 的指向可以通过四种调用模式来判断。</p><ul><li>第一种是<strong>函数调用模式</strong>，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。<pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//this指向window</span></code></pre></li><li>第二种是<strong>方法调用模式</strong>，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。<br>```js<br>p.test() //this指向p<br>p1.p2.test() //this指向p2</li></ul><p>var b = b1.b2.test()<br>b() //this指向b</p><pre><code>- 第三种是**构造器调用模式**，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。```jsvar p = new test() //this指向p</code></pre><ul><li>第四种是 <strong>apply 、 call 和 bind 调用模式</strong>，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。<pre class=" language-js"><code class="language-js">p<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//this指向obj</span></code></pre></li></ul><p>优先级：new构造器调用模式&gt;apply、call 和 bind 调用模式&gt;方法调用模式&gt;函数调用模式</p><h3 id="2-箭头函数及其this指向"><a href="#2-箭头函数及其this指向" class="headerlink" title="2. 箭头函数及其this指向"></a>2. 箭头函数及其this指向</h3><ul><li>箭头函数没有自己的this</li><li>箭头函数的this在函数定义的时候，继承于该函数<strong>外部非箭头函数</strong>的this值</li><li>箭头函数继承来的this永远不能改变</li><li>箭头函数没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能作为构造函数使用</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"kobe"</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//obj</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"kobe"</span>    getName<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//window</span></code></pre><h3 id="3-apply-call-和bind-的区别？"><a href="#3-apply-call-和bind-的区别？" class="headerlink" title="3. apply(),call()和bind() 的区别？"></a>3. apply(),call()和bind() 的区别？</h3><p>它们的作用一模一样，区别仅在于传入参数的形式的不同。</p><ul><li><code>apply(thisArg,[argArray])</code> 立即调用。apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合为<strong>数组或类数组</strong>，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    myname<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// > &amp;#123;"myname":"张三"&amp;#125;,[1,2]</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this指向window</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window</span>fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window</span></code></pre><ul><li><code>call(thisArg,arg1,arg2,···)</code> 立即调用。call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    myname<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// > &amp;#123;"myname":"张三"&amp;#125;,[1,2]</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this指向window</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this指向window</span></code></pre><ul><li><code>bind(thisArg,arg1,arg2,···)</code> <strong>改变this指向后不会立即执行</strong>，而是返回一个永久改变this指向的函数。参数可以多次传入。</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    myname<span class="token punctuation">:</span><span class="token string">"张三"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> bindFn <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this 也会变成传入的obj ，bind不是立即执行需要执行一次</span><span class="token function">bindFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// > &amp;#123;"myname":"张三"&amp;#125;,[1,2]</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// this指向window</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//参数可以多次传入</span><span class="token comment" spellcheck="true">// 方式一：只在bind中传递函数参数</span>fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 方式二：在bind中传递函数参数，也在返回函数中传递参数</span>fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝浅拷贝</title>
      <link href="/2022/03/02/js/05/"/>
      <url>/2022/03/02/js/05/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h2><h3 id="1-浅拷贝"><a href="#1-浅拷贝" class="headerlink" title="1. 浅拷贝"></a>1. 浅拷贝</h3><p>如果<strong>属性是基本类型</strong>，浅拷贝的就是基本类型的值。如果<strong>属性是引用类型</strong>，浅拷贝的就是内存地址</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//逐个遍历obj每个属性，执行 = 操作</span><span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newObj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newObj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>浅拷贝有：</p><ul><li><code>Object.assign()</code></li><li><code>Array.prototype.slice()</code>, <code>Array.prototype.concat()</code></li><li>使用拓展运算符<code>...</code>实现的复制</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    nature<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'smart'</span><span class="token punctuation">,</span> <span class="token string">'good'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    names<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name1<span class="token punctuation">:</span> <span class="token string">'fx'</span><span class="token punctuation">,</span>        name2<span class="token punctuation">:</span> <span class="token string">'xka'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    love<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fx is a great girl'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "love", "Three"]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> fxArr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "love", "Three"]</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fxArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"One"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">,</span> <span class="token string">"Three"</span><span class="token punctuation">]</span><span class="token keyword">const</span> fxArrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>fxArr<span class="token punctuation">]</span>fxArrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"love"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "Two", "Three"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fxArrs<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["One", "love", "Three"]</span></code></pre><h3 id="2-深拷贝"><a href="#2-深拷贝" class="headerlink" title="2. 深拷贝"></a>2. 深拷贝</h3><p>深拷贝开辟一个<strong>新的栈/堆</strong>，两个对象的属性完成相同，但是对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> obj    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object Object]"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object Array]"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>常见的深拷贝方式有：</p><ul><li><p>_.cloneDeep()</p></li><li><p>jQuery.extend()</p></li><li><p>JSON.stringify()</p></li><li><p>手写循环递归</p></li></ul><h3 id="3-区别"><a href="#3-区别" class="headerlink" title="3. 区别"></a>3. 区别</h3><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/d9862c00-69b8-11eb-ab90-d9ae814b240d.png"></p><ul><li>浅拷贝<br>```js<br>const obj1 = {<br>  name : ‘init’,<br>  arr : [1,[2,3],4],<br>};<br>const obj3=shallowClone(obj1) // 一个浅拷贝方法<br>obj3.name = “update”;<br>obj3.arr[1] = [5,6,7] ; // 新旧对象还是共享同一块内存</li></ul><p>console.log(‘obj1’,obj1) // obj1 { name: ‘init’,  arr: [ 1, [ 5, 6, 7 ], 4 ] }<br>console.log(‘obj3’,obj3) // obj3 { name: ‘update’, arr: [ 1, [ 5, 6, 7 ], 4 ] }</p><pre><code>- 深拷贝```jsconst obj1 = &#123;    name : &#39;init&#39;,    arr : [1,[2,3],4],&#125;;const obj4=deepClone(obj1) // 一个深拷贝方法obj4.name = &quot;update&quot;;obj4.arr[1] = [5,6,7] ; // 新对象跟原对象不共享内存console.log(&#39;obj1&#39;,obj1) // obj1 &#123; name: &#39;init&#39;, arr: [ 1, [ 2, 3 ], 4 ] &#125;console.log(&#39;obj4&#39;,obj4) // obj4 &#123; name: &#39;update&#39;, arr: [ 1, [ 5, 6, 7 ], 4 ] &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型和原型链</title>
      <link href="/2022/03/02/js/06/"/>
      <url>/2022/03/02/js/06/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><h3 id="1-原型"><a href="#1-原型" class="headerlink" title="1. 原型"></a>1. 原型</h3><h5 id="在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个-prototype-属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。"><a href="#在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个-prototype-属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。" class="headerlink" title="在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。"></a>在JavaScript中是使用构造函数来新建一个对象的，每一个<strong>构造函数</strong>的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。</h5><h5 id="当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针（-proto-）（对象的隐式原型指针），这个指针指向构造函数的-prototype-属性对应的值。（实例对象的隐式原型等于构造函数的显示原型）"><a href="#当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针（-proto-）（对象的隐式原型指针），这个指针指向构造函数的-prototype-属性对应的值。（实例对象的隐式原型等于构造函数的显示原型）" class="headerlink" title="当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针（__proto__）（对象的隐式原型指针），这个指针指向构造函数的 prototype 属性对应的值。（实例对象的隐式原型等于构造函数的显示原型）"></a>当使用构造函数新建一个对象后，在这个<strong>对象</strong>的内部将包含一个指针（__proto__）（对象的隐式原型指针），这个指针指向构造函数的 prototype 属性对应的值。（<strong>实例对象的隐式原型等于构造函数的显示原型</strong>）</h5><p>一般来说不应该能够获取到构造函数的 prototype 属性对应的值，但是现在浏览器中都实现了 __proto__ 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 <code>Object.getPrototypeOf()</code> 方法，可以通过这个方法来获取对象的原型。</p><h3 id="2-原型链"><a href="#2-原型链" class="headerlink" title="2. 原型链"></a>2. 原型链</h3><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</p><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型</title>
      <link href="/2022/03/02/js/08/"/>
      <url>/2022/03/02/js/08/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h2><h3 id="1-JavaScript有八种数据类型"><a href="#1-JavaScript有八种数据类型" class="headerlink" title="1.JavaScript有八种数据类型"></a>1.JavaScript有八种数据类型</h3><ul><li>Undefined（变量没有初始化，未定义）</li><li>Null（null 值表示一个空对象指针）</li><li>Boolean（true|false）</li><li>Number(八进制（零开头）、十六进制（0x开头）,科学计数法e，NaN“不是数值”)</li><li>String</li><li>Object（Object,Array,Function）</li><li>Symbol(ES6:代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。)</li><li>BigInt(一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。)</li></ul><h3 id="2-基本数据类型和引用数据类型"><a href="#2-基本数据类型和引用数据类型" class="headerlink" title="2. 基本数据类型和引用数据类型"></a>2. 基本数据类型和引用数据类型</h3><h4 id="（1）-基本数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt"><a href="#（1）-基本数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt" class="headerlink" title="（1） 基本数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt"></a>（1） 基本数据类型：Undefined、Null、Boolean、Number、String、Symbol、BigInt</h4><ul><li>简单类型的值存放在<strong>栈（stack）</strong>中，在栈中存放的是对应的<strong>值</strong>，赋值传值。   </li><li>存储在栈中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。栈内存由编译器自动分配释放。</li></ul><h4 id="（2）-引用数据类型：Object（Object-Array-Function）"><a href="#（2）-引用数据类型：Object（Object-Array-Function）" class="headerlink" title="（2） 引用数据类型：Object（Object,Array,Function）"></a>（2） 引用数据类型：Object（Object,Array,Function）</h4><ul><li>引用类型对应的值存储在<strong>堆（heap）</strong>中，在栈中存放的是指向堆<strong>内存的地址</strong>，赋值传地址。   </li><li>存储在堆中的对象，占据空间大、大小不固定。<strong>引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址</strong>。堆内存由开发者分配释放，若开发者不释放，程序结束时可能由<strong>垃圾回收机制</strong>回收。</li></ul><h5 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h5><pre><code>let person = &#123;    name: &quot;Nicholas&quot;,    &quot;age&quot;: 29,//属性名可以是字符串或数值    5: true&#125;;</code></pre><h5 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h5><pre><code>let colors = [&quot;red&quot;, 2, &#123;age: 20 &#125;]colors.push(2)</code></pre><h5 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h5><pre><code>//函数声明式function sum1 (num1, num2) &#123;    return num1 + num2;&#125;//函数表达式let sum2 = function(num1, num2) &#123;    return num1 + num2;&#125;;//箭头函数let sum3 = (num1, num2) =&gt; &#123;    return num1 + num2;&#125;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行上下文和执行上下文栈</title>
      <link href="/2022/03/02/js/07/"/>
      <url>/2022/03/02/js/07/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="执行上下文和执行上下文栈"><a href="#执行上下文和执行上下文栈" class="headerlink" title="执行上下文和执行上下文栈"></a>执行上下文和执行上下文栈</h2><h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a>1. 是什么</h3><p>在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用（先变量提升再函数提升）。这一步执行完了，才开始正式的执行程序。</p><p>执行上下文的类型分为三种：</p><ul><li>全局执行上下文：只有一个，浏览器中的全局对象就是 window对象，this 指向这个全局对象</li><li>函数执行上下文：存在无数个，只有在函数被调用的时候才会被创建，每次调用函数都会创建一个新的执行上下文</li><li>Eval 函数执行上下文： 指的是运行在 eval 函数中的代码，很少用而且不建议使用</li></ul><h3 id="2-创建执行上下文"><a href="#2-创建执行上下文" class="headerlink" title="2. 创建执行上下文"></a>2. 创建执行上下文</h3><p><strong>1）创建阶段</strong></p><p>（1）this绑定</p><ul><li>在全局执行上下文中，this指向全局对象（window对象）</li><li>在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li></ul><p>（2）创建词法环境组件</p><ul><li>词法环境是一种有<strong>标识符——变量映射</strong>的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。</li><li>词法环境的内部有两个组件：<strong>加粗样式</strong>：环境记录器:用来储存变量个函数声明的实际位置<strong>外部环境的引用</strong>：可以访问父级作用域</li></ul><p>（3）创建变量环境组件</p><ul><li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li></ul><p><strong>2）执行阶段</strong></p><p>在这阶段，执行变量赋值、代码执行</p><p><strong>3）回收阶段</strong><br>执行上下文出栈等待虚拟机回收执行上下文</p><h3 id="3-执行上下文栈"><a href="#3-执行上下文栈" class="headerlink" title="3. 执行上下文栈"></a>3. 执行上下文栈</h3><ul><li>JavaScript引擎使用执行上下文栈来管理执行上下文</li><li>当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，<strong>每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶</strong>，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型检测</title>
      <link href="/2022/03/02/js/09/"/>
      <url>/2022/03/02/js/09/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="js数据类型检测"><a href="#js数据类型检测" class="headerlink" title="js数据类型检测"></a>js数据类型检测</h2><h3 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1. typeof"></a>1. typeof</h3><pre class=" language-JavaScript"><code class="language-JavaScript">console.log(typeof 2);               // numberconsole.log(typeof true);            // booleanconsole.log(typeof Symbol()) ;               // symbolconsole.log(typeof 'str');           // stringconsole.log(typeof []);              // object    console.log(typeof function()&#123;&#125;);    // functionconsole.log(typeof &#123;&#125;);              // objectconsole.log(typeof undefined);       // undefinedconsole.log(typeof null);            // object</code></pre><p><strong>其中数组、对象、null都会被判断为object，其他判断都正确。</strong></p><pre class=" language-JavaScript"><code class="language-JavaScript">typeof NaN; // "number"NaN !== NaN //true//NaN为“执行数学运算没有成功，这是失败后返回的结果”//函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</code></pre><h3 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2. instanceof"></a>2. instanceof</h3><p><code>instanceof</code>可以正确判断<strong>引用数据类型</strong>，<strong>其内部运行机制是判断构造函数（后者）的prototype属性是否出现在某个实例对象（前者）的原型链（__proto__）上</strong></p><pre class=" language-JavaScript"><code class="language-JavaScript">//手撕instanceoffunction myInstanceof(left, right) &#123;    // 这里先用typeof来判断基础数据类型，如果是，直接返回false    if(typeof left !== 'object' || left === null) return false;    // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象    let proto = Object.getPrototypeOf(left);    while(true) &#123;                          if(proto === null) return false;        if(proto === right.prototype) return true;//找到相同原型对象，返回true        proto = Object.getPrototypeof(proto);    &#125;&#125;</code></pre><pre class=" language-JavaScript"><code class="language-JavaScript">console.log(2 instanceof Number);                    // falseconsole.log(true instanceof Boolean);                // false console.log('str' instanceof String);                // false let str = new String('xxx')console.log(str instanceof String);                  // true console.log([] instanceof Array);                    // trueconsole.log(function()&#123;&#125; instanceof Function);       // trueconsole.log(&#123;&#125; instanceof Object);                   // true</code></pre><h3 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h3><p><code>constructor</code>有两个作用，一是判断数据的类型，二是实例对象通过 <code>constructor</code> 访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，<code>constructor</code>就不能用来判断数据类型了.</p><pre class=" language-JavaScript"><code class="language-JavaScript">console.log((2).constructor === Number); // trueconsole.log((true).constructor === Boolean); // trueconsole.log(('str').constructor === String); // trueconsole.log(([]).constructor === Array); // trueconsole.log((function() &#123;&#125;).constructor === Function); // trueconsole.log((&#123;&#125;).constructor === Object); // true</code></pre><h3 id="4-Object-prototype-toString-call"><a href="#4-Object-prototype-toString-call" class="headerlink" title="4. Object.prototype.toString.call()"></a>4. Object.prototype.toString.call()</h3><p>调用<code>Object.prototype.toString.call()</code>方法，统一返回格式<code>“[object Xxx]”</code>的字符串。toString是Object的原型方法，而Array、function等<strong>类型作为Object的实例，都重写了toString方法</strong>。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型.</p><pre class=" language-JavaScript"><code class="language-JavaScript">var a = Object.prototype.toString; console.log(a.call(2));console.log(a.call(true));console.log(a.call('str'));console.log(a.call([]));console.log(a.call(function()&#123;&#125;));console.log(a.call(&#123;&#125;));console.log(a.call(undefined));console.log(a.call(null));</code></pre><h3 id="5-判断数组的方法"><a href="#5-判断数组的方法" class="headerlink" title="5. 判断数组的方法"></a>5. 判断数组的方法</h3><ul><li>通过Object.prototype.toString.call()做判断</li></ul><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'Array'</span><span class="token punctuation">;</span></code></pre><ul><li>通过原型链做判断</li></ul><pre class=" language-javascript"><code class="language-javascript">obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span></code></pre><ul><li>通过ES6的Array.isArray()做判断</li></ul><pre class=" language-JavaScript"><code class="language-JavaScript">Array.isArray(obj);</code></pre><ul><li>通过instanceof做判断</li></ul><pre class=" language-javascript"><code class="language-javascript">obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span></code></pre><ul><li><p>通过constructor做判断</p><pre class=" language-JavaScript"><code class="language-JavaScript">(obj).constructor === Array </code></pre></li><li><p>通过Array.prototype.isPrototypeOf</p></li></ul><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript数据类型转换</title>
      <link href="/2022/03/02/js/10/"/>
      <url>/2022/03/02/js/10/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="js数据类型转换"><a href="#js数据类型转换" class="headerlink" title="js数据类型转换"></a>js数据类型转换</h2><h3 id="1-显示转换"><a href="#1-显示转换" class="headerlink" title="1. 显示转换"></a>1. 显示转换</h3><h4 id="1-Number-：将任意类型转换为数值"><a href="#1-Number-：将任意类型转换为数值" class="headerlink" title="(1).  Number()：将任意类型转换为数值"></a>(1).  Number()：将任意类型转换为数值</h4><p>Number转换的时候是很严格的，只要有一个字符（字符串、undefined、对象）无法转成数值，整个字符串就会被转为NaN</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// null：转成0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 空字符串转为0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">// 布尔值：true 转成 1，false 转成 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span><span class="token comment" spellcheck="true">//数字</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token number">324</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 324</span><span class="token comment" spellcheck="true">// 字符串：如果可以被解析为数值，则转换为相应的数值</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'324'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 324</span><span class="token comment" spellcheck="true">// 字符串：如果不可以被解析为数值，返回 NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'324abc'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token comment" spellcheck="true">// undefined：转成 NaN</span><span class="token function">Number</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token comment" spellcheck="true">// 对象：通常转换成NaN(除了只包含单个数值的数组)</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h4 id="2-parseInt-：逐个解析字符，遇到不能转换的字符就停下来"><a href="#2-parseInt-：逐个解析字符，遇到不能转换的字符就停下来" class="headerlink" title="(2).  parseInt()：逐个解析字符，遇到不能转换的字符就停下来"></a>(2).  parseInt()：逐个解析字符，遇到不能转换的字符就停下来</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'32a3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//32</span></code></pre><h4 id="3-String-：将任意类型的值转化成字符串"><a href="#3-String-：将任意类型的值转化成字符串" class="headerlink" title="(3).  String()：将任意类型的值转化成字符串"></a>(3).  String()：将任意类型的值转化成字符串</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 数值：转为相应的字符串</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "1"</span><span class="token comment" spellcheck="true">//字符串：转换后还是原来的值</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "a"</span><span class="token comment" spellcheck="true">//布尔值：true转为字符串"true"，false转为字符串"false"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "true"</span><span class="token comment" spellcheck="true">//undefined：转为字符串"undefined"</span><span class="token function">String</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "undefined"</span><span class="token comment" spellcheck="true">//null：转为字符串"null"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "null"</span><span class="token comment" spellcheck="true">//对象</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "[object Object]"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "1,2,3"</span></code></pre><h4 id="4-Boolean-：将任意类型的值转为布尔值"><a href="#4-Boolean-：将任意类型的值转为布尔值" class="headerlink" title="(4).  Boolean()：将任意类型的值转为布尔值"></a>(4).  Boolean()：将任意类型的值转为布尔值</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Boolean</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false，空字符串</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true，任意对象均为true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="2-隐式转换"><a href="#2-隐式转换" class="headerlink" title="2. 隐式转换"></a>2. 隐式转换</h3><p>两种情况发生隐式转换的场景：</p><ul><li>比较运算（==、!=、&gt;、&lt;）、if、while需要布尔值地方</li><li>算术运算（+、-、*、/、%）</li></ul><h4 id="（1）-自动转换为布尔值"><a href="#（1）-自动转换为布尔值" class="headerlink" title="（1）.自动转换为布尔值"></a>（1）.自动转换为布尔值</h4><p>在需要布尔值的地方，就会将非布尔值的参数自动转为布尔值，系统内部会调用Boolean函数</p><h4 id="（2）-自动转换为字符串"><a href="#（2）-自动转换为字符串" class="headerlink" title="（2）.自动转换为字符串"></a>（2）.自动转换为字符串</h4><p>常发生在<code>+</code>运算中，一旦存在字符串，则会进行字符串拼接操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// '51'</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// "5true"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// "5false"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "5[object Object]"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// "5"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "5function ()&amp;#123;&amp;#125;"</span><span class="token string">'5'</span> <span class="token operator">+</span> undefined <span class="token comment" spellcheck="true">// "5undefined"</span><span class="token string">'5'</span> <span class="token operator">+</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// "5null"</span></code></pre><h4 id="（3）-自动转换为数值"><a href="#（3）-自动转换为数值" class="headerlink" title="（3）.自动转换为数值"></a>（3）.自动转换为数值</h4><p>除了<code>+</code>有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'5'</span> <span class="token operator">-</span> <span class="token string">'2'</span> <span class="token comment" spellcheck="true">// 3</span><span class="token string">'5'</span> <span class="token operator">*</span> <span class="token string">'2'</span> <span class="token comment" spellcheck="true">// 10</span><span class="token boolean">true</span> <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// 0</span><span class="token boolean">false</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// -1</span><span class="token string">'1'</span> <span class="token operator">-</span> <span class="token number">1</span>   <span class="token comment" spellcheck="true">// 0</span><span class="token string">'5'</span> <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 0</span><span class="token boolean">false</span> <span class="token operator">/</span> <span class="token string">'5'</span> <span class="token comment" spellcheck="true">// 0</span><span class="token string">'abc'</span> <span class="token operator">-</span> <span class="token number">1</span>   <span class="token comment" spellcheck="true">// NaN-1=>NaN</span><span class="token keyword">null</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 1</span>undefined <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// NaN</span></code></pre><p>null转为数值时，值为0 ;<code>undefined</code>转为数值时，值为<code>NaN</code></p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>object.is()，==和===</title>
      <link href="/2022/03/02/js/11/"/>
      <url>/2022/03/02/js/11/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="object-is-，-和"><a href="#object-is-，-和" class="headerlink" title="object.is()，==和==="></a>object.is()，==和===</h2><ul><li>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化（布尔值，数值，原始值）后再进行比较。</li><li>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li><li>使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如<code>-0</code>和<code>+0</code>不再相等，两个<code>NaN</code>是相等的。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//==相当于约等于</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true，转为布尔值</span><span class="token string">'55'</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true，转为数值</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>valueOf<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true，转为原始值</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token number">NaN</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">(</span>obj1 <span class="token operator">==</span> obj2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">//常见练习：操作符两边的值都尽量转成number</span><span class="token string">''</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token comment" spellcheck="true">// false，类型相同，不存在类型转换</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token comment" spellcheck="true">// true，转为数值</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token comment" spellcheck="true">// true，转为数值</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">'false'</span> <span class="token comment" spellcheck="true">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token comment" spellcheck="true">// true</span><span class="token boolean">false</span> <span class="token operator">==</span> undefined <span class="token comment" spellcheck="true">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">null</span> <span class="token operator">==</span> undefined <span class="token comment" spellcheck="true">// true</span><span class="token string">' \t\r\n'</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>var、let、const区别</title>
      <link href="/2022/03/02/js/12/"/>
      <url>/2022/03/02/js/12/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="var、let、const区别"><a href="#var、let、const区别" class="headerlink" title="var、let、const区别"></a>var、let、const区别</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>ES5：var声明的变量既是全局变量也是顶层对象的属性(顶层对象在浏览器指的是window对象，在Node指的是global对象)  </p><ul><li>变量提升（值为undefined）</li><li>重复声明，变量覆盖</li><li>函数中var a=30声明的变量是局部的</li><li>函数中a=30声明的变量是全局的</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6：let声明的变量只在let相应的作用域内有效   </p><ul><li>不存在变量提升（暂时性死区：let声明变量前，该变量都不可用）</li><li>块级作用域（不再受外部影响，只考虑内部变量）</li><li>不允许在相同作用域内重复声明</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>ES6：const声明的常量指向的那个<strong>内存地址所保存的数据</strong>不得改动  </p><p>对于简单类型数据，内存地址所保存的数据是<strong>常量值</strong>   </p><p>对于复杂类型的数据，内存地址所保存的数据是<strong>指针地址</strong></p><ul><li>不存在变量提升（暂时性死区） </li><li>块级作用域</li><li>不允许在相同作用域内重复声明</li><li>const声明一个只读的常量，一旦声明，常量的值就不能改变</li><li>const一旦声明变量，就必须立即初始化，不能留到以后赋值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域和作用域链</title>
      <link href="/2022/03/02/js/13/"/>
      <url>/2022/03/02/js/13/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h2><p>变量提升（暂时性死区：let声明变量前，该变量都不可用）<br>先变量提升再函数提升</p><p>怎么理解JS 静态作用域<br>如何使其拥有动态作用域的特性</p><h3 id="1-全局作用域"><a href="#1-全局作用域" class="headerlink" title="1. 全局作用域"></a>1. 全局作用域</h3><ul><li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li><li>所有未定义直接赋值的变量自动声明为全局作用域</li><li>所有window对象的属性拥有全局作用域</li><li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li></ul><h3 id="2-函数作用域"><a href="#2-函数作用域" class="headerlink" title="2. 函数作用域"></a>2. 函数作用域</h3><ul><li>函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</li><li>作用域是分层的，内层作用域可以访问外层作用域，反之不行<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string">'Hello World!'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印 'Hello World!'</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错： Uncaught ReferenceError: greeting is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="3-块级作用域"><a href="#3-块级作用域" class="headerlink" title="3. 块级作用域"></a>3. 块级作用域</h3><ul><li>使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由<code>&#123; &#125;</code>包裹的代码片段）</li><li>let和const声明的变量不会有变量提升，也不可以重复声明</li><li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li></ul><h3 id="4-作用域链"><a href="#4-作用域链" class="headerlink" title="4. 作用域链"></a>4. 作用域链</h3><p>在<strong>当前作用域</strong>中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去<strong>父级作用域</strong>查找，依次向上级作用域查找，<strong>直到访问到window对象</strong>就被终止，这一层层的关系就是作用域链。</p><p>作用域链的作用是<strong>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</strong></p><h3 id="5-静态作用域"><a href="#5-静态作用域" class="headerlink" title="5. 静态作用域"></a>5. 静态作用域</h3><p>词法作用域，又叫静态作用域，<strong>变量被创建时（写代码时）它的作用域就确定好了</strong>，而非执行阶段确定的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//2</span></code></pre><p><img src="https://raw.githubusercontent.com/yuefei-su/My-DrawingBed/main/notes/29fab3d0-718f-11eb-85f6-6fac77c0c9b3.png" alt="上图代码解析"><br>由于JavaScript遵循词法作用域，相同层级的 foo 和 bar 就没有办法访问到彼此块作用域中的变量，所以输出2</p>]]></content>
      
      
      <categories>
          
          <category> 苏越飞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
